/***********************************************************************************
* SCRAWL.JS Library 
*
*	version 6.0.1 - 14 January 2017
*	Developed by Rik Roots - rik.roots@gmail.com, rik@rikweb.org.uk
*
*   Scrawl demo website: http://scrawl.rikweb.org.uk
*
***********************************************************************************/

Currently working on ...
------------------------------------------------------------------------------------
- bugtracking following release of v6.0.1

Topics that I want|need to look at (in no particular order) ...
------------------------------------------------------------------------------------
- improving the code base (always)
- refactor filters
- user accessibility issues
- touch/pointer events on mobile/handheld devices
- improve save/load operations - to allow realtime updates of a shared canvas over the net
- physics engine - rigid body interactions
	
Currently known bugs
------------------------------------------------------------------------------------
- tracking of touch/pointer events
	- on mobile is less than satisfactory

- Text along path
	- The text does not yet take into account any path handle offsets

CHANGE LOG
------------------------------------------------------------------------------------
to 170211
	- refactoring
		- refactoring all setters
		- refactoring all constructors and clone functionality
		- work completed for
			- core
			- block
			- wheel
			- phrase
		- demo tests passing:
			- block/wheel/phrase - 001, 002, 003, 005, 007, 010, 011, 015, 078
			- gradients - 039, 081, 085
			
to 170204
	- refactoring
		- removed scrawl.work.d and rewritten .get functionality
			- breaks the 5xx load/save functionality (which is a good thing)
		- running various tests in browsers to see where other code bottlenecks may lie ...
	- bunny tests (no of bunnies that can be animated at 20fps) ...
		- Chrome:   031a - 2740, 032a - 3850, 033a -  4600
		- IE11:     031a - 2160, 032a - 4550, 033a -  7700
		- Edge:     031a - 2220, 032a - 4800, 033a -  8600
		- Firefox:  031a - 4680, 032a - 8200, 033a - 18100
	- starfield tests (no of stars that can be animated at ~ 20fps) ...
		- Edge:     220 - 100(11fps), 221 -  400(16fps), 119 - 1700(19fps)
		- IE11:     220 - 100(14fps), 221 -  400(17fps), 119 - 1700(18fps)
		- Firefox:  220 - 100(18fps), 221 -  500(17fps), 119 - 3000(19fps)
		- Chrome:   220 - 300(15fps), 221 - 1400(18fps), 119 - 3900(19fps)


170129
	- refactoring color extension
		- codebase too large
		- tested against demos: 
			- 016, 035, 044, 046, 050, 052, 057, 080, 
			- 090, 099, 106, 113, 210, 213, 504
				- all pass
	- minor efficiency updates to Context object and cell engine manipulation
	- bunny tests (no of bunnies that can be animated at 20fps) ...
		- Chrome:   031a - 2660, 032a - 3850, 033a -  4600
		- IE11:     031a - 1820, 032a - 4550, 033a -  7900
		- Edge:     031a - 1780, 032a - 4700, 033a -  8500
		- Firefox:  031a - 2460, 032a - 8300, 033a - 17300
	- starfield tests (no of stars that can be animated at ~ 20fps) ...
		- Edge:     220 - 100(10fps), 221 -  300(19fps), 119 - 1400(20fps)
		- IE11:     220 - 100(13fps), 221 -  300(20fps), 119 - 1300(20fps)
		- Firefox:  220 - 100(18fps), 221 -  400(22fps), 119 - 3000(20fps)
		- Chrome:   220 - 300(15fps), 221 - 1200(20fps), 119 - 3400(20fps)
	- changes merged into develop branch
		- min.js filesize changes (approx 26.5kb smaller)
			file                          before   after     Diff
			                              (6.0.1)  (7.0.0a)
			scrawlFilters/MultiFilters    24.60    11.70     -12.9
			scrawlColor                   17.40    06.67     -10.7
			scrawlBlock                   04.62    03.41     -01.2
			scrawlWheel                   06.72    06.06     -00.6
			scrawlFrame                   20.10    19.30     -00.8
			scrawlPath                    23.50    23.20     -00.3
			scrawlShape                   08.61    08.34     -00.2
			scrawlAnimation               27.90    27.80     -00.1
			scrawlImageLoad               08.93    08.77     -00.1
			scrawlImages                  39.20    39.10     -00.1
			scrawlPhysics                 09.15    09.00     -00.1
			scrawlStacks                  49.10    49.00     -00.1
			scrawlCollisions              10.30    10.30      00.0
			scrawlPathFactories           08.01    08.01      00.0
			scrawlQuaternion              05.53    05.47      00.0
			scrawlSaveLoad                08.15    08.15      00.0
			scrawlPhrase                  12.40    12.50     +00.1
			scrawlCore                    79.90    80.40     +00.5
	TODO:
		- fully test across all browsers
			- try also to test against devices
		- write up inline documentation for MultiFilters extension
		- adapt website tour code to use multifilters
		- update website tutorial page for new filter functionality
		- update learn examples on CodePen to use multifilters
		- update website for release of v7.0.0

to 170129
	- refactor filters code
		- was massively inefficient
		- FIX CAUSES BREAKING CHANGES
			- next release will have to be 7.0.0
		- removed all existing filter code, including the Filters extension
		- attempt to rewrite code using Web Workers abandoned
			- asynchronous fix does not site well with current structure/functionality of library
		- added a new extension - MultiFilter
			- includes Filter and MultiFilter constructors
				- MultiFilters stored in scrawl library
				- Filters are stored locally in MultiFilter objects
			- just a single filter object; all inbuilt filters are a 'species' of this filter
			- MultiFilters operate on the cell image
				- removes all code associated with locating an entity on the cell
			- MultiFilters can be applied either to the entity, or at the group level
				- ability for a filter to be applied direct by Pad or Cell removed
					- better ways to handle that sort of thing at entity or group level
			- MultiFilters allow users to define and apply their own filter code
			- MultiFilters work on assumption they will will work on one or more Filters
			- most filter types (species) ported over
				- grayscale, sepia, invert, brightness, saturation, tint, channels, channelstep, matrix, pixelate
			- new simple filters added for
				- red, green, blue, notred, notgreen, notblue, cyan, magenta, yellow
			- blur filter abandons matrix algorithm in favour of 2-pass blurring
			- 'leach' filter renamed 'chroma'
			- noise and sharpen filters abandoned
				- noise can be replicated by user if necessary
				- sharpen can be undertaken by matrix, or by combining other filters
		- demos 401-414 rewritten to test MultiFilters
		- demos 415-416 removed - no longer required
		- demos 093, 101, 103, 104, 112 rewritten to use MultiFilters
		- demo 121 moved to 102, rewritten to use MultiFilters
	- tested code in Firefox, Edge - all demos perform as expected
		- tested rewritten demos in Chrome, IE11 - all perform as expected
		- the speed gain in IE and Edge is phenomenal!
	- code branch merged back into develop on 170129
		- will not merge to master/release yet
			- going to look at areas for additional performance efficiencies

170114
	- release v6.0.1

to 170113
	- refactor stacks (and frames) for DOM efficiency gains
		- translate and rotation now have dirty flags
		- decoupled zIndex from translateZ (though still coupled by default)
		- efficiency gains excellent - tweens now on a par with (or just below) GSAP
	- new demos 220 and 221 to test tween resilience when animating hundreds of DOM div elements
		- fixed bugs introduced by new code for frames (and stacks)
	- testing:
		- tested demos 107, 114, 115, 120, 121 and 201-221
		- tested in latest versions of Firefox, Chrome, IE11, Edge
			- all tests passed
			- IE11 and Edge juddery when positioning elements relative to browser viewport
			- only IE11 and Edge correctly track mouse on rotated frames
	- TODO:
		- start preparing for release 6.0.1

170104
	- release v6.0.0

to 170103
	- fix website to use latest version

161231
	- fixed demo 107
		- tested in: Firefox, Chrome, IE11, Edge - all pass
	- prepare for release of v6.0.0
		
161230
	- bugfix for demo 098 - bug was in Ticker, Action and Tween set() function
	- TODO: demo 107 (very popular) is an utter mess and needs to be completely rewritten!
		- must happen before moving to v6.0.0
	- Testing (desktop):
		- Firefox
			- tested 096-504 (excluding 4xx filters)
				- all pass except
					- 107 (known broken)
					- 211 (expected fail)
		- IE11
			- tested 001-504 (excluding 4xx filters, 213-216 stack positioning)
				- all pass except
					- 094 (expected fail)
					- 107 (known broken)
					- 108 (expected fail)
					- 112 (fail - video)
		- Chrome
			- tested 001-504 (excluding 4xx filters, 213-216 stack positioning)
				- all pass except
					- 107 (known broken)
					- 112 (fail - video)
					- 211 (expected fail)
		- Edge
			- tested 001-504 (excluding 4xx filters, 213-216 stack positioning)
				- all pass except
					- 107 (known broken)
					- 112 (expected fail - video)

161229
	- new demo 119 to stress-test use of multiple tweens (thousands) in a scene
	- updated demo index page
	- Testing:
		- Firefox
			- tested 001-100
				- test 098 fails - demo doesn't reverse

to 161228
	- tweens and timelines refactor completed
		- fixing Ticker, Action and Tween bugs
		- fixed demos 113, 116, 117, 210, 212
		- fixed non-tween demos 068, 081 - others now working too.

to 161226
	- complete rewrite of Tweens and Timelines
		- THESE ARE BREAKING CHANGES
			- next version will be v6.0.0
		- existing code too complicated
			- abandoned existing conceptual model, and all associated code
			- Ticker objects are (relatively) simple animation objects
			- Tween and Action objects now subscribe to Tickers
		- new model follows a subscribe concept
			- only Tickers keep track of sequenced time; tickers are animation objects
			- Tweens and Actions subscribe to Tickers
			- tween definition radically changed
				- from onCommence/start/end/onComplete structure
				- to attribute-specific objects
		- coding to date:
			- introduced new Animation object - Ticker
			- new Tween section added to Scrawl library
			- Tween code completely rewritten to make use of Ticker
			- Action code reconceptualised, and rewritten to use Tickers
			- Tween and Action objects saved in scrawl.tween - Tweens are no longer animation objects
			- Timeline code binned
		- rewritten demos: 004, 008, 096, 097, 098, 099, 100
			- tested all demos in Firefox
				- needs updating: 207, 504
				- broken: 68, 81, 107, 113, 116, 117, 210, 212

161217
	- version 5.0.5 released
	- inline documentation updated
	- minor hotfixes

December 2016
	- doing some hotfixes
		- for issues discovered while coding up new codepen interactive lessons for website
	- fix bug in design (gradients) .set() function
	- add new functionality to timeline
		- addTween will now accept a tween object as an argument
		- new doXxx functionality
			- doComposition, doCompositionEntitys, doCompositionGroups, doCompositionCells
			- doShow, doShowEntitys, doShowGroups, doShowCells
			- doHide, doHideEntitys, doHideGroups, doHideCells
			- doOrder, doOrderEntitys, doOrderGroups, doOrderCells
		- deprecating functions
			- changeComposition
			- changeOrder
			- changeGroupEntitysOrderTo
			- addShow
			- showMany
			- addHide
			- hideMany
		- the old convenience functions are
			- inefficient - generate too many action objects
			- inconsistent - difficult to understand
	- add the .time attribute to tweens
		- to aid with using the new timeline functionality

160214
	- version 5.0.4 released
	- inline documentation updated
	- minor bugfix

151202
	- version 5.0.3 released
	- minor bugfix

151130
	- version 5.0.2 released
	- minor bugfix

151128
	- version 5.0.1 released
	- minor bugfix

151126
	- version 5.0.0 released

------------------------------------------------------------------------------------
November 2015
	- redesign and recode website tour page
	- update scrawl in light of development issues
		- enhanced timeline functionality
		- adding wheel radius percentage (of width) option
		- bug fixing
		
October 2015
	- testing and bugfixing
	- preparation for release of new major version 5.0.0
		- updating website
			- tour page
			- writing docs for new functionality
			- updating tutorial page to include new functionality
			
September 2015
	- refactoring code for efficiency gains
		- implemented a set of dirty flags
			- currentStart, currentHandle only update when required
		- rewrite stacks for efficiency gains
			- extended functionality of ElementGroups
				- now replicates Group for entities
				- new demo219
			- drag and drop functionality extended to stack Elements
		- rewrite of filters for efficiency gains
			- new maxDimensions functionality to cut down on work filters need to do
		- refactored Frame code
			- frame corners now follow paths - new demo115
			- frames locked to Elements can be dragged/dropped
			- redraw dirty flag - so frame only reconstructed when required
			- stamping functionality completely rewritten
		- refactored Physics code for further efficiencies
		- tidied up scrawl library object
			- all the non-user-centered bits and bobs now found in scrawl.work section
	- bugfixing
		- the changes in the perspectives branch have damaged too many demos
		- next release will have to be major - 5.0.0

August 2015
	- refactoring code for efficiency gains
		- big undertaking - all source files affected
			- wherever possible:
				- replaced isa() functions with direct tests eg value.toFixed, value.substring, etc
				- replaced extended if/else and switch statements with helper objects
					- so code can directly call the required functionality, instead of having to iterate
				- get references to functions and objects used repeatedly in a function at start of function
					- (has a massive efficiency gain in Firefox)
		- rationalized start and handle attributes for cells and entitys
			- new currentStart and currentHandle attributes
				- hold pixel data only, while start and handle attributes can also hold strings
				- only recalculated when start and handle values change
					- was previously calculating pixel data for every iteration of the display cycle
					- calculation on a JIT basis - dirty flags
				- complex calculation process replaced by 2 new functions
					- updateCurrentStart()
					- updateCurrentHandle() 
				- got rid of multiple instances of conversion functionality with single numberConvert() function
		- removed .work.start, .work.handle, etc vector attributes and related reset systems from entitys and cells
			- no longer relevant
		- refactoring Phrase entity
			- was destroying/creating Text elements on every set and setDelta action
				- now only perform these actions when text attribute changes
		- refactoring stacks
		- rationalized filter operations
	- fixed long-standing entity ordering bug on chrome/opera
		- implemented a stable bucket sort algorithm; refactored sorting
			- sorting on a JIT basis - dirty flags
				- was prevously sorting (by default) for each display and animation cycle
			- used for sorting cells, groups, entitys and animations

to 150806
	- integrated perspective experiments into scrawl
		- changed extension name to 'scrawlFrame.js' alias 'frame'
		- changed entity name to 'Frame'
			- created with scrawl.makeFrame() factory function
		- changed corners object name to FramePoint
		- added cloning functionality to Frame entity
		- added functionality to allow attributes of underlying 'lockFrameTo' element to be set via the Frame.set() function
		- underlying frame element can be created as part of the Frame construction process
			- if the 'lockFrameTo' element doesn't already exist, it will be generated automatically
			- tested in demo218
	- TODO
		- add in copyXYWH functionality to allow frame to display just a portion of its image/video/cell
			- remember to check for bounds - can't copy if ref points < 0 or > width/height of source
		- new demo (306?) - flag in breeze
			- to test copy functionality, and that Frames will use physics particles as pivots
		- add in collision functionality
			- treat in a similar manner to Block entitys (edge, corner, center collision points)
		- testing filters functionality
			- amend demo101 to add a Frame - DONE
		- need demos for path functionality
			- that individual corners can be made to track separate paths
			- that 'lockFrameTo' elements can follow a path
		- add in drag/drop functionality
			- only for 'lockFrameTo' Frames?
				- experiment with drag/drop for basic Frames, but not required functionality
		- add test to make sure Frame GCO and globalAlpha settings are respected
		- possibly experiment with adding emulation for backfaceVisibility = false ???
		- investigate best methods for ease of integrating Frame updating as part of a timeline animation 
			- use case: personalized video
				- need to keep Frame (and all other) updates in sync with video playback speeds
				- also need to work out methods of getting corner point data from Adobe
		- start thinking about spline functionality
			- can it be built on top of Frames?
		- ALL FRAME FUNCTIONALITY NEEDS PROPER DOCUMENTATION
			- and needs to be added to the tutorial page

July - August 2015
	- Experiments in perspective
		- work being carried out in new 'perspectives' git branch
		- added a new Extension - scrawl.perspective.js, alias 'perspective'
			- currently defines two objects
				- PerspectivePoint - for defining the attributes of a corner point
				- PerspectiveCornersCell - actually a new Entity
					- a bit different from the other Entitys
						- positioning is by means of corner points, not a single start Vector attribute
						- doesn't understand, or care about, the handle Vector attribute
						- doesn't take into account roll or scale attributes
							- these can be simulated by positioning the corner points appropriately
						- doesn't have a context object, and only takes account of the following context attributes:
							- globalAlpha, globalCompositeOperation
							- lineWidth, lineCap, lineJoin, lineDash, lineDashOffset, miterLimit
							- strokeStyle
							- shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor
						- can in theory detect collisions on its shape, but:
							- doesn't yet have a set of collision points
								- probably restrict these to its corner points
								- but as it uses a canvas (not Entity) path for its outline, could set collision points along that
							- no work done (yet) on drag-and-drop functionality
					- takes as its source either:
						- an image element - tested in new Demo114
						- a video - NOT YET TESTED
						- another cell (canvas element) - NOT YET TESTED
					- using four perspective points, deforms the image to mimic a perspective view
					- understands all the current Entity methods (draw, fill, drawFill, etc)
					- can take raw data to define the position of its corner points on the host cell (NOT FULLY TESTED YET)
						- data can be absolute (numbers) or relative to the host cell (percentage strings, 'top', 'center', etc)
					- can use other entities as pivots for its corner points
						- tested in new Demo114
					- can use paths to calculate the positions of its corner points (NOT TESTED YET)
					- can be locked to DOM elements within a scrawl stack
						- will act like a background to the element, and follow its CSS3 3d transformations
						- tested in new Demo217
		- TODO:
			- consider further positioning issues
				- in particular relating to drag-and-drop
				- adding/accounting for handle Vector attribute - DONE
			- test new Entity in as many different scenarios as possible
				- to see what current Scrawl, Group and Entity functionality breaks when applied to PerspectiveCornersCell
			- test in various browser environments
				- developed in Firefox
				- not yet tested in any other browser or device

------------------------------------------------------------------------------------
150719
	- testing all demos:
		- general:
			- demo110 - reflected bezier curve not creating expected shape (known bug)
			- demo211 - most browsers do not accurately track mouse position on CSS3 3d transitioned elements
				- exception is IE11, which works perfectly!
		beyond the above issues:
			- Firefox (latest) on Windows 7 			
				- all PASS
			- Chrome (latest) on Windows 7 				
				- demo094 - svg file slow animation (expected) 
				- all others PASS
			- IE11 (latest) on Windows 7 				
				- demo094 - svg file slow animation (expected) 
				- demo108 - canvas as .ico - known fail
				- demo112 - video as pattern - known fail
				- demo113 - timeline event not updating slider until timeline completes
					- (all works fine the other way round)
				- demo214 - border and padding discrepancies - known issue
				- demo216 - works, but not perfect
				- demo408 - blur filter remains painfully slow
				- demo410 - matrix filter remains painfully slow
				- demo413 - sharpen filter remains painfully slow
				- demo416 - noise filter remains painfully slow
					- all the above filters are using the 'matrix' algorithm
				- all others PASS
	- move to version 4.3.0
		- website updated; release completed

July 2015
	- reviewed and updated functionality for loading video
	- fixed Chrome collision/hits bug (not recognising evenodd winding) for Path and Shape entitys
	- substantial overhaul of Tweens and Timelines
		- added seekto functionality
		- enabled nesting of timelines
		- timeline custom event emitter
			- together, should allow for synchronization of animations, eg with video playback
	- added device object to scrawl library
		- includes feature detection for various canvas irregularities
			- environment has canvas, css3 3d functionality
			- canvas evenodd winding
			- canvas dashed lines
			- canvas globalCompositeOperations
		- tests environment for video functionality:
			- autoplay
			- using video as a source for canvas entitys
			- videos to play in the browser, not forcing them to play fullscreen
		- holds viewport dimension and position data
	- stack objects (stack, pad, element) can be positioned and sized relative to the viewport 
		- replicates css position: fixed
		- achieved by setting their .viewport attribute to true
	- moved animation loop back into core
		- animation extension now handles:
			- delta animations
			- cell zoom and parallax effects
			- timelines, tweens and actions
		- got rid of the browser change dimensions event listener
			- now part of a scroll and dimensions animation object

150628
	- minor release version 4.2.2
	- updated website to production
	
May - June 2015
	- rewrite and update website
		- tour completely rewritten to take into account new functionality
		- documentation updated with new functionality
		- tutorial rewritten to include new functionality
	- some minor bugfixes along the way

150504
	- nomenclature changes
		- in general, module -> extension
			- scrawl.extensions
			- scrawl.loadExtensions({extensions: []})
		- had to be done. Scrawl 'modules' are extensions of the core, not proper standalone JavaScript modules
			- eg: no require(), no exports{}, no imports(), etc
	- minor release version 4.2.1

------------------------------------------------------------------------------------
150329
	- version 4.2 released
	
February - March 2015
	- major overhaul of events
		- scrawl-specific events: down; move; enter; leave; up
			- integrates mouse, pointer and touch events
		- new scrawl functions to handle adding/removing events
			- addListener(), removeListener() - for scrawl-specific events
			- addNativeListener(), removeNativeListener() - for other DOM events
	- further integration of stacks (DOM elements) and the rest of the scrawl environment
		- new DOM class - 'withcanvas' -  for generating stacks with attached canvases
		- stacks now follow the Pad model for updating and rendering their associated elements (and entitys)
			- scrawl.render() will trigger stack repositioning automatically
		- entitys can use elements as pivots, and vice versa
		- massive cleanup of stack-related code
	- many demos rewritten to take into account new event listener, and stacks, code
		- interactive demos now usable on touch devices (emulated - needs further testing)
	- testing:
		- Firefox (latest) - pass
		- IE11 - pass
		- Chrome/Opera (latest) - pass
		- iPad emulated on Chrome - pass
		- Safari for Windows - fail
			- specifically, breaks on scrawl-specific events
				- executive decision: end testing on Safari for Windows
				- will need to test and fix on Safari for MacPro and devices
		- further testing/fixing required on real devices:
			- particularly important for multitouch events
			- Android tablet, Android phone, iPad, iPhone, windows touch devices

------------------------------------------------------------------------------------
150127
	- version 4.1.0 released

150108-27
	- added in new Timeline functionality
	- coded up new Scrawl website tour page
		- panel 0 - replaced 'hello world' with animation along path + parallax scrolling
		- panel 2 now includes animated gradient
		- panel 4 - made background image greyscale
		- panel 6 (see below)
	- checked all demos, making an effort to include new functionalities where relevant
	- coded up new Scrawl website demos page
		- demos display in an iframe
	- undertook testing of new pages and demos in all relevant browsers
		- firefox; chrome; IE11 - all work as expected, except:
			- IE11 may have an issue with entity ordering when dropping an entity from the mouse
			- Chrome appears to have developed an issue with entity shadows on the fill (but not draw) method
			- in all browsers, nesting stacks to more than 3 layers does not work
				- replaced canvas 6 3d running cat with a new video/filter/animated gradient demo
		- safari (windows) - major issue of videos not playing
			- which damages display of new canvas 6
	- bugfixes for issues uncovered during testing
		- video and image loading
		- Path entity cloning
		- numerous smaller bugfixes

------------------------------------------------------------------------------------
150107
	- version 4.0.0 released

December 2014 - 150107
	- MAJOR overhaul of library and demos
		- in preparation for version 4
		- all code scrutinised for efficiencies

141129
	- fixed localWidth, localHeight for Stack and Element objects
	- NEW OBJECT
		- Scrawl.ElementGroup
			- serves a similar purpose to the Group object
				- connects Stacks, Pads and Elements to their parent Stack
				- should allow groups of DOM elements to be controlled via their ElementGroup
			- rewrote the Stack, Pad, Element and PageElement constructors to include ElementGroup
			- rewrote PageElement.set to take into account changing an element from one stack to another
				- change the group
			- rewrote the scrawl canvas, stack and element factory functions
			- amended scrawl.render() to include scrawl.renderElements()
				- element render functions rewritten to use ElementGroup
			- still needs more cleanup work
		- tested on demos 201-205 - all now working.
			- 203, 204 and 205 need tweaking to see if they can use the new group update functionality

141127-28
	- absolute and relative positioning for Pad objects within a stack
		- startXY, handleXY - can be positioned using px numbers and stack percentage strings
	- setting pad dimensions relative to container stack dimensions
		- added localWidth, localHeight to core.PageElement
		- rewrote Cell and Pad constructors
			- all Cells now given an actualWidth, actualHeight
			- removed Cell.usePadDimensions flag
			- removed Cell.getPadWidth(), Cell.getPadHeight() functions
	- tested revisions in demo111, demo201 - working (so far)

141126
	- Picture and Cell scaled positioning bug - fixed
		- tested on demos017 and 111
	- STILL TO DO before release v4 finalised:
		- DOM Element (stack/pad/element within a stack) to replicate sprite positioning within a cell
			- start vector represents the rotation/reflection coordinate
			- handle vector represents an offset of the top left of the element from the rotation/reflection coordinate
		- DOM element (stack, pad, element) positioning relative to parent stack dimensions
			- 'top', 'bottom', 'center', 'left', 'right'
			- also percentage values relative to width/height of stack from top left corner
				- must take into account scale of parent stack
		- DOM element (stack, pad, element) dimensions relative to parent stack dimensions
			- percentage values relative to width/height of stack
				- must take into account scale of parent stack
			- height attribute can also be set to '0%' or 'auto'
				- in this specific case, height must equal the combined (overlapping) height of all child elements
		- DOM element (stack, pad, element) setDelta to take into account percentage position and dimension values 
		- add functionality to allow DOM elements to use sprite and cell start vectors as their own start vector (pivot)
		- add functionality to allow sprites and cells to use DOM element start vectors as their own start vector (pivot)
		- add linking functionality to allow a DOM element to associate with another DOM element
			- emulate (to a degree) standard DOM flow functionality both vertically and horizontally
				- eg when element height increases due to text reflow, associated elements beneath it reposition automatically 
		- fix text-along-path offset bug
		- make sure all modules comply with new module loading tests

140920
	- PageElements can now take a height attribute of 'auto'
		- also triggered by a value of '0%'
		- 'auto' sets the height of the element to match the combined heights of all child elements

141124-25
	- refining the Video object
		- only implementing 'raw' video for now
			- eg video served as a video element with associated source elements, already present on the page and pulled in via getVideoById()
			- youtube doesn't permit the use of other players for playing its videos
			- dedicated video libraries all seem to implement an swf fallback for legacy browsers
				- canvas can't use flash without significant pre-processing on both sides of the equation
		- demo112 finalised - includes all filters
	
141121-23
	- simplifying filter.add() functions
		- because filterStrength and alpha attributes effectively do the same thing, but alpha is a lot simpler to work with
		- filterStrength attribute deleted
		- demos 401-413 fixed
		- abandoned StereoFilter
		- added new filters:
			- SeparateFilter
			- NoiseFilter
		- new demos written for leach, separate and noise filters (demos 414-416)
		- demo101 adapted to showcase new filters
		- tested demo101 in Firefox, Chrome, Opera, Safari(Windows), IE11 - works in all tested browsers
			- IE doesn't like DocumentFragment.getElementById()
				- replaced with .querySelect() where demo was failing
	- videos
		- first stab at writing the video object
			- works in main browsers except Safari(Windows)
			- IE(11) is very sensitive about sizing issues
			- currently can only import via DOM
				- declaring a video element with correct source child elements
				- Scrawl then imports the videos into the library by moving the video element into the shadow DOM
					- cloning the video DOM element is a world of hurt
			- can control the video via native API commands
				- video can be reached via scrawl.asset.VIDEOID
				- firefox is not looping current video
			- filters work on video
				- good speed with simpler filters
				- more complex filters (eg matrix) give slower performance - expected
					- running demo (new demo112) for any length of time leads to memory leaks and slowdowns
						- needs to be investigated ...
		
141118-20
	- testing:
		- tested up to demo111 
			- need to fix 103, 104
	- condensed all filters stuff into the filters module
		- because it was spreading across many other modules

141117
	- added Cell.rendered attribute
		- determines whether the cell should take part in any part of the display cycle
	- rewrote Pattern constructor and associated functions
		- now makes use of the Image constructor and associated functionality, including callbacks
		- simplifies the Pattern object
	- testing:
		- tested up to demo077 - fixed as I go

141116
	- rewrote Image constructor
		- got rid of all the spaghetti code
		- Image object will be created if it is supplied with an argument object containing one of the following attributes:
			- .element - the DOM <img> element to be added to the library
			- .data - a canvas element ImageDataObject to be converted into an <img> element
			- .url - either the String address to a remote image file, or an url64 encoded image String
		- recoded Picture constructor to work with new Image coding
		- tested in Firefox - all image stuff seems to be working as expected
	- rewrote the display cycle stuff
		- replaced Pad.drawOrder attribute with new Cell attributes:
			- Cell.cleared (boolean) - cell will clear if this is set to true (default)
			- Cell.compiled (boolean) - cell will compile if this is set to true (default for most cells)
			- Cell.shown (boolean) - cell will partake in show functionality if set to true (default for most cells)
			- Cell.compileOrder (number) - Pad compiles cells in ascending compileOrder
			- Cell.showOrder (number) - Pad shows cells in ascending showOrder
		- got rid of all Pad and Cell .stampBackground functionality
			- Cells now have a default .backgroundColor (transparent black)
			- all clearing of cells is done by ctx.fillRect, not ctx.clearRect
		- rewrote all clear, compile, show and render functions
		- rewrote Pad constructor
			- base cells have defaults of - cleared:true, compiled:true, shown:false, compileOrder:9999, showOrder:0
			- display cells have defaults of - cleared:true, compiled:false, shown:false, compileOrder:0, showOrder:0
	- testing:
		- tested up to demo034 - fixed as I go

141115
	- fixed bug in Pad.getCellsForDisplayAction()
		- in any Pad.clear or .compile operation, the base cell must be cleared or compiled last
			- was clearing/compiling first, making use of other cells as patterns almost impossible
		- demo029 recoded, made much simpler
			- using an animated canvas as a pattern is now a lot easier
	- fixed bugs in Entity.convertToPicture(), Group.convertGroupToPicture (previously called Group.convertToEntity())
		- also included ability for both functions to pass a callback function
		- demos103, 104, 105 fixed

141114
	- Base.clone() now makes sure that objects containing callback functions reference that function in the clone
		- both objects will refer to the same function
	- Scrawl.Pattern fixes:
		- loading images from library, and dynamically
			- demo040 now works
		- trying to make demo029 work with fewer kludges in the code
			- added new Cell.visibility attribute
				- if set to false, cell will not be displayed as part of the Pad.show() function
				
141113
	- added new filter: stereo
	- recoded Entity constructor and associated Cell and Pad functions
		- new Entity.filterLevel attribute
			- permitted values: 'entity', 'cell', 'pad'
			- determines at which point in the display cycle the filter will be stamped onto a canvas
		- recoded demo102 to test new functionality
		- current rewrite of Filters module complete
	- TODO:
		- Patterns are broken by image changes- DONE
		- convert Entity to Picture functionality - DONE
		- add in video

141110-12
	- added new filter objects:
		- matrix
		- sharpen
		- blur
		- pixelate
		- leach
			- leach is a new filter, can emulate a 'greenscreen' effect
	- decided to get rid of the glassTile filter
		- required copying and pasting between two canvases - just took too long to be useful
	- added in set functions for those filters that need their set to override the default Base.set()
	- demo101 tests all filters against all Entity types
	- ditching the idea of a new Frame entity
		- filters can be applied to any Entity, so no need for a dedicated frame for them
	
141109
	- added 'none' method to Picture entity
		- allows an image (even an animated sprite) to act as a clipping zone for the filter
			- where only non-transparent pixels will be affected by filter
	- added new filter objects:
		- invert
		- brightness
		- saturation
		- threshold
		- channels
		- channelStep
		- tint
		- sepia
	- started work on creating the matrix filter
		- used in itself as a filter, and also required by the blur and sharpen filters
		- may also use it for the pixellate and glasstile filters
			- though might be easier to construct those ones using the canvases ...
	- TODO - work for when filters are completed:
		- want ability to apply filters immediately after Entity is stamped (current does this)
			- but also ability to delay filter application until after the cell, or pad, has completed compiling - DONE
		- also need to apply filters to entire cells - DONE (create block sprite of 100% w/h, method = 'none', and filterLevel = 'cell' or 'pad')
		- also want to look at convolution filters ...

141108
	- added Entity.stampFilter() method to handle filtering on Entitys
		- uses clip
		- Phrase and Picture get their own versions of the function
			- they don't/can't use clip
	- new GreyscaleFilter object created
		- adapted demo101 to test filter
			- works with Block, Wheel, Phrase, Picture, Path, Shape
			
141107
	- new Filter object created

141106
	- fixed demos 050, 058, 061, 102 (partly - still need to code up filters)
	- started recoding filters
		- adapted Entity.stamp() to take account of filters

141104-05
	- fixing Picture
		- fixed getImage(), getImageData(), .getImageDataValue() bugs
			- no longer a need for developers to explicitly call .getImageData on new Picture Entitys
			- demo018 updated to test functionality
		- fixed .checkHit(), .dropEntity() functions
			- demo049 updated for testing
		- fixed SpriteAnimation (formerly AnimSheet) object
			- adapted demo019 to test functionality
			- fixed demo034

141103
	- fixing Picture.getImageData(), Picture.getImageDataValue()
		- for testing, replicate demo017 in demo018, and add in the demo018 getImageData() getImageDataValue() stuff
		
141102
	- rewrote ScrawlImage object as Image
		- moved to scrawlImageLoad module
		- all img DOM elements added to scrawl.asset object
		- all Image objects saved in scrawl.image/scrawl.imagenames
	- rewrote Picture object
		- massively simplified
			- took out all filter stuff - filters are to be restricted to the new Frame entity
			- sources now limited to Image, Video or Canvas
			- replicated Cell copy and paste attribute functionality
				- Pictures can be constructed with aliases paste, pasteX, pasteY (for start) and pasteWidth, pasteHeight (for width, height)
				- Picture copy functionality - copy, copyX, copyY,copyWidth, copyHeight
					- all values now percentage enabled
					- setting and getting these values should enforce values so that image out of bounds errors should no longer be a problem
			- calculating widths, heights etc now restricted to when attributes are changed via set/setDelta
				- hopefully means quicker Picture rendering
		- all needs to be tested thoroughly
			- TODO: rewrite demo017 with sliders to allow testing - done

141101
	- Sprite to Entity change:
		- completed change for all demos
		- partial testing suggest change has been successful
			- filter demos no longer working
				- not a great loss - filters are going to change anyway
	- decisions:
		- keep ScrawlImage, but massively simplified
			- no filters
		- new Entity - Frame
			- will have 3 parts:
				- first, a source (img element, video element, canvas element, or img element generated from another Entity or Group)
					- much like simplified ScrawlImage
				- second, a path to act as a mask or stencil (default to rectangle)
					- for clipping the frame, and for collision detection
				- third, a set of filters to be applied to Frame
	- updated scrawl.loadModules() function
		- modules can now have (hardcoded) dependencies - stored in new scrawl.loadDependencies object
		- added new scrawl.modules attribute
			- array of loaded module aliases
			- can be used as a (better?) check before running a module's code
		- added in some rudimentary error checking
		- finally separated quaternion code out of core and into its own module - scrawlQuaternion.js
			- alias 'quaternion'
			- stacks and physics modules require quaternion module
				- tested on demo204 - concept works
		- put scrawl.getImagesByClass() and .getImageById() functions into their own module - scrawlImageLoad.js
			- alias 'imageload'
			- required by frame and images modules

141031
	- fixed demo090 - kaliedoscope clock
	- MAJOR BREAKING CHANGE - renaming objects
		- Sprite -> Entity; sprite -> entity (plural entitys)
			- changed all modules
			- changed demos up to demo111
		- Picture -> Frame
		- ScrawlImage -> Image
		- AnimSheet -> Spritesheet
		- new Video wrapper object
		- getting rid of scrawl.img
		- renamed scrawl.object to scrawl.asset
			- badly damages the scrawlImages module
				- but the whole images thing needs sorting out
		- reasoning:
			- make object names reflect what they do
				- Frame (previously Picture) frames either images, sprites or video, or parts of them
				- Sprite to most people means animated image
	
141030
	- BREAKING change
		- renaming Cell attributes
			- all things 'source' become 'copy'
			- all things 'target' become 'paste'
		- updating modules and demos to make this change happen
		- the purpose of this change is to bring attributes and surface functionality of Cells and Picture sprites into closer alignment
			- Pictures already make use of 'copy' for defining dmensions to be copied from image
			- makes sense for cells to do the same
				- so users/coders don't have to keep in mind different attribute names for essentially the same functionality
		- will need to add 'paste' attributes to Picture sprite
			- aliases for start, startX, startY, width, height
			- also looking to implement copyData and pasteData attributes, for faster rendering of pictures
			- also, use Cell limitation functionality to prevent out-of-bounds errors for images
	- additional thoughts:
		- Picture, ScrawlImage, AnimSheet and the filters could do with a thorough rewrite, to make them more cohesive
		- want to add proper video functionality to the library
			- in particular, have video and spritesheets share conventions

141029
	- added tests to all modules (and core) to ensure they only load once
		- this should hopefully allow the library to be used more dynamically
			- for instance if 2 adverts on a web page both use scrawl (and overlapping modules), core and required modules will only run once

141025-28
	- creating and adding YouTube videos to the test suite
		- so people can see the intended animation, rather than me trying to describe it
		- completed up to demo062
		
141023-24
	- bug fixing
		- refactored percentage calculation code to be scrawl utility helper functions
		- rewrote Cell.spliceCell to semi-automate scrolling
		- tested all demos in Firefox
			- all work, except for the new Stack demos
				- stack recoding comes next ...
		- tested most demos in IE11
			- looking very good.

141021-22
	- new utility helpers: 
		- xtGetTrue()
			- returns first true value in a given array of values
		- addWithinBounds()
			- performs calculations within minimum and maximum bounds
		- all modules (except Physics) updated to use new utility functions
	- fixed, and improved, demo052
		- rewrote Cell.spliceCell() in Animation module
			- only works with absolute values for now

141020
	- test demo111 in all browsers - all pass
	- test all demos in Firefox
		- fixed broken demos (037 magnifier, 046 zoom, 051 setDelta, 052, parallax scroller)
	- new utility helper scrawl.xtGet([])
		- used in particular in constructors
		- replaces a=x||y||default code

141017-19
	- rewritten cell dimension and positioning code
		- reviewed and changed source and target definitions
			- adapted code so that source out-of-bounds errors no longer occur
		- added new private sourceData and targetData attributes to hold numerical data
		- sourceXYWH and targetXYWH can now accept percentage strings
			- source XYWH are relative to the cell's actualDimensions
			- targetXYWH are relative to the cell's pad's dimensions
		- constructor, set() and setDelta() adapted to accept percentage values
		- developed demo111 to test new functionality - works

141016
	- finalized code for scrawl.makeRegularShape() function
		- new numerical attributes can also take percentage values 
		- new demo110 to test code
		- bug - there are a few instances (involving s and t commands) where Path and Shape output differently
			- bug is in Path drawing; Shape appears to act correctly
		- updated documentation

141015
	- investigating scrawl.makeRegularShape() factory function bugs ...
		- fixed major bugs concerning 's' and 't' path commands
		- recoded factory to add functionality
			- factory can take new attributes:
				- startControlX, controlX, startControlY, controlY, endControlX, endControlY, lineType
					- control point coordinates and line species
			- factory can now output curves in addition to line patterns

141014
	- gradient and radialGradient recoding completed - for all sprites
		- radial gradient radii can now be a percentage value (based on sprite width)
		- Design.roll attribute changed to Design.shift
			- to disambiguate it from Sprite/Cell/Stack.roll, which is rotation in the z plane
		- all demos involving gradients and gradient animation tested - all good
			- CHANGES BREAK previous library versions
		- demos 048 and 053 adapted to use/test gradients
	
141012-13
	- gradient and radialGradient recoding completed - for Block sprites
		- need to test for other sprites
		- new demo085 for radial gradients
		- still need to recode setDelta to take into account percentage values
	
141011
	- big recode of gradients - BREAKS SUPPORT FOR PREVIOUS RELEASES
		- got rid of ranges (which not even I understood!)
		- start and end values can now take percentage values
			- cell gradients (setToSprite: false - default) are relative to the cell, do not roll with the sprites
			- sprite gradients (setToSprite: true) are relative to the sprite, will roll with the sprite
		- fixed numerous bugs
		- new demo081 to test functionality for Gradients
			- need to add in flipReverse and flipUpend
				- sprite gradients should follow sprite flip settings
				- cell gradients will need to counteract the flips
		- need to recode setDelta to take into account percentage values

141010
	- recoding complete for:
		- sprite setDelta to take into account percentage position and dimension values 
		- tweening routines to tween between percentage values
			- adapted demo096 as proof of concept for startX percentage values

141009
	- updated scrawl.isa() to make it a bit more efficient
	- updated the new/changed Position functions for efficiency
	- fixed positioning bugs introduced by localWidth/localHeight
	- fixed Picture.getImageDataValue() bug
	- fixed Sprite.checkHit() bug
	- sprite.setDelta() updated
		- need a new demo to test setDelta for widths/heights, start and handle

141008
	- recoding complete for:
		- update Shape/Path factories to allow them to accept % string attributres
			- specifically startX, startY, endX, endY, various control points (quadratic, bezier), rectangle width and height
			- most of these attributes are not retained in the final sprite object
			- see demo 109
	- recoding in progress for:
		- sprite setDelta to take into account percentage position and dimension values 
			- DONE:
				- Position.updateStart()
				- Position.revertStart()
				- Position.reverse() - all in scrawlAnimation.js
			- ADDED functions:
				- Position.addPercentages()
				- Position.subtractPercentages()
				- Position.reversePercentage() - all in scrawlCore.js
			- adapted demo041 to use percentages instead of pixels - works
			- need to run tests on setDelta for startXY, handleXY, width, height

141007
	- recoding complete for:
		- sprite positioning relative to canvas (cell) dimensions
			- 'top', 'bottom', 'center', 'left', 'right'
			- also percentage values relative to width/height of cell from top left corner
			- see demo 109
		- sprite dimensions relative to canvas (cell) dimensions
			- percentage values relative to width/height of cell
				- used only with block and picture sprites (width/height)
			- see demo 109

141006
	- CODE REVIEW
		- don't like the direction the later changes are taking the library
		- revert all changes, start again with clearer direction in mind
			- in particular, abandon all attempts to 'automagically' add canvases to stacks
				- should instead be able to pivot a pad to a stack and set its width and height to 100%
				- offset, transform and scale synchronicity will need to be handled manually
			- all code must be cleaner!
	- RECODE OBJECTIVES:
		- sprite positioning relative to canvas (cell) dimensions
			- 'top', 'bottom', 'center', 'left', 'right'
			- also percentage values relative to width/height of cell from top left corner
		- sprite dimensions relative to canvas (cell) dimensions
			- percentage values relative to width/height of cell
				- used only with block and picture sprites (width/height)
		- update Shape/Path factories to allow them to accept % string attributres
			- specifically startX, startY, endX, endY, various control points (quadratic, bezier), rectangle width and height
			- most of these attributes are not retained in the final sprite object
		- sprite setDelta to take into account percentage position and dimension values 
		- recode tweening routines to tween between percentage values for those attributes that can accept them
		- cell positioning relative to canvas (visible cell) dimensions
			- 'top', 'bottom', 'center', 'left', 'right'
			- also percentage values relative to width/height of cell from top left corner
		- cell dimensions relative to canvas (visible cell) dimensions
			- percentage values relative to width/height of cell
		- cell setDelta to take into account percentage position and dimension values 
		- DOM Element (stack/pad/element within a stack) to replicate sprite positioning within a cell
			- start vector represents the rotation/reflection coordinate
			- handle vector represents an offset of the top left of the element from the rotation/reflection coordinate
		- DOM element (stack, pad, element) positioning relative to parent stack dimensions
			- 'top', 'bottom', 'center', 'left', 'right'
			- also percentage values relative to width/height of stack from top left corner
				- must take into account scale of parent stack
		- DOM element (stack, pad, element) dimensions relative to parent stack dimensions
			- percentage values relative to width/height of stack
				- must take into account scale of parent stack
			- height attribute can also be set to '0%' or 'auto'
				- in this specific case, height must equal the combined (overlapping) height of all child elements
		- DOM element (stack, pad, element) setDelta to take into account percentage position and dimension values 
		- add functionality to allow DOM elements to use sprite and cell start vectors as their own start vector (pivot)
		- add functionality to allow sprites and cells to use DOM element start vectors as their own start vector (pivot)
		- add linking functionality to allow a DOM element to associate with another DOM element
			- emulate (to a degree) standard DOM flow functionality both vertically and horizontally
				- eg when element height increases due to text reflow, associated elements beneath it reposition automatically 

140920
	- PageElements can now take a height attribute of 'auto'
		- also triggered by a value of '0%'
		- 'auto' sets the height of the element to match the combined heights of all child elements

140918-19
	- PageElements within a stack can now take percentage values for width and height attributes
		- percentage is relative to the containing stack's width and height

140909-17
	- new Dom class - 'withcanvas'
		- used alongside 'scrawlcanvas' class
		- when present, will cause Scrawl to generate a canvas attached to that stack
	- a lot of work to anneal a stack-locked canvas to its stack
		- canvas can be used to decorate or augment pads, stacks and elements within the stack
		- new stack attribute - 'canvas' - holds name of Pad locked to stack
		- sprites can pivot to pads, stacks and elements within a stack
			- nesting stacks not encouraged
				- calculating relative positions of nested stack elements currently too difficult
				- particularly when stacks have different scales
	- new Display/PageElement attribute - 'localScale'
		- nested stacks and elements have multiplicative scaling
	- TODO:
		- revisit all other stack generating functions to ensure they can also generate canvases
		- more demos to test new/forthcoming functionality
		- fix existing demos
		- release update
			- this may well be a breaking release - v4.0.0 rather v3.2.0

140908
	- new functionality added
		- positioning stacks, pads and elements
			- rewrote handle functionality to match sprite handle functionality
			- reinterpreted start (rotation/reflection point) functionality
				- DOM elements within stacks can now be positioned
					- using numbers, from top left corner of stack
					- using strings 'top', 'bottom', 'center', 'left', 'right'
					- using percentage strings, as percentage of stack's width/height
			- added new attribute to PageElement (when using stacks module)
				- localScale
					- elements will now scale when stack is scaled
					- will maintain positioning within stack
					- substacks, pads and elements can have their own scaling
						- scaling is multiplicative up the stack tree to the root stack
				- linkTo, linkOn
					- intended to add flow between substacks, pads and elements
					- a bit like pivot, but different
					- not yet coded up
		- these changes will probably break existing demo functionality
			- probably not a bad thing ...
			- new demo213 to test changes

140907
	- new functionality added
		- sprites can now take strings for start coordinates
			- use canvas (cell) actualWidth and actualHeight as a reference grid
			- startX accepts 'left', 'center', 'right', 'n%'
			- startY accepts 'top', 'center', 'bottom', 'n%'
			- all sprite methods adapted to accept new values
				- tested on Block, Wheel, Phrase, Path, Shape, Picture sprites
					- works!

September 2014
	- rewriting the scrawl website

August 2014
	- developing a development environment for the library via git
		- uses node and grunt to setup development environment
		- all code linted and beautified
		- library structure overhauled to separate it from the needs of the scrawl website
		- demos included in GitHub

140725-30
	- developed new demo - 213 - featuring animated elements
		- fixed element positioning bugs
		- added .order attribute to animation and tween objects
			- so the order in which animations are executed each screen refresh can be controlled
	- updated to version 3.1.5

140707
	- included a bower.js file in the distribution
	- updated to version 3.1.4
	
------------------------------------------------------------------------------------
140704
	- added the MIT licence text to all scrawl.js JavaScript files
		- http://opensource.org/licenses/MIT
		- uploaded amended files to SourceForge and GitHub as version 3.1.3 revision 1
		
140513
	- move to version 3.1.3
		- tested in all browsers

140510-12
	- developing infographics animated by tweens
	- bugfix - using Phrase sprites in tween animations
	
140509
	- bugfix - sorted the cube canvas flicker issue (205, 208) in Chrome/Opera/Safari
	- move to version 3.1.2
		- tested in all browsers
	
140508
	- mouse listeners
		- tested new code on index page
			- bugs fixed
	- testing
		- Firefox - all tests passed, except: 
			- 101 (pixellate brush not smooth when moving) 
			- 103, 104 (sprites converted to Picture then filtered)
		- Chrome - all tests passed, except 085 (video), 205/208 (cube sides flicker), 211
			- Shape/Path hit detection - even-odd winding not recognised
		- IE11 - all tests passed, except 085 (video), 211
		- Opera - all tests passed, except 205/208 (cube sides flicker), 211
			- Shape/Path hit detection - even-odd winding not recognised
		- SafariWindows 
			- Shape/Path even-odd winding not recognised
			- sprite lineDash attribute not recognised
			- significantly slower than other browsers
			- demo034 gComposition fails
			- demo066 listeners fail
			- demo068 fileLoad not recognised
			- demo101 pixellate brush not smooth when moving
			- demo211
			- demo401 CORS remote image loading
			- (all these issues are browser-specific - no need to be fixed)
		
140507
	- mouse position on rotated canvas
		- found a way to get mouse position
			- uses MouseEvent.layerX, .layerY
				- which only gets reported for mousemove events
				- and only seems to work well in Firefox
		- localised the mousemove event listener
			- does mean more listeners - one per actively tracked element
			- solves the problem of getting .layer data on non-static DOM elements
			- gets rid of the confusion of .mouse related attributes both in library and in Scrawl objects
			- rewrote PageElement.getMouse()
			- new PageElement functions: initMouse(); handleMouseMove(); handleMouseOut(); addMouseMove(); removeMouseMove()
			- PageElement constructor, and .set(), now accept 'mouse' attribute in argument 
				- true to add mousemove events to element; false to remove listeners
				- Pad and Stack automatically add listeners when created; Element does not
		- demo211 - test mouse tracking on rotating canvas element
	
140506
	- hit testing for elements
		- investigating ways to determine mouse position (for drag-drop) on 3d rotated canvas
		
140505
	- hit testing
		- looking to implement hit testing on elements
		- first step - decouple sprite hit testing from individual sprite canvases to the universal canvas
			- because elements don't have default canvases
			- thinking of using sprite.checkHit.call() for element hit testing
				- though there will be issues with this approach for elements with non-zero pitch and yaw values
				- but this can also tie into the issue of getting accurate mouse position on such displaced elements
		- amended Sprite.checkHit(), Path.checkHit(), Shape.checkHit(), Wheel.checkHit()
			- (Picture, Phrase and Block all make use of Sprite.checkHit())
			- also decoupled hit checking from the need to set cell context engines to match sprite context parameters
			- Shape.doOutline() divided into two functions - .doOutline() and .completeOutline()
				- Shape.checkHit() doesn't care about building the outline if it doesn't already exist, or calling the canvas context engine
					- except for winding attribute, which is crucial for hit checking
			- immediate speed improvements (demo072 - 075)
					
140501
	- testing in browsers
		- Safari(Windows)
			- all demos and website pages work to spec
				- except those expected to fail
	- update website
	- upload v3.1.1 to sourceforge, github
	- update broken codepen demos
	- update broken jsFiddle demos
	
140430
	- rewrote Index page and Demo401 to compensate for Windows image loading issues
	- testing in browsers
		- IE11
			- all Demos work fine
				- except for demo085 (video)
			- index page now works to spec
				- residual problems re cloning images in canvas 1 - FIXED
		- Firefox
			- all demos and website pages work to spec
		- Chrome
			- all demos and website pages work to spec
				- except for demo085 (video)
		- Opera
			- all demos and website pages work to spec (including demo085)
			
140429
	- testing in browsers:
		- chrome - all works, except
			- video not playing
		- IE11 - big problems with index page
			- issue with Picture sprites
			- problems with preloading and callbacks

140427-28
	- added callback functionality to scrawl tweens
		- new demo107 to test functionality
	- bugfix: Wheel.checkHit()
		- function wasn't taking rotation and scale into account for radius-based collision detection
		- new demo106 to test collision detection
	- updated documentation
	- minified modules generated
	- testing in browsers:
		- Firefox - all work
		
140216-22
	- Operation SaveMemory
		- quaternion functionality completely rewritten
			- fixes many bugs in the original code
			- DOM element transforms in the stack now work completely as expected
		- new work vectors and quaternions
			- scrawl.workphys (v1-v5)
				- for dedicated physics calculations
			- scrawl.workquat object (q1-q5)
				- included in core module (not stacks) in case people want to use quaternions for other stuff
	- new functions: scrawl.update3d(), PageElement.update3d()
		- separated out 3d updates from .updateStart() functionality
			- means including an extra call in 3d demos, but well worth it
			- all stack demos rewritten
	- dumped Sprite.bounceOnFieldCollision()
		- wasn't working well at all under the new paradigm
		- converted demos060, 079 to use physics module and physics collisions
			- not a perfect solution, but at least they work now
	- tested all demos, and web pages, in Firefox - all pass
	- UPDATE to Version 3.1.0
				
------------------------------------------------------------------------------------
140412-15
	- Operation SaveMemory
		- vector generation is out of hand
			- checking memory usage and garbage collection shows some serious sawtooth patterns
			- DECISION: prevent excessive vector generation by getting rid of most of the Vector.getXYZ() functions
		- fixed Vector.set()
			- was setting attributes to 0 if they were not included in the argument object
		- introduced work vectors into the scrawl library
			- scrawl.v 
				- the universal vector, for use in any calculation needing a temporary vector
			- Base.work
				- an object containing copies of an object's essential vectors eg start, handle, delta
				- can be reset to their originals' values using Base.resetWork() function
			- scrawl.worklink
				- library object holding dedicated work vectors for path-based calculations
			- scrawl.workcols
				- library object holding dedicated work vectors for collision-based calculations
		- going through entire codebase to replace Vector.getXYZ() calls 
			- instead, using new work vectors, setting them to the required values and then conducting operations on them
			- key issue: what gets returned from various functions was often a reference to a vector
				- which could subsequently change in an unrelated operation
		- got most demos working again
			- outstanding issues:
				- demo072-075 - group collisions
				- demo060 and 079 - bounceOffField collisions - needs major reconsideration!
				- demo078, 083, 090 - not working
				- still to do:
					- physics module
					- stacks module
					- check all sprites modules for missed Vector.get and outstanding collisions stuff
					- demo085 video has gone missing (again)
		- outcome so far - quite good; much less sawtoothing, lower overall memory usage
		
140411
	- investigations into speeding up filters
		- looked at typed arrays
			- did some experiments
			- could see a hint of some speedups, particularly when filtering larger images
			- but no speedup detected for many filters
			- a lot of work for not much gain
		- simplified a lot of the filters eg through pre-lookups of values
		
140410
	- simplified ScrawlImage.makeImage()
		- no longer converts imported images to base64URLs
		- attendant changes to functions that make use of makeImage()
	- new function: Sprite.convertToPicture()
		- does the same as Group.convertToSprite(), but for individual sprites
		- tested all demos in Firefox - all display fine
	- simplified convertToPicture and convertTo Sprite using helper functions
		- scrawl.prepareConvert(), scrawl.doConvert()
	- presentation stuff - recoded all demos to display code correctly
	
140407-09
	- rewriting filters system
		- so that it can be used by picture sprites
		- refactored filters module code
		- NEW library object - f
			- DocumentFragment
			- something to hang generated image elements from
			- also someplace to put the default canvas
		- reworked ScrawlImage to make use of f
			- took out all the ScrawlImage filter stub functions
				- replaced by a single ScrawlImage.finter() function
				- rewrote demo401-413
		- new filter - glassTile
		- added new Picture.functions attribute
			- an object that takes filter names as attributes, and objects as their arguments
			- significant rewrite of Picture.getImage() function
				- this is where dynamic filtered images are produced for display
				- also added a checksum facility so dynamic images are only recompiled when something changes
			- allows a picture sprite to update its display 'on-the-hoof'
			- new demos 101, 102 to test added functionality
	- new Group.convertToSprite() function
		- converts a group of sprites to a single Picture sprite
		- tested with new demo103 - works
	- CONCERNS: 
		- on occasion, pictures are not displaying immediately, but show up on page reload
			- possible caching issue?
			- possibly browsers are handling some aspects of image element generation asynchronously??
		- updating filter attributes needs to be done directly 
			- not efficient; not the same way other attributes get updated
			- not tweenable??
		- matrix-based filters still very slow compared to others - especially blur
	- testing
		- Firefox and Safari are considerably slower than other browsers when it comes to filters
		- Opera continues to hate cross-origin images
	- TODO:  investigate memory leaks, particularly in IE11
		
140406
	- fixed codepen demos
	- fixed jsFiddle demos
	- fixed blog code
	
140402-05
	- testing new code in all browsers
		- fixing bugs as we go along
	- updating all documentation
		- to take into account the new modularity
	- updating the tutorial
	- upload VERSION 3.0.0 to sourceforge, github
	- update website
	
------------------------------------------------------------------------------------
140401
	- modularization exercise completed
		- all modules recoded and tested via demos
			- minified versions of modules produced and tested
				- core minifies to 57kb - very competitive compared to other libraries
				- modularization by other libraries is sparse - gives Scrawl an edge.
		- all demos recoded
		- index and supporters page recoded
		- testing:
			- firefox - all demo tests passed; index/supporters page working
			- opera - all demo tests passed; index/supporters page working
			- IE11 - all demo tests passed; index/supporters page working
			- chrome - all demo tests passed; index/supporters page working
				- except for video test, grayscale test (for cors support)
			- safari - all demo tests passed; index/supporters page working
				- except for video test, grayscale test (for cors support), file loading test
				- index page magnifier canvas was failing for out of bounds drawImage copying
					- temporarily solved by surrounding Picture drawImage statements in try-catch
	- TODO
		- redo all the documentation markup and regenerate docs
		- update website pages with v3 release info
		- prepare v3 for release
				
140326-31
	- very unhappy with the current modularization paradigm
		- decided to redo the whole thing
			- using proper modular pattern
			- a single core file - puts nothing on the screen
			- all other modules amend or add to the core
				- key design feature: modules must be able to load asynchronously - no dependencies beyond core!
			- took the opportunity to rename stuff:
				- breaks the API; means next version will be 3.00
					- Scrawl -> Base
					- SubScrawl -> Position
					- Scrawl3d -> PageElements
					- Shape -> Path
					- Outline -> Shape
			- rationalized existing codebase wherever possible
				- eg sprite/cell position calculations now part of Position, not repeated in different objects
				- using core hook functions wherever possible to minimize code repetition across modules
			- new modules:
				- scrawlCore
					- utility functions
					- new module loader function
						- init function NOT run automatically anymore
						- run scrawl.init() as part of the scrawl.loadModules() callback function
					- Pad and Cell functionality
						- including mouse position detection
					- Group and Sprite core functionality
					- Gradient and RadialGradient
				- scrawlBlock (alias: block)
				- scrawlWheel (alias: wheel)
				- scrawlPhrase (alias: phrase)
				- scrawlPath (alias: path)
					- (was Shape)
					- including sprite-to-path functionality
				- scrawlShape (alias: shape)
					- (was Outline)
				- scrawlPathFactories (alias: factories)
					- eg scrawl.makeEllipse, .makeRegularShape, etc
				- scrawlImages (alias: images)
					- ScrawlImage objects
					- Picture sprites
					- AnimSheet objects
					- Pattern designs
				- scrawlFilters (alias: filters)
					- separated out - functions now part of the scrawl library, not Picture sprites
						- retained linking functions in Picture
				- scrawlAnimation (alias: animation)
					- animation functionality
				- scrawlCollisions (alias: collisions)
					- separated out (does not include sprite-to-mouse stuff, which remains in core)
				- scrawlColor (alias: color)
				- scrawlPhysics (alias: physics)
				- scrawlStacks (alias: stacks)
				- scrawlSaveLoad (alias: saveload)
		- recoding demos:
			- demo001-100 (basic) - working in firefox
			- demo301-305 (physics) - working
			- demo401-413 (filters) - working
			- demo501-504 (load-save) - working
				
140325
	- FIXED:
		- Pattern cloning bug, where pattern was attempting to clone from a pre-loaded image (demo040)
		- Wheel collision bug - was no longer recognising collision test radius
	- experiments in modularization
		- recoded demos to take into account new choices of core functionality and asynchronous loading stuff
			- demo041-101 
			- demo201-209 
			- demo301-305 
				- all fine in firefox
		
140324
	- experiments in modularization
		- tried to separate out stack/element stuff - wasn't working
			- because it meant adapting core functions rather than adding to them
		- decided to go with three core files, any one of which (and only one of which) will be loaded first
			- after which, the other modules can be added to the core, in any order
			- core modules are:
				- scrawl-core-static.js
					- simplest: Pad, Cell, Group, Shape, gradients, pivots, paths
				- scrawl-core-basic.js
					- all static stuff, plus: animation, mouse detection, collisions
				- scrawl-core-enhanced.js
					- all basic stuff, plus: stacks, elements
		- investigated options for asynchronously loading scrawl modules
			- finally went with LazyLoader.js
				- very simple
				- can delay loading modules until after core completes loading
		- recoded demo001-040 to take into account new choices of core functionality and asynchronous loading stuff
			- all fine except for demo040
			
140323
	-experiments in modularization
		- experimenting on scrawl-core.js
			- aim is to separate 'module' code out to their own separate files
		- worked out a way to take code blocks out of the main function
			- new functions: .scrawl.getProto(), scrawl.getConstructor()
				- used with module code to reintegrate it back into the Scrawl object and retain functionality
		- decisions:
			- modularise as much as possible away from core
			- things that core ought to retain:
				- Vectors - everything uses them
				- pads, cells, etc 
					- cuz handling canvases IS the core function
					- may be scope to modularize some of the cell add-ons eg zoom, splice
				- animation - cuz it's small and very useful
				- collision detection - spread through too many other (modularized) areas
				- Sprite and Group
				- Shape sprites - cuz the path stuff is too deeply integrated
					- also keep in Link and Point objects
					- doesn't stop me modularizing the convenience functions
				- Gradients and RadialGradients
					- but not Patterns - they're too dependent on the image stuff
				- 3d manipulation stuff?
					- could be modularized, but Pads build off Scrawl3d 
						- needs some thinking about how best to do it
		- modularized code:
			- scrawl-core.js (always required)
			- scrawl-Block.js
			- scrawl-Wheel.js
			- scrawl-Phrase.js
			- scrawl-Color.js
			- scrawl-Tween.js
			- scrawl-Outline.js
			- scrawl-physics.js
			- scrawl-shapeFactories.js
			- scrawl-imagePack.js
			- scrawl-loadSave.js
		- testing:
			- producing 'c' versions of all demos using scrawl-core.js and whatever additional scripts are needed to make them work
			- completed ...
				- demo001c - demo025c
				- demo097c - demo101c
				- demo301c - demo305c
				- demo501c - demo504c
			
140322
	- continuing with tween functionality
		- rewrote Tween object and functions
		- demo100 - tweening color and gradient objects
			- fixed bug in Color.checkValues()
			- fixed bug in Scrawl.get()
				- will need to check all demos andf fix where necessary
		- added some easing models
			- each attribute being tweened can be assigned to its own easing model
				
140321
	- tweens
		- road testing ideas for implementing tweens
			- demo097, 098 - basic functionality
			- demo099 - clone and kill tweens
			
140320
	- potential Facebook app thingy now a reality
		- https://apps.facebook.com/662194193842457/
		- tweaking site in response to user feedback
		- testing site for changes
			- all works in Firefox; not tested in other browsers
				- will be problems cuz it uses the File api
				- fairly certain it won't run well (or at all) on mobile devices
					- something to look at in the near future ...
		- user feedback seems generally positive
	- fixed some minor bugs in scrawl.js arising from the Facebook app experiments
	- started working on tweens
		- new object: Tween
			- based squarely on the Animation Object
				- same functionality: run, halt, kill
				- Tween objects saved in same space as animation objects
		- TODO:
			- develop a couple of demos to test tweens for: sprites; cells; elements
			
140319
	- setup website to be used as a source for the potential Facebook app thingy
		- investigating image upload to facebook timelines
		- styling website to make it more user-friendly
		- opened app for beta testers to play with
		
140318
	- added CORS functionality to image handling (Picture, ScrawlImage)
		- rewrote functions and constructors to take advantage of CORS, when it is available on the browser
			- will not work unless users have configured their servers to send CORS headers
				- and/or included the crossorigin attribute in their DOM <img> element
		- rewrote demo401 as an example of using a crossorigin image
			- currently works in latest versions of: Firefox; IE11; Chrome
			- doesn't work in latest versions of: Opera; Safari(windows)
	- uploaded Version 2.02 to sourceforge, github
	- updated website
			
140317
	- coded new demo209 - Position DOM elements using pivot
		- because no demo was testing element positioning via sprite pivots
		- found some minor bugs in various Scrawl3d functions that were incorrectly positioning the elements
		- fixed a positioning bug for Shape marks - wasn't taking handle offsets into account in calculations
	- revisited the ScrawlImage constructor
		- not happy that every image loaded into library was also being copied
		- updated various sprite functions so that they could get the copied image, if present, or the original image as fallback
	- moving to version 2.01
		- added text to the tutorial to cover ScrawlImage filters
		- generated minified version, and new documentation
		- updated website pages with latest info
		- uploaded to Sourceforge and GitHub
		
140314-16
	- Coding up a potential Facebook app
		- App is a combination of demos 046 (cell zoom), 082 (wrapping text dynamically) and 068 (loading local image files)
			- users can load local files into the canvas, zoom and rotate them, and add text
			- results are (currently) saved to the doc where they can be right-clicked for local saving and reposting to Facebook
			- final aim is that when users click on the save button, the new picture will be posted to their timeline on Facebook
		- created separate subdomain for this work - http://isay.rikweb.org.uk
		- initial page design and functionality largely completed
		- can't take this project further at the moment
			- Facebook demands that all apps using its canvas iFrame be served from both a normal and a secure domain
			
140313
	- Picture/ScrawlImage filters
		- investigating various ways to make things a bit speedier
			- IE11 doesn't support Uint8ClampedArray - still returning CanvasPixelArray
			- cleaning up code to remove Math.floor checks 
				- ImageData.data (of all flavours) seems to convert to int, and check bounds 0-255, automatically
			- thinking about web workers
			
140312
	- Picture/ScrawlImage filters
		- added filter function
			- sharpen() - demo413
		- new helper function - mergeImages()
			- used by sharpen filter
			- should be useful for combining the effects of multiple filters into simgle image

140311
	- Picture/ScrawlImage filters
		- completed filter function
			-pixelate() - demo409
		- added filter function
			- matrix() - demo410
			- channels() - demo411
			- channelStep() - demo412
		- rewrote blur filter to make use of the new doMatrix() helper function
		- rewrote sepia filter to use the tint filter
		- amended all filters:
			- added in argument attribute .save
				- so filters no longer automatically save/display the results of their actions
			- added in argument attribute .use
				- an image data object
				- so filters can act on any image, not just their SpriteImage image
			- all filters now return the amended image data object, not 'this'
			- changes should allow filters to use other filters to achieve effects
		- all filter documentation completed and up-to-date
		
140310
	- Picture/ScrawlImage filters
		- completed filter function
			- tint() - demo407
		- added filter functions
			- blur() - demo408
		- working on filter function
			- pixelate() - demo409

140309
	- Picture/ScrawlImage filters
		- added scrawl.cv to hold a workhorse canvas that never gets displayed
			- created on Scrawl.js initiation
			- canvas's context engine stored in scrawl.cvx
		- rewrote ScrawlImage constructor
			- now stores a URLencoded copy of the source image in scrawl.img
			- source <img> element reference stored in scrawl.object
		- new/rewritten ScrawlImage functions: .makeImage(); .getImageDataUrl(); .getImageData(); .clone()
			- all documented
		- removed ScrawlImage attributes: .copyX; .copyY; .copyWidth; .copyHeight
			- meaningless
			- rewrote Picture functions that were using them, when they should have been using 0, 0, ScrawlImage.width, ScrawlImage.height
		- added some filter functions
			- grayscale() - demo401
			- invert() - demo402
			- brightness() - demo403
			- saturation() - demo404
			- threshold() - demo405
			- sepia() - demo406
			- tint() - no demo coded yet for this one
				- all demos tested in FF and IE11 - all work
					- Firefox seems very slow to update images
					- IE11 is quite nifty - images change as range input thingy is dragged
				- all functions documented
		 TODO:
			- have no idea what contrast is, or how to code up a filter for it.
			- tint filter is pretty complex; also need to code up a simpleTint filter?
			- need to work out how best to do matrix-based filters such as blur
				- once I get blur working, I can add more complex filters
			- possibilities of advanced filters involving two image inputs?
			- need to work out a way to access ScrawlImage filters via Picture sprites
			- thinking about a Sprite.convertToPictureSprite() function
			
140308
	- decided a good approach to filters may be to apply them in the ScrawlImage object
		- means rewriting the object
	- playing with filters
		- got a grayscale(100%) filter working
		
140307
	- thinking about filters ...
	
140306
	- minor fixes to index.html, tutorial.html, supporters.html after validating code against w3c validator
	
140305
	- recoded demo034 for better asynchronous loading of image file
	
140302
	- scrawl-min.js testing
		- all demos and index page pass testing in firefox
	- index page - final testing
		- testing against scrawl-min.js
		- testing for all modes (canvas and/or css3 3d supported)
		- testing for dynamic browser resize
		- testing in all browsers
			- in all browsers, occasionally, after resizing the browser the indicator event listeners fail to fire
			- apart from that ...
				- firefox - all good
				- safari(windows) - all good, apart from text size at smallest browser widths
				- opera - all good
				- IE11 - all good
				- chrome 
					- still the occasional problem of canvas6 displaying behind canvas3, if browser rescaled while canvas6 turns away
					- text size at smallest browser widths too large
			- I can live with these bugs ... for now.
	- redated all web pages
		- official release date for v2.00 is now 2 March 2014
	- uploaded v2.00 to sourceforge, github
	- uploaded new website to scrawl.rikweb.org.uk
	- updated blog
		- removed most posts rather than recoding
			
------------------------------------------------------------------------------------
140301
	- index page recoding
		- initial code completed
		- testing in all browsers
			- firefox
				- works entirely as intended
			- safari (windows)
				- slow, but mostly works as intended
					- no marching ants, and the wheel doesn't appear to be turning
			- opera
				- canvas6 does not seem to respect backfaceVisibility after it has been rotated 
					- bug only shows up after the first cycle completes
					- not a backfaceVisibility issue
						- applied backfaceVisibility to all canvas6 canvases - still happens
					- setting canvas6 zIndex to -1 does allow other canvases to display above it
					- possible quick fix - add background color to all other canvases, to cover canvas6?
					- resizing gets rid of the problem
						- even without the help of backfaceVisibility and zIndex stuff
						- could thus reset height before/after turn?
					- FIXED
						- setting every canvas backgroundColor
							- including scrawl code tweaks so backgroundColor, globalAlpha, globalCompositionOperation can be passed via Pad.set()
						- canvas6 zIndex set to -1
						- special test at end of stack rotation to clear/show canvas6 stack canvases
				- everything else seems fine
			- chrome
				- oh, lordy ...
				- carousel is over-turning?
					- currentCanvas works as expected - turns 90deg and disappears
					- nextCanvas
						- seems to be starting at 90deg
						- appears immediately
						- turns 180deg in full view and then corrects itself at end of turn
					- canvas6 
						- showing its backend when turning away (end)
						- clearly demonstrates that animation only starts after 90deg of the turn towards (start)
					- FIXED 
						- opera fixes, plus setting nextPane yaw values to 179.9999 - chrome apparently hates yaw: 180.
				- apart from turning issues, and canvas6 backface, everything works fine
					- not respecting winding for collision detection on shapes/outlines - expected behaviour
			- internet explorer 11
				- everything works as per spec
				- even continues to display canvases when resizing browser
	- testing scrawl.js for all demos, and website, in all browsers
		- firefox 
			- not as quick as some other browsers
			- a few quirks re CSS3d elements - coded out in demos and index page
			- all tests passed
		- safari (windows)
			- text not sufficiently scaled at smallest browser sizes
			- demo034, etc - known issue re globalCompositeOperation
			- demo050, etc - known issues re lineDash, lineDashOffset, winding
			- demo068, etc - known issues re support of files API
			- demo085 - known issue re video
			- demo094 - known issue re slow SVG on canvas
			- all other tests passed
		- opera
			- demo050, etc - known issue re winding and collision detection
			- demo065 - known issue re not detecting collisions on line sprites
			- demo094 - known issue re slow SVG on canvas
			- demo205, etc - known issue re flickering canvas elements
			- all other tests passed
		- IE11
			- star on supporters page is strangely slow
			- demo085 - known issue re video
			- demo094 - known issue re slow SVG on canvas
			- all other tests passed
		- chrome
			- sprite to mouse stuff can be a bit sluggish
			- animated (eg rotating) text can be a bit shaky compared to other browsers
			- demo050, etc - known issue re winding and collision detection
			- demo065 - known issue re not detecting collisions on line sprites
			- demo085 - known issue re video
			- demo094 - known issue re very slow SVG on canvas
			- demo204, etc - chrome objects to setting element pitch/yaw to 180 - use 179.9999 instead
			- demo205, etc - known issue re flickering canvas elements
			- all other tests passed
	- generated docs
	- generated scrawl-min.js
	- TODO:
		- test scrawl-min.js for all demos, and website, in all browsers
					
140228
	- index page recoding - running cat demo
		- trying to fix perspective issues
	
140223-27
	- index page recoding
		- fixed dynamic stack/canvas resizing issues
		- fixed mouse detection on resized pads
			- where Pad.display and Pad.base canvases have different sizes
		- fixed poor coding in Picture.checkHit function
		- fixed scrawl.addstackToPage function
		- recoding canvas panes from demos
			- canvas0 - hello world (067)
			- canvas1 - cloning (050)
			- canvas2 - collision detection (075)
			- canvas3 - kaliedoscope clock (090)
			- canvas4 - magnifier over image (037)
			- canvas5 - 3d images carousel (062)
		- recoded page to be more dynamic and responsive
			- all the visible elements are now part of a stack
			- canvas animations only run when canvas elements are visible
				- makes everything a lot quicker!
		- changed the canvas carousel from flat to flipped card format
		- graceful failure in browsers that don't support canvas element and/or css3 transforms
	- TODO:
		- need to recode 'comment' attribute so comments get placed inside the canvas element tags in the DOM - DONE
			- apparently, it's the friendliest way to do user accessibility
		- canvas6 - running cat demo (206)
		- add hammer.js (for touch) and mousetrap.js (for keyboard)
			- and add associated event handlers
				- nothing snazzy this time around, just need something so phone/keyboard users can enjoy the goodness
		- test everything in all browsers
		- regenerate documentation and -min file
		- test everything in all browsers against scrawl-min
		- proofread everything (again)
		- recode everything in the blog
		- finalize pages with v2.00 release data
		- release day
			- upload new website
			- update all codepen examples to use v2.00
			- release v2.00 on StackOverflow, GitHub
		- promote v2.00 on Twitter and the like
			- pre-publicity for forthcoming funding drive
				- need to talk to people about feasability of business model
					- eg pulling together the business case
			- do some videos for YouTube/Twitter
				- to get in some practice on making better videos, talking to camera, adding audio to videos, etc

140222
	- safari issues
		- demo034
			- difficult to fix - safari does GCO source-in different to other browsers
			- just put a note into the code to acknowledge this fact
		- demo090
			- safari (probably correctly) caught the fact that picture was copying areas outside its source cell
	- started recoding the index page
	
140221
	- coded up a 'supporters' page for the website
	- added the ability for elements to be placed relative to their containing stacks via percentages and string literals
		- very lightly tested in all browsers - seems to work ok
		- might be worth doing something similar with sprites/cells?
			- not yet - something for future consideration
	- added 'border', 'margin' and 'padding' to the list of CSS style attributes which can be amended via Scrawl
		- because positioning is intimately tied to the CSS/DOM box model
		- fairly certain I don't want to make all style attributes amendable via Scrawl
			- JavaScript does it fine without Scrawl's help
			- jQuery and similar libraries do a superb job of manipulating the DOM - no need to replicate their work
	- finally fixed the 3d running cat (demo206) so it displays in Safari
	- demo testing
		- firefox
			- all demos work fine
			- general
				- firefox is default development browser, so no surprises
				- compared to other browsers, demo094 is very fast
				- reminder: firefox does not calculate element offsets if they are part of a CSS table
				- animations can be a little flickery/distorted at times
		- safari
			- demo034 - drawing black line beyond edges of Picture sprite
			- demo050 - safari doesn't yet support:
				- dashed lines
				- even-odd fills
			- demo068 - importing image files via drag-drop
				- could be a handle thing??
			- demo085 - no video
			- demo090 - nothing shows up - picture sprite is 'out of bounds' (line 12380)
			- general 
				- complex animations run at about half the speed of firefox
				- bunny tests significantly slower
		- opera
			- demo063 - collision zone not recognising even-odd fill
				- not much I can do about this
				- opera (and chrome) set the fill winding rule during the ctx.fill() call
				- firefox and IE have dedicated settings (mozFillRule, msFillRule) which can accept 'nonzero' and 'evenodd' strings
				- which means opera/chrome only set the fill rule when they actually fill something
				- but scrawl collision detection relies on the path being defined, but not filled - instead it chucks in an .isPointInPath test
				- thus, evenodd shows up when the sprite is stamped on the canvas, but not during collision detection
			- demo205, 208 - flickering canvases
			- general
				- very fast! Space invaders is almost unplayable
		- IE11
			- demo085 - no video
			- general
				- best overall performance (except for video)
		- chrome
			- demo063 - collision zone not recognising even-odd fill
				- see opera
			- demo205, 208 - flickering canvases
			- demo085 - video
			- general
				- fast and smooth
	- TODO
		- index page
		
140220
	- animation
		- all animated demos now updated
	- tutorial
		- tutorials corrected for new animation functionality
			- all walk-throughs amended
			- animation cycle section rewritten
	- reinstated Scrawl3d title and comment functionality for constructor and set()
	
140219
	- animation
		- updated all animated demos up to demo087
		- will need to amend all three walkthroughs in the tutorial
		
140218
	- internalizing JavaScript object prototype changes
		- because changing JavaScript object prototypes is mad and dangerous
			- Array.prototype.contains -> scrawl.contains
			- Array.prototype.pushUnique -> scrawl.pushUnique
			- Array.prototype.deleteItem -> scrawl.deleteItem
			- Number.prototype.isBetween -> scrawl.isBetween
		- all changes documented
		- all uses of these utility functions updated
			- for scrawl.js
			- for all demos
	- animation
		- finally bit the bullet and internalized the animation loop function
			- scrawl.animationLoop()
				- the animation loop itself
				- still relies on the window.requestAnimFrame shim
				- automatically started when scrawl initializes
			- scrawl.doAnimation
				- animation loop flag
				- set to false to stop the animation loop
					- particularly useful if all canvases on a page are static
				- set to true, then call scrawl.animationLoop(), to restart animations
			- scrawl.animate
				- an array of ANIMATIONNAME strings, representing Animation objects that need to be called each cycle
			- scrawl.animation, scrawl.animationnames
				- object and array to support the new Animation object
			- Animation()
				- the animation object itself
				- based on the Force object
				- prototypes from Scrawl
				- .name attribute - to give each object a known name
				- .fn attribute - the anonymous animation function
				- .delay flag - to prevent the animation being added to scrawl.animate array on creation
			- Animation.run()
				- adds ANIMATIONNAME to scrawl.animate array
			- Animation.halt()
				- removes ANIMATIONNAME from scrawl.animate array
			- Animation.kill()
				- deletes animation object
		- system builds on kludge developed for the blog
			- which means blog code examples will be brought into line with non-blog code
			- also, possible to have multiple animation routines on the same canvas, individually controlled
		- amended demo004 to test new functionality - works!!
	- TODO
		- amend all animated demos to use new animation functionality - DONE
		- update tutorial page to reflect all new functionalities - DONE
		- recode index page
		- tweening for sprite animations
			- because it's what people will expect
				- cuz everyone else seems to do it (including CSS, damn them)
			- probably do this after release of V2.00
				- cuz potential investors might prefer a 'work in progress' rather than a 'finished product'?
			
140217
	- stack scaling - now seems to work
		- demo702 adapted to scale dynamically with browser window height
		- demo208 - new spinning cube demo
			- scaling stack and stack contents
			- pivot stack/element/pad to other stack/element/pad
			- not yet perfect - need to look at element handle attribute, as causing unexpected results on browser resize
	- testing
		- firefox
			- demo207 - element height needs looking at
			- all other demos works fine
			
140216
	- demo701 - space invaders - fixed
	- demo702 - frogger - fixed
	- working on stack scaling ...
	
140215
	- tutorial page rewrite:
		- physics engine - done
		- the tutorial page now reflects the reality of the source file!
		- does it need a quick section on event handlers?
			- all the other libraries make a big fuss about their event handlers
			- makes sense to point out that Scrawl can be used very easily by other event handler libraries ...
	- TODO
		- have I lost stack scaling functionality?
			- probably, yes
			- need to add it back in to the code base
			- makes sense to add a couple of paras, or a section, to the tutorial explaining stack scaling functionality
		- index page
			- looking at a complete rewrite
				- make sure it includes the new stack snazziness eg 3d rotations when browser moves between landscape and portrait modes
				- use the cube demo rather than the running cat demo to show off stack functionality
					- because the cube now works (just) in all browsers, while the cat demo fails in Safari
		- other pages
			- need to get the documentation looking more like the other pages
			- need to use the logo consistently
			- will need to add in a sponsors page ...
		- blog
			- recode all existing posts to make use of v2.00?
			- alternatively, delete most of the posts and start fresh?
		- if all goes well, should be ready to release Scrawl v2.00 on or before 23 Feb
			- which is around the first anniversary of its life
	
140214
	- Operation DocumentIt!
		- all documentation completed
		- documentation web pages generated and checked
	- minified version generated
		- all working demos checked against scrawl-min.js (firefox) - no problems encountered
	- tutorial page rewrite:
		- Scrawl Stacks
		- Vectors and quaternions
		- Animation efficiency
	- TODO:
		- tutorial page on the physics engine
	
140213
	- tested all demos in firefox
		- fixed a number of minor bugs introduced by previous efficiency drives
	- quickly checked problematic demos in other browsers
		- still need to do a full demo check on all browsers before release of v2
	- proofreading text already written on tutorial page
	- Operation DocumentIt!
		- completed: Vector (new functions), Quaternion

140212
	- rewrite of Scrawl3d: completed (for now)
		- tested demos in Firefox, Opera, Chrome, IE11, Safari (windows) - issues:
			- 205 - some flickering on the cube in Opera, chrome
			- 206 - cat (still) doesn't appear in Safari
				- definitely a z order thingy
				- setting translateZ: 200 on the cat canvas brings cat into view
				- suspicions that Safari is working correctly, treating all canvases as part of the same stack perspective
			- all other demos work as expected
	- NEED TO DO:
		- inline documentation for Quaternion and Scrawl3d objects
		- write up tutorial pages:
			- group collisions
			- vectors
			- quaternions
			- save/load
				- need to check out code for this - should it include stacks/elements?
			- physics engine
			- animation efficiency
			- stacks
		- generate documentation and test new scrawl-min.js version in all browsers
		- proofread everything!
		- redo index page
			- make full use of new functionality
				- eg for canvas carousel
			- can use spinning cube demo!
		- prepare for soft launch
		- start thinking about prepromotion before KickStarter work
			
140201-11
	- rewrite of Scrawl3d
		- bringing CSS3 3d styling into line with Scrawl norms
			- added Quaternion object
				- all rotations use quaternion calculations
			- start attribute (a Vector) represents stack element rotation/reflection point
				- measured in pixels from stack top left hand corner
				- includes Vector.z
			- delta attribute (a Vector) for moving start attribute
			- handle attribute (a Vector) used for calculating element top and left style attributes
				- uses all Scrawl handle formats
				- represents the element transform-origin style
			- rotation attribute (a Quaternion) for holding rotation data
				- set using pitch, yaw, roll pseudo-attributes
				- represents the element rotateX, rotateY, rotateZ arguments for the transform style attribute
			- deltaRotation attribute (a Quaternion) for element rotation animations
				- set using deltaPitch, deltaYaw, deltaRoll pseudo-attributes
			- translate attribute (a Vector) for holding 3d offsets from the element rotation/reflection point
				- set using translateX, translateY, translateZ pseudo-attributes
				- represents the element translateX, translateY, translateZ arguments for the transform style attribute
			- position, backgroundVisibility attributes stored on the element, not in the scrawl element objects
				- get and set functions take this into account
		- positioning elements can be done:
			- directly by setting the start attribute
			- by setting the 'pivot' attribute to a sprite or point object's name
			- by setting the 'path' attribute to a Shape sprite's name (not yet tested)
		- new functions for rendering stacks: scrawl.renderElements(); Scrawl3d.renderElement()
			- analagous, but not as detailed, as scrawl.render() for canvases
		- demo201 - creating stacks dynamically - works
		- demo202 - picking up stacks and elements from the DOM
			- also tests the pivot='mouse' functionality testing
			- works
		- demo203 - adding elements to a stack
			- includes basic rotation animation testing
			- works
		- demo204 - flipcards - testing for backfaceVisibility - works
		- demo205 - spinning cube
			- KNOWN BUG: setting deltaYaw and/or deltaPitch and/or deltaRoll on an element and animating it leads to element drift
			- deliberately avoiding the perspective inheritance stuff that IE very clearly hates!
				- managed to get the cube spinning without the help of a nested div element!!
			- works
		- demo206 - running cat
			- testing for different handle values
			- works
			
140131
	- load and save objects
		- initial work completed
		- uses .toString(), scrawl.load(), scrawl.save()
		- much better than the old system
		- new demos 501-504
	- captured images of canvases for all demos
		- for the tutorial pages
	- tutorial page revision continues ...
		- Animating sprites
		- Sprite pivots
		- Sprite to mouse
		- Drag and drop
		- Path animation
		- Cell animation
		- Groups
		- Sprite collision zones
		- At-coordinate collisions
		- Field collisions
		- Group collisions
		- Saving and loading Scrawl objects
		- demo list
		- new pages set up for:
			- Scrawl physics engine
			- Animation efficiency
	- TODO
		- Scrawl stacks, scrawl3d 
			- the whole mess needs reviewing and rationalising
		- last few pages of tutorial
		- index page needs a complete recode
		- PROOFREAD EVERYTHING
	
140130
	- saving scrawl objects
	- loading scrawl objects
	
140129 
	- Tutotial page revision 
		- removing all code blocks from the pages as I revise them
			- code now shown on each demo page
			- can get rid of the demos.js file
		- removing the bulk of the attributes and functions lists from pages
			- linking instead to relevant pages in the new documentation
		- pages rewritten:
			- HTML5 page
			- Using Scrawl
			- Pads and Cells
			- Scrawl sprites
			- Sprite positioning (new)
			- Block
			- Wheel
			- Phrase
			- Picture
			- Outline
			- Shape
			- Colors
			- Gradients
			- Patterns
			- Display cycle
			- Clear
			- Stamp
			- Compile
			- Show
			- Render
			- Animation cycle
		- pages skipped for now:
			- Scrawl stacks
		- pages removed:
			- Creating complex Shape sprites
		
140128
	- Operation DocumentIt!
		- COMPLETED for all objects, functions and attributes
			- only Scrawl3d functions to do
				- but that object's about to suffer a major overhaul ...
		- current source file is 15,000 lines long
			- about 50% code, 50% documentation
		- still need to proofread everything before going live with the new documentation
		- whole job took a week!
			- but will never have to do the entire thing again (he says) ...
	- renumbering the demos - rationalizations:
		- 001-099 - canvas demos
		- 101-199 - (additional canvas demos)
		- 201-299 - stack demos
		- 301-399 - physics engine demos
		- 401-499 - filters demos
		- 501-599 - (load/save demos, when written)
		- 601-699 - (not yet assigned)
		- 701-799 - game demos
		- 801-899 - isometric tiling game demos
		- 901-999 - (not yet assigned)
	- started rewriting the tutorial page ...
	
140127
	- Operation DocumentIt! 
		- done: 
			- everything down to the end of Shape
			- all constructors (bar physics)
			- all object attributes (bar physics)
		- to do:
			Point functions
			Link functions
			Design functions
			Gradient functions
			RadialGradient functions
			Pattern functions
			Color functions
			Particle object
			Spring object
			Force object
		
140126
	- rationalised the generation of sprite.collisionVectors
		- Shape and Wheel now follow the patterns for sprite, with only minor amendments
		- reintroduced the idea of having collision point vector values
		- collision vector generation now happens at the time they are first needed (in sprite.getCollisionVectors)
			- got rid of Shape.getCollisionVectors
		- demos 072, 073, 074 all seem to be working fine
	- fixed bug in Picture.checkHit()
		- was only checking against the top left corner of the sprite sheet area, not the current animation frame area
	- added Cell.updateStart(), .revertStart()
		- to take into account the need to update the source Vector as well as the start Vector and pathPlace value
	- improved performance of Cell.spliceCell() function
	- fixed demo052 (parallax cells) to work with new Cell features
	- demo082 (text widths) - problem with event listeners not firing
	- continuing with Operation DocumentIt! Completed: 
		- Sprite parameters
		- Sprite functions
		- Phrase parameters
		- Text parameters
		
140125
	- continuing with Operation DocumentIt!
		- done:
			- all constructors (except for physics objects
			- all attributes and functions down to the Sprite attributes
		- still to do: everything below Sprite attributes, except for constructors
			- (mainly the easier bits)
			
140124
	- Major Change
		- revised Cell object to bring it into line with current thinking
			- new attributes Cell.source, .sourceDelta
				- vectors, just like start and delta, to mark the starting point for cell copy operations
				- replace .sourceX, .sourceY
			- old attributes .targetX, .targetY now save their values in Cell.start vector
			- .delta now has meaning - added a Cell.updateStart() overwrite to take into account Cell's special needs
			- .pivot now has meaning for Cell objects
				- tested in demo037 (magnifier) using 'mouse' as the pivot - works!
			- handles now work - they act on the start/target point where cell gets copied to a destination canvas
			- added some sprite functionality to Cell.copyCellToSelf()
				- cell copying now works like sprite stamping - shift the matrix to the drawing point and then draw using handle offset
				- also allows me to (easily) introduce the idea of .flipUpend, .flipReverse and (a welcome return for) .roll
					- tested in demo051 - works!
			- not yet tested to see if .lockTo still works - will wait until redo isomorphic game series
			- not yet tested if .lockX, .lockY work - should be no reason why not ...
			- not yet tested for paths ...
	- continuing with Operation DocumentIt!
			
140123
	- persevering with Operation DocumentIt!
		- revised existing markup for consistent formatting
		- worked out how to add attributes to object 'classes'
			- still don't like the YUI phraseology - JavaScript does NOT have classes
		- more markup added to source file
		
140122
	- demo work
		- minor adjustments to demo404 to make it faster
		- started thinking about ripped net demo (406)
	- Operation DocumentIt!
		- completed:
			-SubScrawl
			
140121
	- demos 001-103 checked and corrected for event handler code
	- demos 401-405 cleaned
	- chrome browser
		- turns out to be a browser cache issue - disabled caching and running incognito solves most problems
		- demos 050, 063 - even-odd winding not working with collision detection in Shape/Outline sprites
		- demos 073, 090, 404 - flickering sprites - group/sprite sorting issue?
		- still refusing to load: 060, 074, 075
		- demo085 - video is playing, but not displaying
		- 094 (spinning svg tigers) slow - 12fps (vs 60fps on firefox)
		- 098 bunny speed test - 12,100 bunnies @ 10fps
		- general ... runs well - speedy, even - once caching issues are overcome
	- Operation DocumentIt!
		- started the job of adding inline documentation to the source code
			- using YUIDoc syntax
		- completed:
			- scrawl library
			- Scrawl
			- Vector
			
140120
	- new function - Sprite.bounceOnFieldCollision()
		- calculates bounce resulting from sprite collisions with cell fieldss
		- works for non-horizontal/vertical lines, and for curves
	- 079 and 060 updated with new functionality
	- 058 (animated cat) not recoded 
		- shows the functionality, which is enough
	- previous kludges removed from Particle object functions
		- physics engine is back to its more 'pure' state
	- testing in web browsers:
		- firefox 
			- all demos work as expected
			- 098 bunny speed test - 14,600 bunnies @ 10fps
		- chrome
			- 027 drag-drop issue - see IE11
			- 063 winding issues - not doing even-odd
			- 082 input ranges are not draggable
			- 085 no video
			- 094 (spinning svg tigers) verrrry slow (12fps vs 60fps on firefox)
			- 098 bunny speed test - 11,600 bunnies @ 10fps
			- 404 (rope) - flickering sprites
			- refusing to load: 004, 060, 062, 065, 074, 075
			- refusing to work
				- 045 (snake)
				- 048 (circle on mouse)
				- 049 (drag&drop images)
				- 081 (advent calendar)
				- 099 (blob speed test) - animation working; mouse not being picked up
				- 102 (bridge text) - click-drag not working
			- (removing performance.now() - for safari - didn't solve these problems)
			- (reinstalling latest version of Google Chrome - didn't solve these problems)
				- must be bad coding in some part of the scrawl library
					- demo004 specifically chokes on the Sprite path stuff ... though demos 006, 009 and even 012 work ...
			- general ... disappointing - why so many demo failures??
		- safari (windows)
			- choked on window.performance.now()
				- changed tests in all demos to remove performance.now()
			- Outline/Shape winding - even-odd not working (known browser issue)
			- line dashes - not working (known browser issue)
			- 027 drag-drop issue - see IE11
			- 029 3d cat - no cat displayed (old issue)
			- 068 (drag-drop files) - file reader interface doesn't seem to be implemented?
			- 085 (video) - doesn't load video - 'type error' in Picture.fill()
			- 090 (clock) - 'negative index error' in Picture.fill() ??? demo doesn't use Picture objects ...
			- 094 (spinning svg tigers) verrrry slow (8fps vs 60fps on firefox)
			- 098 bunny speed test - 3,500 bunnies @ 10fps
			- general ... browser is a lot slower than the others
		- opera
			- 027 drag-drop issue - see IE11
			- 063 winding issues - not doing even-odd (known issue with browser)
			- 073/4 (between-group collision detection) - flickering sprites - an ordering issue??
			- 094 (spinning svg tigers) verrrry slow (14fps vs 60fps on firefox)
			- 098 bunny speed test - 11,700 bunnies @ 10fps
			- 404 (rope) - flickering sprites
			- general ... better than chrome, but sharing some common issues
		- IE11
			- 027 - issue with drag-drop - occasionally sprites 'cling' to mouse after drop
				- probably an issue with demo coding - not including the bubble prevention stuff
				- 066 (drag sprites between canvases), with properly coded event handlers, doesn't have this problem
			- 085 no video
			- 087 (spinning cube) - IE still haven't got the perspective thingy right
			- 094 (spinning svg tigers) verrrry slow (16fps vs 60fps on firefox)
			- 096/97 (slow bunny tests) - too many bunnies makes IE browser controls choke
			- 098 bunny speed test - 11,400 bunnies @ 10fps
			- general ... everything (including physics demos) runs faster
				- top speed 66fps vs firefox 60fps
	- TODO
		- fix all demos using event listeners to cancel default event listener behaviour - DONE
		- sort Chrome issues - DONE
			- complete review of Scrawl.js code alongside faulty demo code - NOT NEEDED
		- clean up physics demo code - DONE
		- redo tutorial page
		- comment scrawl.js source code so that documentation can be automatically generated via node.js (fingers crossed)
		- recode index page - can it be made even more exciting
			- one specific issue to look at is resizing/zoom - current index page does not play well with user zoom requests
				- see if zoom can be tied into normal zoom keypresses?
		- fix games demos
		- look again at isometric map demos
		- V2.0 launch preparation
			- will need to recode all blog demos before launching 
			- also, all jsFiddle code will need updating for v2.00
				- and look to add more jsFiddles - people can find Scrawl.js via that route
		
140119
	- cleaning up demo code
		- djankey canvas performance test - 2 of the 3 demos removed
			- cuz the bunny demos already cover this ground
			- only keeping fastest performing test
		- all demos 001-102 recoded
			- 060, 079 need further work
				- taken physics code out of 079
					- new solution is servicable, but ugly
					- need to read up some more on collision detection involving slopes and curves
						- must be a better way
			- 046 recoded to test Cell.zoom() - works fine
	- bugfixes 
		- Phrase.backgroundColor was not displaying for default fonts
		- scrawl.makeRectangle() was inverting instructions - top->bottom, right->left, etc
		- Color.get('random') was returning undefined
		- Cell.zoom() - now works as intended
		
140118
	- cleaning up demo code
		- demo 093 removed - duplicate of 037
		- filter experiments (096, 098, 099) moved to demo201-203
		- isometric experiments (102-108) moved to demo301-307
		- physics engine experiments (demos121-128) moved to demo401-405 (121, 123, 125 dumped)
		- demos081-083 (frogger, space invaders) moved to demo701-703
		- other demos renumbered
		- all (renumbered) demos to 095 completed
	- TODO:
		- demo096-104 (bunny and bead demos, + a couple of others)
		- demo201-203 (filters)
		- demo401-405 (physics)
		- demo701-703 (games)
			- leave isometric stuff (301+) for now
		- test everything in all browsers, on varous machines
			- and fix the broken stuff
		- implement a (non-physics) solution for demos 060 and 079
			- really don't like the idea of dirtying the physics engine with non-physics collision detection stuff
		- desperate to do a net curtain physics demo
		- need to reimplement the load/save stuff (dumped during the Major Overhauls)
		- rewrite tutorial
		- redo the documentation
			- give serious thought to adding documentation to scrawl.js source file
				- looks more professional; makes it easier for other developers; will be easier to maintain!
			- will probably require changes/new pages on the website ...
		- redo the index page
		- recode all the blog demos in line with changes
		- get ready to release v2
		- start thinking about crowdsourcing stuff
			- aims
			- videos
			- presentations
			- promotion
			- with aim to do it in February!!
		
140117
	- attribute name changes
		- SubScrawl.pathPosition -> .pathPlace
		- SubScrawl.movePathPosition -> .deltaPathPlace
			- removes the verb from the attribute name
			- all affected demos (to 084) corrected for change
	- Wheel.collisionPoints can now be a number
		- because sometimes 8 collision points around the perimeter just ain't enough!
	- experimenting with using particles for cell collision detection
		- new Particle.engine option - 'none'
			- adds .velocity attribute to .position attribute
			- option 'euler' is now the default action for the Particle.stamp() function
			- demos 060 and 079 make use of this new functionality
		- could make a case for a more detailed Sprite.checkField() function?
			- Sprite.checkFieldPerpendicular() ??
				- would do further tests to determine where the perpendicular line between sprite and cell wall actually is
					- could address the unexpected bouncing in demos 060, 079 ... but only when sprite start is centred
				- not convinced - something for later, maybe
	- cleaning up demo code
		- regularised test code for all previously cleaned demos
		- removed almost all <style> code from demo pages
			- put most of it into css/demo.css file
		- demos 061-084 cleaned
			- except for 081, 082, 083 - need substantial review and recode (alongside 058)
			- 034, 066, 068 made blank
			
140116
	- creating stacks and canvases dynamically - changes
		- for both, .parentElement attribute can now be the DOM object id string
			- additional to passing the DOM object itself in the .parentElement attribute 
	- contemplating another (future) major recode - DOM object handling needs a comprehensive review
	- cleaning up demo code
		- correcting demos to take into account all changes to library code
		- cleaning demo code in line with good coding practice
			- eg declaring all variables up front, commenting all demos, etc
		- major change re Tutorials page
			- demo code now displayed on demo page
			- no need to include all code in Tutorials page
				- will save a huge amount of future maintenance work!
		- completed: demo001 - demo060
			- demo034 (clock in stack) to be abandoned - cuz demo090 covers clock code
			- demo 058 needs to be completely recoded
				- needs to act as a comprehensive test for sprite sheet animation
				- also, ugly
	
140115
	- Major overhauls - aftershock
		- renamed SubScrawl.moveStart to SubScrawl.delta
		- removed Subscrawl.moveHandle - see no point to it now
		- refactored SubScrawl constructor, .set, .setDelta, .clone
		- Sprite.moveStart(s) function renamed to .updateStart; .unmoveStart(s) to revertStart
			- to make things more obvious - 'move' did not actually move anything
		- cleaned up codebase
	- next project: cleaning up demo code
	
140106-14
	- Major Overhauls - COMPLETED
		- massive changes throughout the code
		- however ...
			- changes have paid off
			- code is a LOT more efficient
			- all demos run at top speed
			- many things have simplified as a result of the changes
	- tested all demos in Firefox
		- bugs hunted down and fixed
		- demo code changed wherever that was causing problems
			- means the v2 code is NOT backwards compatible with v1 code
				- but changes are worth it
	- TODO:
		- need to substantially fix tutorial and documentation
		
140103-05
	- Major Overhaul #2 merged into Major Overhaul #3
		- conversion of all start,handle,moveStart,moveHandle attributes to Vector objects
		- move away from get lookups for many attributes
			- wasn't really saving much time
		- move to using setTransform for stamping each sprite
			- allows for much simpler calculations re positioning sprites
			
140102
	- Major Overhaul #2
		- function recoding completed for:
			- Sprite object
			- Picture object
			- Phrase object
			- Text object
			- Block object
			- Wheel object
			- Outline object
			- Shape object
			
140101
	- Major Overhaul #2
		- function recoding completed for:
			- Pad object
			- Cell object
			- Context object
			- ScrawlImage objects
			- AnimSheet objects - constructor not substantially changed as all attributes explicitly set
			- Group objects 
				- constructor not substantially changed as all attributes explicitly set
				- collision routines rewritten to make them a bit more efficient
		- much of the Sprite object also tweaked for the changes
		
131231
	- Major Overhaul #1 completed
		- demos085, 081-083, 103-108, 095 have outstanding issues, mostly in the demo code
	- preparation for Major Overhaul #2 started
		- going through all functions
			- putting all variables at top of each function
			- plan to strictly enforce get()
				- will lengthen code, but make the MO#2 changes a lot simpler to achieve
		- recoded Scrawl.get(), .set()
		- added .prototype.d objects to all Scrawl objects
		- added scrawl.keys object, and code at end of library to generate key arrays on startup
			- used by .set() to determine if attribute is permitted in object
		- new Scrawl.addAttributes() function
			- for (eventual) use by all constructors
			- will remove the explicit setting of every attribute
				- only those attributes which are not default values need to be set
					- this is (hopefully) the big memory saver, as atm Scrawl objects tend to be huge
		- function recoding completed for:
			- scrawl library
			- Scrawl object 
			- SubScrawl object
		- so far demo061 (sprites on rotating oval path) and demo050 (cloning sprites) continue to work ...
		
131228-30
	- Major Overhaul #1
		- further advances in using vectors wherever possible
			- new functions in SubScrawl to return data in Vector format
		- sorted out/simplified collisions
			- using Vector calculations wherever possible
			- finally cracked Picture collision and Picture getcolor stuff
		- simplified Sprite 'current' parameters
		- debugged Sprite stamping
		- massive overhaul of Group object
			- removed all references to 'override'
				- Groups no longer influence their sprites' positioning
			- changed Group.cells array to Group.cell string
				- Groups now only answer to once default cell
				- can still belong to more than one cell, by adding group name to Cell.groups array
			- got rid of Group.groups array
				- Groups are no longer nestable
			- added new functions to allow users to influence sprites via their groups
		- checked all demos in Firefox and Opera
			- changes have speeded up the demos - between 1.5-2 times quicker up to the screen refresh limit?
			- additional bugs caught by Opera fixed
		- over the past week:
			- library reduced by 1400 lines
			- 57kb of code removed from library
		- ISSUES REMAINING before embarking on Major Overhaul #2:
			- Cloning - fill/stroke issues for Phrase sprites (as shown in Demo050)
			- Space Invaders and Frogger games (demos081-83) need to be fixed
			- Pattern global and local positioning
				- currently it is all local to the sprite
			- still some bugfixes needed to make later demos work properly
			
131222-27
	- Major Overhaul #1
		- moving from Cell-centered drawing to Sprite-centered drawing
			- in the hope of speeding things up a bit
			- also may help to simplify the code
		- removed all the load/save native stuff - can recode it later (after Major Overhaul #2)
		- simplified gradients
			- Sprite-centered drawing ruined the old gradient system
		- simplified Cell.setEngine()
			- got rid of the horrific strokeStyle and fillStyle code
		- simplified all sprite drawing routines
		- complete recode of scrawl.makeRegularShape()
		- sorted out various bugs in the Shape/Outline factory methods
		- massive overhaul of Points
			- now use Vectors and vector calculations
			- associated changes to Link object and functions
		- removed Cell native Canvas wrapper functions
			- no need to spin cells when all sprites can spin
		- fixed demos broken by changes
			- will require moving eventual code to Version 2.0, with warnings
		- STILL TO DO
			- group positioning - DONE
				- revisiting the whole override thingy - DONE
			- patterns - to match changes in gradients
			- shape hit zones - long overdue - DONE
			- more work on contexts - demo050 still has issues of not updating fill/strokeStyles eg for Phrases
			- Major Overhaul #2
				- planning to slimline all objects by only retaining attributes that do not match defaults
					- this should (hopefully) be the big speed enhancement
					- current Scrawl objects are too big, take up too much memory and slow stuff down
					
131221
	- bugfix
		- Shape markers - was not recalculating the Shape path before adding marks
	- experiments in physics
		- removed Particle (nee Ball) pivot and handle stuff
			- Particles are strictly linear, and strictly positioned - no handle offsets.
			- a Particle cannot use another particle for positioning itself
		
131220
	- experiments in physics
		- fixed the Spring calculations
			- finally got the swinging rope demo working like I wanted it to
		- renamed Ball objects to Particle
		- added new object - Body
			- will be used for rigid body physics
				- not yet sure how to implement it ...
	- bugfix
		- Outline sprites were miscalculating initial 'm' data positioning
				
131219
	- experiments in physics
		- thinking about rigid body stuff
		- added code to include Ball object pivots and handleXY offsets
		
131218
	- new scrawl object
		- Spring()
			- for connecting two balls together
			- prototypes from Scrawl
			- stored in scrawl.spring
				- unlike Ball sprites, springs are NOT sprites
	- also added in scrawl.force
		- for storing force functions 'globally' rather than individually as part of the Ball sprite
	- experiments in physics
		- demo127 - rope swinging under gravity
		
131217
	- experiments in physics
		- demo125 - collisions
			- between ball sprites
			- also, use a Ball sprite to help calculate cell field collisions
		- demo126 - more collisions
		
131216
	- experiments in physics
		- demo123 - normal collision detection against a cell field
		- demo124 - adding a force limited to a sprite
		
131215
	- new Scrawl object
		- Ball()
			- prototypes from SubScrawl, but is stored in scrawl.sprite
			- is a form of sprite which is never displayed
				- normal sprites can use Balls as pivots
	- experiments in physics
		- demo121 - ball falling from top of screen under influence of gravity
		- demo122 - ball under influence of gravity, air friction and wind
		
131214
	- new Scrawl objects
		- Vector(), Matrix(), Quaternion()
			- as written up in the book
			- for calculations using vectors, 3x3 matrices and quaternions
			
131213
	- cross-origin images
		- need to investigate where to add the img.crossOrigin = ''; code into scrawl to allow basic CORS compliance
			- definitely in ScrawlImage constructor and loader
			- possibly somewhere in Picture and Pattern objects
			
131212
	- learning physics stuff
	
131211
	- learning physics stuff
	
131210
	- returned to the bunny problem
		- Scrawl slows down significantly when too many sprites are added to the mix
			- as in anything over 200 sprites
		- coded up a series of demos - 119, 120 - which build on the bunny demo112, to test for solutions
		- also coded up demos 116-118 based on the djankey Canvas performance test
			- eg http://jsdo.it/djankey/test-fabricjs
		- solutions:
			- 1. offer sprites a way to skip the roll code using new Sprite.allowRoll attribute
				- true by default; setting to false skims a few milliseconds per cycle at best
			- 2. let sprites skip the flip code using new Sprite.allowFlip attribute
				- as for .allowRoll; even less time saved
			- 3. allow sprites to bypass the Cell.setEngine routine by setting Sprite.fastStamp to true
				- offers significant time savings - doubles the framerate on the tests
				- risky to use as completely ignores the context engine; sprites have to use engine's existing settings
			- best solution remains to cut down on number of sprites (demo118, demo120)
				- achieved respectable speeds when using just one sprite and stamping it where required on each display cycle
					- still not as good as the opposition, but getting there
		- significant recoding of Cell.setEngine(), Context.getChanges()
			- bugs in the code were causing the loop to run for .name and .timestamp - wasting time
			- was also picking up false positives for .lineDash attribute, which is an array
			- new code saves between 3-8 milliseconds per stamping, where context engine did not need to be updated
		- minor recoding of Sprite.flipCanvas(), .rotateCell(), .unrotateCell()
			- to implement .allowRoll and .allowFlip
		- also updated Sprite constructor and Sprite.prepareForExport(), .setToDefaults() to capture new attribute data
		- checked all demos in JavaScript to make sure changes broke nothing else - all good
	- NEED to:
		- Fix Phrase.clone() bug
		- update documentation
		- update tutorial with new page on best practice for speeding up Scrawl.js
			- also text on new zoom and pattern features
			- additional text on SVG filters
		- complete demos for Isometric game display
			- which then needs to be turned into yet another tutorial page
		- release next version of Scrawl
		- continue developing physics engine
		
131209
	- investigating the possibility of adding a physics engine to Scrawl
		- was hoping to find physics engine off-the-shelf which Scrawl could hook into
			- most seem to already have 'rendering' engines built into them
			- all seem to have their own collision detection systems
				- probably incompatible with Scrawl
		- decided to add my own physics engine to the code base
			- using O'Reilley's 'Physics for Game Developers' book to guide me
			- added new Vector object class to the code base, together with various methods
				- book says vectors are essential for physics
				- may have uses beyond the scope of the physics engine
				
131208
	- developed demo115 - easing experiments using Shape guides
		- proof of concept; no changes to Scrawl library
		
131206
	- developed demo114 - wrapping text dynamically to a fixed width
		- BUG uncovered 
			- Phrase.clone() not setting font to desired parameters
		- developed a text parser for the demo; no plans to include it in Scrawl.js
		
131202-05
	- developing demo113 - Poetry Advent Calendar

131201
	- added new Group attributes
		- Group.spriteSort, .groupSort
			- boolean, when set to false will skip the sprite/group sorting steps
			- default: true
			
131130
	- looking at rendering lots of objects
	- demo112 - the bunny test
	
131129
	- new Sprite attributes: Sprite.lockX, .lockY
		- for sprites using pivots or paths to calculate their starting coordinates
		- when set to true, sprite will ignore pivot/path's x and/or y coordinate respectively
			- locks sprite into moving vertically or horizontally (respectively)
	- new demo111 - Bridge and/or valley text
	- tested in Firefox - all demos work
	- upgrade to version 1.04
		- updated documentation
		- updated website
		- uploaded to SourceForge/GitHub
	
131128
	- investigating animated patterns
		- recoded Pattern constructor and a number of of functions
		- added Pattern.cell, Pattern.canvas
			- .cell stores CELLNAME used when generating patterns
				- not convinced its needed; think PatternObject is good for any context engine, once generated
			- .canvas stores CELLNAME used as source for pattern
		- added Pattern.update() function
			- for consistency with other designs
		- demo110 - using static pattern generated from canvas
		- demo109 - using animated pattern generated from canvas
			- big issues with animation - won't work unless sprites used in source cell also stamped on other cells
				- absolutely no idea why this is happening
		- tested all demos in FF - all working after minor bugfix
			- ScrawlImage had a type==='Image', not 'ScrawlImage' - fixed
	- upgrade to version 1.03
		- updated documentation
		- updated website
		- uploaded to SourceForge/GitHub
	- IE11 decided to install itself on computer
		- most demos run fine on IE11
			- except spinning cube, filters
	
------------------------------------------------------------------------------------
131127
	- demo107 (adding roads and rivers) completed
		- finally coded up Outline.clip()
		- updated outline.clear(), outline.clearWithBackground()
			- both make use of Outline.clip()
		
131126
	- new function - Group.getSpritesCollidingWith(SPRITENAME||Sprite)
		- supply a sprite or sprite name and find out which sprites in the group are colliding with it
	- new Cell attributes - Cell.globalAlpha, .globalCompositeOperation
		- come into play during the 'show' phase of the display cycle
		- allows entire cell to be translucent, or to be copied onto the base cell using different composite operations
	- new Cell attribute - Cell.lockTo
		- takes the name of a cell which this cell will use for getting source/destination values
			- kinda like .pivot
		- used by Cell.copyCellToSelf(), .getCopyScaling() functions
			- allows positioning and zooming of cell to be locked to that of a different cell
				- so coder only has to worry about positioning and zooming one cell, not all of them
	- continuing with demo107
	
131125
	- demo106 (rotating isometric grid) completed
	- demo107 - adding roads and rivers
	
131124
	- got node.js, grunt and uglify working on local development setup
	- upgrade to version 1.02
		- min file successfully created and tested against all demos and website
		- documentation updated
		- tutorial updated
		- website updated
		- latest version posted to SourceForge and GitHub
	- demo 106 - rotating the isometric grid
	
131123
	- fixed bug introduced with the changes made for fixing the dynamically loaded pattern bug
	- keyboard controls
		- using Mousetrap.js to capture keyboard input in demo104
		- updated demo104 to demonstrate moving around the isometric grid using the arrow keys
	- demo 105 - selecting multiple grid cells
		
131122
	- zooming cells
		- new Cell.sourceMaxWidth, .sourceMaxHeight, .sourceMinWidth, .sourceMinHeight attributes
		- new Cell.zoom() function
			- only works if zoomed cell's source frame remains within its actual dimensions
	- demo104 (zooming the isometric grid) completed
	
131121
	- demo103 (isometric tiling) completed
	
131120
	- began investigating methods of implementing an isometric game (like Sim City) using Scrawl
	
131119
	- bugfix - loading images for use with Patterns
		- pattern not displaying when used with single sprite on canvas
	- added new functions: Design.delete(); Pattern.delete(); Color.delete()
		- designs are not deleted when sprite is deleted because other sprites might be using them
		- solves problem of deleting unwanted designs
	- amended Sprite.setDelta()
		- now handles .lineWidth and globalAlpha attributes
	- blog demo - ripples across images (not posted live)
		- more work on filters - displacement maps
			- couldn't get them to work
		- coded demo to use Wheel sprites for displacement
			- not what I wanted, but does work (once new functionality added to Scrawl.js)
		- demo not posted to live blog
			
131118
	- blog demo - importing local images into a scrawl canvas
	
131117
	- blog demo - dragging sprites between two separate canvases
	
131115
	- more work on filters
	- blog demo - gaussian blur on animated Picture sprite
	
131114
	- blog demo - dynamic path creation
	
131111
	- initial work investigating filters
		- Scrawl does not support filters
		- use CSS/SVG filters on the scrawl canvas to achieve a similar effect
	- blog demo - filter on text
		- appears as it should on FireFox, though very slow
		- some filter effects appear in Chrome/Opera
		- not working at all in Explorer
		
131107
	- blog demo - testing animated gradients
	- blog demo - Shape paths, text (the 'hello world' demo)
	
131106
	- added asynchronous loading of images for Picture sprite
		- constructor's object will look for .url attribute
			- url needs to be supplied as a string, and needs to point to web address of image
			- url attribute not retained by sprite object!
		- if .url exists, will call Picture.importImage() function
			- function calls scrawl.newPicture() once image has been uploaded and stored in library
	- move to v1.01
	- blog demo - import SVG image and spin it
	- updated tutorial
	- updated website
	- updated documentation
	- uploaded to SourceForge/GitHub
	
131105
	- experiments in getting scrawl canvases to run on a WordPress post
		- needed to adapt the Wordpress theme
			- amendments to head.php, footer.php
			
131104
	- styling the new WordPress blog
	
131103
	- added a WordPress blog to the scrawl website
	- adapted index page to link to blog
		- removed 'tour' button - the index page IS the tour
		- removed the 'about' button and made the about text permanently visible
		- removed button handling routines from index.js - no longer required
		
------------------------------------------------------------------------------------
131030
	- website index page redesigned and recoded
		- all seems to work in latest production versions of IE10, Firefox, Opera, Chrome
		- Safari - cat in 3D animation missing - can live with this
		- IE10 - cloning demo - cells not being cleared as expected, but does correct itself when carousel shifts
	- scrawl-min.js version generated
	- OFFICIAL: updated to v1.00
	- upload new files to Sourceforge
	- update github
	- update website
	- announce to world ...
	
131029
	- added .setToDefaults() functions to various objects
		- used to set an object's attributes to default values before importing native data for that object
			- overcomes issue of .exportNative() functions only including attributes that vary from their default values
	- added scrawl.version attribute
	- website tutorial page completed
	
131028
	- website tutorial page
		- all completed/recoded, except for:
			- new sub-section on Shape markers
			- new section on Loading/saving Groups and Sprites
			
131027
	- website tutorial page
		- 'Scrawl sprites' completed
		- 'Block' completed
		- 'Wheel' completed
		- 'Phrase' completed
		- 'Picture' completed
		- 'Picture with sprite sheet' completed
		- new 'Outline' section coded
		- 'Shape' completed
		- 'Hand-coding Shapes' completed

131026
	- website tutorial page
		- 'Using Scrawl' completed
		- 'Pads and Cells' completed
		- 'Scrawl stacks' completed
	
131025
	- completed updating the demos.js file
	- investigating minification options
		- gone with http://jscompress.com/ - which claims to use Uglify.js for minifying files
			- tested all demos against the Scrawl minified version
			- bug hunting ...
				- all works in Firefox
	- started work on updating the website tutorial page
		- 'HTML5 page' completed
		- 'Using Scrawl' walkthrough recoded
	
131024
	- continuing the work of updating the demos.js file
	- bug hunting ...
				
131023
	- documentation update completed
	- started the process of updating the demos.js file
	
131022
	- rewrote Outline constructor and functions to remove eval
		- eval too risky - no reasonable way to prevent 3rd parties from tampering with outline.compiledData attribute
		- seems to work ok
	- updating documentation
	
131001-21
	- massive overhaul of the entire library
		- sprite positioning regularised
		- sprite collision detection regularised
			- consistency across sprites whatever their flip or roll attributes may be
			- Picture sprite color detection now takes into account sprite's flip and roll attributes
			- Shape sprites no longer use NESW collision point system
				- now expect .collisionPoints to be a number
				- number represents the no of collision points along Shape path
					- will allow lines/curves to have collision points strung along them
			- checkField/checkFieldAt functions rewritten
			- removed Sprite.addCollisionPoints(), .removeCollisionPoints() functions
		- experimental SVG import support removed
		- added in native import/export functions
			- reliant on creating/parsing JSON strings of sprite, design and group objects
			- .prepareForExport() functions for Group, Sprite, Point, Link and Design (Gradient/RadialGradient/Pattern/Color) objects
				- only attributes not equal to default values are included in the JSON string
			- new scrawl.importNative(string) function
			- new Group.exportNative(), Sprite.exportNative() functions
			- removed scrawl.save() function
		- testing and recoding of every demo to fit the new paradigms
			- demos 013,014,038,066,068,078,098,099,100,101 redundant
		- reintegrated scrawl.js and scrawl+sprite.js
			- maintaining two separate files was introducing too many stupid bugs
			- rewrote canvas and stack discovery/import/create functions
		- cell setEngine rewritten to fix bugs relating to .setToSprite
		- Groups reconceived
			- regularising towards the sprite 'default'
				- new .roll, .fieldTest, .fieldChannel attributes
			- offset calculation significantly rewritten
		- Sprite constructor .target flag separated from .group attribute
			- target now recodes objects so that they use their group as a pivot and their handle values act as offsets to the group origin point
			- new Sprite.targetGroup() function to respond to .target flag
		- Group.setHandles(), .getSpriteRange() functions dumped
			- replaced by .setGroupDimensions(), .setSpritesToGroupHandle() functions
				- Groups now have handles that work in the same manner as Sprite handles
		- Groups can now be rotated as a single unit
		- Sprite stamping functions overhauled
		- All references to .degree attributes removed from code
			- Scrawl.js is now 100% degree-based - will not accept radian values
		- Color object rewritten to remove many bugs
	- tested demos in Firefox, IE10, Safari(windows), Chrome, Opera
		- got 3D cat animation working again in Firefox
		- Opera now supports CSS3 3D transforms!!!
		- everything seems to be working in all browsers
			- some animations involving collisions or path animations look slow in Firefox
			- IE10 still has CSS3 3D issues
	- MOVING TO VERSION 1.00
		- V1.00 IS INCOMPATIBLE WITH PREVIOUS VERSIONS
	- updated changelog (this file) - long overdue!
	- TODO:
		- update documentation thoroughly
		- update readme file
		- update website tutorial page
		- recode website index page
		- make 'video' tour of Scrawl.js
		- recode website to add a blog
			- use blog for lessons, best practice, updates, news, etc
		
130930
	- project collisionOverhaul continues ...
		- Shapes no longer use the common collision points
			- instead all shapes take a number for collision points
			- points are distributed evenly around the path
	- current issues
		- overrides

130926-27
	- project collisionOverhaul continues ...

130925
	- fixed bug in Phrase.stamp-ing
	- project collisionOverhaul commences ...
		- collisions with cell fields
		- collisions within groups
			- currently oversensitive
			
130924
	- more work on regularising Outline sprites
	- fixing text along paths
		- done!
		- completely different solution to the old one
			- though can't get it to work properly with Arabic ...
	
130923
	- finally figured out what was going wrong with wheel positioning - fixed
	- changed context .fill attribute to '.winding'
		- to avoid all possible confusion with sprite.fill() functions
		- need to work out how to check hits in a Shape/Outline sprite with .winding === 'evenodd'
	- Shape sprite positioning: final decisions:
		- all lines (via makeLine(), makeQuadratic() and makeBezier() factories) APPEAR to be centered on their startXY coords
			- handleXY are set to 'left' and 'top' respectively
			- new .getPivotOffset() override effectively shifts lines back and up by half their widths/heights to make illusion work
			- new Shape.line attribute: true for line/quadratic/bezier
				- should be set to true for hand-coded lines to get correct positioning
		- all other Shapes are centered
		- tested ... works
	- fixing more demos
		- most working up to demo 090 ...
	
130922
	- Shape sprite positioning on flip, scale, roll, etc ... done
		- finally got it working in a (reasonably) sensible manner
	- removing collision detection options
		- killed Shape.checkHitUsingRadius, .checkHitUsingBox
		- killed Outline.checkHitUsingBox
			- both sprites now rely entirely on .isPointInPath()
	- Shape sprite positioning on flip, scale, roll, etc ... done
	- more work on cloning
	- much chasing down of bugs as testing changes on demos
		- most demos were fixed by alteration of Phrase .textAlign to .handleX
		- issue with centering circles 
			- not happy with failure to exactly place circle centre at startXY coordinates as default
		- some later demos were using .getCorners (which has now been dumped)
		- big issue with placing imported Outline sprites
		- need to do more on markers
		- between-sprite collision detection is the next big job
			- collisions against cell fields seems to work fine
		- also want to get text along path working again
			- works for single lines
			- need to re-implement word and glyph TAP
			
130921
	- rewrote sprite.pickupSprite(), sprite.dropSprite() functions
		- because there was a much simpler solution
		- meant abandoning much of yesterday's work
			- but worth it
	- introduced temporary attributes to sprites
		- .currentX, currentY, currentWidth, .currentHeight, .currentRadius
			- going to be used for drawing sprites
				- cuts down on the number of calls to getStartXY
		- .mouseX, .mouseY, .realPivot
			- used during mouse attachment for drag-and-drop
				- created when sprite first associates with mouse (drag)
				- destroyed when association breaks (drop)
	- collision detection
		- moving away from .getCorners
		- new collision detection system (for Blocks, Phrases, etc) uses ctx.rect() and .isPointInPath() JS functions
			- tied to rotate and flip functions, allows for point detection in rolled sprites!
			- extensive rewrites of related functions
	- new Phrase attributes: .backgroundColor and .backgroundMargin
		- for adding a background color to Phrase sprites
			- like postIt notes ...
			
130920
	- operation getCorners() & checkHit() (continued ...)
		- Shape sprites
			- all factory functions now produce relative paths, not absolute ones
			- clone function corrected for minor errors
			- all seems to be (finally) working
				- still some issues with lines and curves
					- hit boxes seem to be displaced a little
					- when start and end coordinates are horizontal/vertical to each other, boxes have no width/height
					- safest to use .checkHitUsingRadius to detect mouse
		- Outline sprites
			- changed factory functions to adapt the paths they create to be used by newOutline
			- adapted the checkHit() function to take into account .roll
		- changed Sprite.dropSprite()
			- now takes an object rather than a string
				{pivot:PIVOTNAME, restoreHandles:BOOLEAN}
				- restoreHandles defaults to 'true'
				- mainly for Shape objects
					- when true, will restore Shape handles, but may cause some jumping when pickup/drop occurs
					- when false, will not jump, but Shapes will now rotate around the new point
	- operation getCorners() & checkHit() COMPLETED (for now ...)
	- TODO
		- restore Phrase ability to track along paths
		- group flip
		- group roll
		- group clone
		- really ought to rationalise the inGroup and betweenGroup collision detection
			- still need to figure out how to detect collisions on rotated Block, Picture, Phrase (and Shape?) sprites
			- maybe also Wheels, though they always rotate around their centers?
			- think I've accomplished this for Outlines 
				- need to check to make sure they do what I think they do ...
		- SVG load 'style' attributes
			- will be using them for the exporting of stuff, so will need to import them too
		- develop .export() functions for sprites and groups, and associated stuff
			- to make pretty SVG files that can be used with the SVGload functions
		- check through all the SVG stuff
			- see if there's anything else Scrawl should be capturing
			- see if there's anything superfluous in the coding eg unused attributes
		- check through all Demos, recoding where necessary
		- transfer all the new stuff over to scrawl+stack.js
			- though maybe abandon having separate files for both?
				- maintaining 2 files is a lot of work
				- doable if can find a way to better minimise files?
					- really need to look at setting up Uglify.js and node.js on local network
		- update documentation
		- update tutorial
		- upgrade library and release it into the wild

130919
	- operation getCorners() & checkHit() (continued ...)
		- Picture sprites - done
		- Outline sprites - done
			- most Shape factory functions adapted to tale .outline attribute
				- when set to true, will generate an Outline sprite
				- otherwise, Shape sprite generated
				- currently not .makeRegularShape()
		- Shape sprites
			- some really weird stuff going on here ...
			- completely recoded the Shape clone function
			- working on integrating RegularShape factory to use the makePath factory
			- tons of tweaks to try and get (regular) shapes to behave similarly to other sprites re handles and collision zones
			- significant issue when cloning a previously cloned Shape sprite
				- pivot position is shifted way outside the sprite, sending it flying when rolled
			- big issues about displaying Shapes when flipped

130918
	- operation getCorners() & checkHit()
		- code tweaked to accommodate scaling
			- works for Blocks
			- Phrases playing up ...
	- MAJOR CHANGE
		- complete rewrite of Phrase sprite object
			- was becoming too unwieldy and fiddly
			- made a decision to break it into two objects
				- Phrase object is like a shell group masquerating as a sprite
				- NEW Text object
					- inherits from Scrawl, not Sprite
					- holds details of single lines of text
					- Phrase objects include array of Text objects holding phrase text
					- Phrases stamp by looping through their .texts array
					- Text objects do the actual stamping
		- new system clones perfectly
			- old multiline Phrases were not clonable (an undiscovered bug)
		- Phrase.getCorners() function recoded
			- collision box now fits neatly around multiline text however it is positioned, flipped or scaled
			- while Phrase animates rotations fantastic, the collision box doesn't (yet) rotate with the sprite
				- also true of Blocks and Pictures
				- will need to revisit this 'known' bug at a future date
		- Phrase layout now makes sense
			- handleXY controls the positioning of the Phrase sprite as a whole
			- .textAlign manages the text justification within the Phrase
			- .textBaseline manages the vertical positioning on the first line of text only
				- collision box compensates for .textBaseline manipulation
				- what was once a mystery now becomes a little clearer
		- text flipping 
			- .flipUpend now upends the entire Phrase, not line-by-line (as previously happened)
		- NEED to recode the whole text along paths stuff ...
	- operation getCorners() & checkHit() (continued ...)
		- Wheel sprites
			- recoded .getCorners()
				- Wheel wasn't positioning as expected when handles changed
					- because they were drawn from their center, not top left edge
				- changes don't affect much stuff
					- added code to set default handleXY to center on initialisation
					- but when handles are used, the Wheel now acts as expected
			- recoded .buildPath()
				- was completely ignoring flip booleans
					- difficult to spot, but important - now fixed
			- recoded .checkHit()
				- correctly picks up wheel, whatever the settings of its handles, scale or flip
				
130917
	- importing SVG <image> coded up
		- takes no account of any elements inside the element tags
		- also doesn't care about preserving aaspect ratios
			- may change this later after additional thought
	- the <use> element ...
		- Scrawl is going to ignore this element
			- SVG uses it to place and display already defined elements
			- Scrawl captures elements defined in the <defs> tag and places them in a group
			- Scrawl has no interest in accurately recreating an SVG scene on the HTML5 canvas element
				- it's purely about saving and loading Scrawl sprites using the SVG format
	- cloning outlines
		- coded up Outline.clone() function - overrides Sprite.clone()
		- tested in Demo100
	- uncovered and fixed bug in Sprite.pickupSprite()
		- was failing when handleXY attributes set to anything except numbers
		- Outline sprites required their own versions of .pickupSprite() and .dropSprite() - coded
	- fixed Shape cloning bug (in Demo050)
		- clones of clones were being displaced by handle offsets
		- fixed by using the Outline solution for pickupSprite() and dropSprite()
	- major undertaking to rationalise all sprite getCorners() and checkHit() functions
		- major problems with all sprites when cloning/dragging flipped sprites
		- first big task - align all possible collision areas with displayed sprites, whatever their flip state
			- Block - done
			- Phrase - done
				- major work, as Phrases affected both by handles and by textAlign/textBaseline
			- will need to revisit these before proceeding to make sure scaling is also covered.
				
130916
	- fixing all the issues thrown up by the demos checking
		- Shape factories fixed so that Points generated have the suffixes _p1, _p2, _p3, _p4
			lines - 1: start; 2: end
			quadratics - 1: start; 2: control; 3: end
			beziers - 1: start; 2: startControl; 3: endControl; 4: end
		- complete rewrite of the Shape.clone() function
			- working as it should
				- potential issues about handles when cloning a Shape and immediately giving it handles
					- as happens in Demo050 (clone + pivot:mouse)
		- further work with Designs
			- animated gradients and colors will now automatically update
				- new Design.autoUpdate attribute to trigger this behaviour
				- rewrite of Context.getChanges function
			- fixed the Pattern clone/update issues
				- Demo040 returned to normality
	- a number of demos have been rewritten to take into account changes/fixes
		- won't be able to do this if people start using Scrawl for their project
			- got to remember backwards compatibility!
			- but some of the demos were written way back and kludged to fit as the library evolved
	- executive decision re Outline markers
		- not going to have them
			- purpose of SVG is to store/load Scrawl sprites, not to recreate SVG scenes on the HTML canvas element
			- Shape sprites now make use of markers; Outline sprites are intended to be a lot simpler than Shapes
	- STILL TO DO
		- (done) load SVG images into the image part of the library, ready for sprites to use them
		- (dealt with) 'use' links where SVG reuses template elements
		- (done) cloning outlines
			- also have done nothing about updating the data attribute of cloned Shape sprites
				- could be solved by recoding the Shape factories to use relative coordinates rather than absolute ones?
				- is it really necessary? will only be used for SVG output, which can carry manipulation data beyond the path data
		- Outline sprites need a thorough test regime of new demos
		- loading attributes enclosed in an SVG 'style' attribute
		- need a whole system of functions for exporting sprites and groups in SVG-style format
		- serious work on Groups needed
			- flipping
			- cloning
			- rolling
			- scaling
			- collisions as a single pseudo-sprite
		- documentation now badly out of date
		- tutorial will need a thorough going over
			- which means porting over all the demos to the demos.js file
		- need to port all changes over to the scrawl+stack.js file
		- need to investigate better ways of minimising file size
			- Uglify.js ... but requires node.js ... which means virtualisation stuff ...
			
130915
	- marker stuff (mostly) completed
		- tweaked scrawl.parseSVGElement()
			- all sprite forms (except text) now respect the outline command
				- though some will fail to produce outlines as no .data path coded for them yet
		- scrawl.makePath() now reacts ton the .setPivotXY attributes correctly
			- .setPivotXY attributes can now take strings, numbers or percentages
		- new SubScrawl.getPivotOffset() helper function
		- new Shape.stampMark() helper function
	- worries about color opacity
		- SVG allows fill and stroke opacities to be set separate from the color itself
		- might be worth creating color objects for each imported sprite and varying opacity that way?
			- not convinced we need another pair of attributes added to the factory functions ...
	- testing all demos against enhanced library
		- 036,059 (arrows) recoded to use .makePath() factory
		- 053 recoded to use makePath(), .fill, .scaleOutline
		- 044 (spinning wheel) recoded to use Color object
		- 057 (drawing lines) recoded to make use of outlines
		- broken: 
			- 080 point associations
			- 081 two bombs exploding on each other breaks game?
			- 092, 102, 040 - completely buggered
			- 060, 068, 084, 085 - cloning lines
			- (done) all the collision area demos need to be speeded up significantly!
			
130914
	-fixed map demo
		- poorly planned coding in the demo, rather than a scrawl.js issue
		- still need to look at why some Outlines are not firing when they should
			- fixed - traced bug to Outline.checkHit()
			- all working as should be now, and very quick!
	- removed String.strtr() shim from Scrawl.js
		- no more need for it, as now planning to use SVG-type files for import/export
	- progress with markers
		- need to sort out handles for Shape sprites
			- does not like percentages or labels
		- scaleX seems to be working, but not scaleY, when initially building marker sprite from SVG file
	- housekeeping ...
		- deleted all the .getObjectData() functions
			- no longer required
		- deleted all sprite .getEndX(), getEndY(), getWidth(), .getHeight() functions
			- covered by .getCorner() functions
			- amended all functions using the deleted functions
	- playing with markers
		- fixed most problems with markEnd
			- except need to use setStartTo instead of handleXY
				- introduce new attributes for make factories: setPivotX, setPivotY
					- use percentages ...
					- don't save in sprite object ...
		
130913
	- fixed Point bug
		- bug was in Point.getData()
			- a .setPolar() call was triggered whenever .distance and .angle were not true (ie: 0, null, false)
			- fixed the point constructor to set these attributes to false, if not supplied by the data object
			- then checked to see if attributes were boolean false before triggering thre call to .setPolar()
		- also fixed scrawl.make factories so only makePath (and makeRegularShape) triggered a sprite stamp to set the polar coordinates
		- fixed bug in Shape.clone()
			- wasn't stamping newly created clones to reset their points' attributes to the new data
			- tested on demo061 - works
	- import/export
		- finally reached a workable system for exporting Shape sprites as path strings
		- many bugs overcome
		- Shape path data can be imported as either Shape or Outline objects
			- shape sprites have start coordinates at the center (rectangle, ellipse, regularshape), or starting values
			- Outline sprites fix the start coordinates to the top left hand corner of the sprite
				- just like Blocks and Pictures
		- fixed bug in Outline stamping methods that was sending sprites everywhere when rotated
		- demos106 and 107 to test - currently working okay in Firefox - even when flipped
	- TODO
		- need to get back on track with markers
		- need to do loads of testing on Outline collisions
			- need to think about how to handle collisions for rotated Block, Picture and Outline shapes
				- outlines do have the advantage of being able to test for hits within the outline
					- but no idea how this is affected by rotations and flips
		- more SVG stuff: 
			- images
			- the attributes stuff is still flaky and tempramental
				- users will no doubt want to import badly coded SVGs ...
		- everything needs to be documented and included in the tutorial
			- changes will be enough to bump Scrawl up to v0.4
		- (DONE in part) demo103 world map
			- need to look at collision detection
				- for some reason some of the countries are not triggering - probably a box issue?
				- also, too slow to identify country under mouse cursor
		
130912
	- fixed bug in Sprite.flipCanvas()
		- was not handling sprite.handleXY properties properly, when set to string labels (top, left, center, etc)
	- SubScrawl.getStartX(), .getStartY()
		- extended the top/center/bottom/left/right values to all sprites
		- added percentages - n% is a percentage of the width for getStartX(); likewise a percentage of the height for getStartY()
	- new SubScrawl.getDimensions - to return the unscaled dimensions of the object
		- overridden by Cell and Wheel
		- used by SubScrawl.getStartXY functions
	- converted all 'make' factories (except makeRegularShape) to use scrawl.makePath();
	- got rid of scrawl.makePolyLine(), .makePolygon() factories
		- for SVG stuff, converted the polyline/polygon data to path strings by adding 'M' to the data string (and 'z' for polygons)
		- simplifies stuff
	- lots of experimenting and thinking about SVG markers
		- started converting sprite painting functions to acommodate marker sprites
		- ensured that when parsing SVG, shapes within <marker> elements are given visibility:false attributes
	- somehow managed to reintroduce the 'point not updating when moving startXY' bug ...
		
130911
	- NEW SPRITE
		- Outline
			- much like block, except uses SVG path data to draw itself
			- much fun to get the path parsing stuff right
			- handleXY can take top|centre|bottom|left|right
			- attribute .checkHitUsingBox - for quick hit checks
				- when false (default), creates the outline and checks for point in outline thingy
			- draws itself using canvas translate/rotate stuff
		- tested on the WorldMap, which now loads massively quicker than when turning the path data into Shape sprites
			- using Shapes was generating over 12000 individual point and link objects
		- also tested for all supported letters: M m Z z L l H h V v C c S s Q q T t
		- TODO
			- need to investigate hits-at-location stuff
				- because current system is a lot slower than the opposition!
	- scrawl.loadSVG()
		- now takes an object as its argument:
			.loadPathsAsOutlines 
				- when true, path elements will be turned into Outline sprites
				- default (false) is to create Shape sprites from <path> elements
			.classname
				- when supplied, function will scour DOM for elements with class=CLASSNAME
			.getInlineSVG
				- when true, scours DOM for inline SVG elements
				- default is false
			.cell
				- cell in which to load the created sprites
				- (not yet implemented fully)
	- STILL NEED TO CONSIDER ...
		- SVG text
			- including textarea
			- ignore all attempts to account for text selection/editing or alignment/styling of individual glyphs
		- SVG images (including video? supported by SVGTiny. But not audio)
		- SVG linking to other websites? - not convinced Scrawl needs to support that sort of thing
		- 'use' links where SVG reuses template elements
		- markers at the start, end and along paths
			- SVG Tiny doesn't appear to mention them, but they seem like fun
				- and should be quite easy to do? Already using paths for animation stuff
		- (DONE) Flipping Pictures associated with sprite sheets
			- something's badly wrong with defining what gets flipped
			- (probably) critical for game developers
			
130910
	- finalised Color object
		- functions include:
			.get(), .set(), .setDelta(), .update(), .generateRandomColor, .convert(), .toDecimal(), .toHex() 
		- checked random color generation, updating colors using .update()
			- tested on amended demo050 (cloning)
				- works in Firefox
	- testing with very big 'SVG' - Raphael.js's worldMap
		- fixed bug in Sprite.get()
			- missed out fillStyle, .strokeStyle
		- takes almost 30 seconds to convert to Shapes!
		
130907-09
	- changes during the SVG investigation:
		- dumped the scrawl.load() and scrawl.save() functions
			- loading and saving via SVG will be a lot easier
		- new object: Color - part of the Design suite
			- SVG allows users to define colors in a variable for future use
			- Scrawl does it better ...
			- made Color objects clonable
		- based SVG support on SVGTiny, not the full SVG
			- principally cuz it avoids the horrors of the arc
		- scrawl.loadSVG()
			- takes the attributes:
				.getInlineSVG - boolean
					- true will load all svg files found in the DOM
				.classname
					- searches DOM for <object> or <embed> elements with classname
					- extracts and processes SVG from them
		- scrawl.getSVGByClass(classname)
		- scrawl.parseSVGElement()
			- helper function where all the hard work happens
			- currently parses the following tags:
				- svg, g, defs - each creates a group object
				- title, desc, 
				- solidcolor, lineargradient, radialgradient, stop
				- rect, circle, ellipse
				- line, polyline, polygon
				- path - all SVGTiny path drawing syntax
				- text 
					- very basic so far
					- don't want Scrawl to become a replica of SVG
						- so not planning to take it beyond basic support
		- additional helper functions for .parseSVGElement()
			- getVal()
				- converts measure strings (20px, 3em) into pixel values
			- buildSpriteParameters
				- a lot of work has gone into handling SVG inheritence
				- converts SVG parameters into parameters used by Scrawl sprites
		- scrawl.makePolyLine()
			- new line factory
			- takes a set of data suitable for use by the .makeCartesianPoints() factory
			- returns new open Shape sprite
		- scrawl.makePolygon()
			- another new line factory
			- uses .makePolyLine()
			- returns a new closed Shape sprite
		- scrawl.makePath()
			- converts SVG path data into a new Shape sprite
			- handles MmZzLlHhVvCcSsQqTt
			- does NOT handle Aa - which isn't part of the SVGTiny spec
		- the following functions completely rewritten to make use of .makePath() factory:
			- scrawl.makeEllipse(), .makeRectangle(), .makeBezier(), .makeQuadratic(), .makeLine()
				- rationalises factory onto a single system
				- not yet worked out how to update .makeRegularShape() to new system
		- extensive rewrite of Cell.setEngine()
			- to add in some functionality lifted from SVG
				- gradients can now be set to sprites as well as cells
					- new Design.setToSprite attribute
					- used with fillStyle and strokeStyle
				- NEW FILL RULE
					- scrawl can now handle 'evenodd' as well as the default 'nonzero'
					- browsers implement this in different ways
						- 'evenodd' currently works on Firefox and Chrome only
				- LINEDASHES
					- again, not implemented by all browsers
		- new Context object attributes:
			.fill 
				- for the fill rule
			.lineDash, .lineDashOffset
				- for handling line dashes
				- lineDash is an array of numbers setting out the dash pattern
				- lineDashOfset is the offset for starting the line
					- updated Sprite.setDelta() so lineDashOffset can be updated dynamically
						- Scrawl now has Marching Ant lines!
		- updated Context.getContextFromEngine()
			- not convinced it's necessary to initialize each Context object to current canvas contextvalues ...
		- updated Context.getChanges()
			- to handle another new feature
				- line and shadow scaling can be switched off by new sprite attribute flag
		- Groups ...
			- Groups can now be NESTED
			- new Group attributes to handle nesting:
				.isSprite
					- eventual aim is to allow a group to simulate a sprite
				.groups
					- an array of groupnames representing subgroups
			- new Group.sortGroups() - for sorting groups before calling them to stamp
			- Group.getOverride()
				- lifted out of the .stamp() method
				- now used by sprite.getCorner functions
					- which in turn are used by the new design-to-sprite thingy
			- updated Group.forceStamp(), .stamp() to take these changes into account
			- TODO
				- needs a lot more work to make groups simulate sprites
				- may need a complete rethink of the Group object's structure
		- new Sprite attributes:
			- Sprite.data
				- used in particular by Shape sprites for storing their SVG path instructions
					- not used beyond initializing the sprite
					- may come in useful as part of a new load/save system
			- Sprite.scaleOutline
				- when true (default), lines and shadows are scaled alongside the sprite
				- the SVG default is NOT to scale lines (I think)
		- updated Sprite.get() to handle new Context object attributes
		- Sprite.setDelta() now accepts changes to .lineDashOffset
			- for the Marching Ants innit
		- sprite .getCorners() functions calculate current effective position and dimensions for the sprite
			- used by the context engine to recalculate gradients set to a sprite
			- may also have broader uses for code rationalisation eg collision detection stuff
			- Phrase.getCorners() updated
			- new Block.getCorners(), Wheel.getCorners(), Picture.getCorners(), Shape.getCorners()
		- fixed annoying Shape.setStartTo() bug
			- which was causing rotated shapes to set their starts to anywhere except the place requested
		- fixed Link.sketch() bug
			- caused sketching to stop when the first close instruction was encountered
			- not good for SVG imports where many close instructions can be found in a single data string
		- Design.sortStops() function rewritten
			- to remove any possibility of a color stop being set to exactly 0 or 1
		- NEW Gradient/RadialGradient attributes
			.startRangeX, .startRangeY, .endRangeX, .endRangeX
			.startRangeRadius, .endRangeRadius
				- the new set gradient to sprite thingy measures distances in 'percentages' of the sprite width/height
					- thank you, SVGTiny, for that heartbreak
		- plans for the new Color object include
			- being able to randomly generate colors, given minmax values
			- animating colors by changing their rgba values
	- TODO:
		- more SVG conversion work
			- need to get head around whole viewbox thingy
			- SVG elements can have a 'style' attribute
				- doesn't seem to be part of SVGTiny, but probably worth supporting
			- images - how are they imported? used?
			- text - how much of their attributes stuff can be ported over?
			- markers on paths stuff
			- Executive Decisions: no animation stuff; no DOM interaction stuff
		- finish work relating to Groups pretending to be sprites
			- eg flip-as-group, roll-as-group, drag-drop-as-group, etc
		- (DONE) finish Color object
		- update some demos to further test/make use of this functionality
		
130906
	- investigating SVG import/export (again)
		- preparation work - created new scrawl+svg.js file for experiments
		- amended Group
			- new .groups array attribute
			- new .sortGroups function
			- amended Group.stamp() function
				- will check to see if there are any subgroups
				- if yes:
					- sorts them based on their .order attribute
					- checks to see that each subgroup is not the same as this group (to hopefully prevent immediate recursion hell)
					- calls .stamp on each subgroup
		- new scrawl.loadSVG() function
			- this is where all the conversion work will take place
			- scrawl.getSVGByClass() function - helps .loadSVG() locate SVG DOM fragments to work on
				- SVG files can be included in the webpage either by:
					- directly embedding the <svg> into the page
					- <object id="cow1" data="img/cow01.svg" type="image/svg+xml" class="demo103x">
					- <embed id="cow2" src="img/cow01.svg" type="image/svg+xml" class="demo103x">
					- not keen on the idea of dynamically loading the file
						- cuz experiments with images and patterns have always required an .onload thingy
							- leads to rendering issues if image not loaded quickly enough
			
130905
	- bugfixes - animating multiline phrases
		- rewrote Sprite.stamp(), Phrase.stamp()
			- Sprite has new helper methods: .setStampUsingPivot(), prepareItemForStamp()
			- for consolidating repeated code and making maintenance a lot easier
		- rewrote Phrase.multiline()
			- lines weren't picking up all of the head's attributes
			- also, positioning issues
		- edited Phrase.clone() override function
			- because Sprite.clone wasn't triggering the final cloned object to get its font ready eg for scaling
			- problems with double exposure
				- more general problem, fixed by setting all line visibilities to 'false' and forceStamping them in the stamp function
		- new Phrase .setDelta() override function
		- MAJOR BUG fixed 
			- scaled sprites were jumping during pickup
				- Sprite.pickupSprite() recoded to take scaling into account
	- added scrawl.stampBackground()
		- for completeness
	- had another go at improving Phrase boxing for collision detection
		- got it working in a reasonable manner
	- updated documentation
	- updated tutorial
	- upgrade to v0.304
	- updated website
	- uploaded to SourceForge
	- updated GitHub
		
130904
	- made Scrawl's Array/Number/String prototype additions a little bit safer
	- working on flips
		- added two new attributes to Sprite objects: .flipX, .flipY
		- added new Sprite.flipCanvas() helper function
		- amended Sprite.callMethod() to make the magic happen
		- updated demo062 (carousel on ellipse path) to test new features
		- added NEW DRAWING METHOD - sprite.clearWithBackground()
			- sprite will paint the canvas with canvas's backgroundColor before stamping itself onto it
				- done to give the mirror effect to the carousel
			- thus new methods for all types of sprite (Block, Phrase, Wheel, Picture, Shape)
			- amended Sprite.stamp(), Phrase.stamp()
		- corrected bug where cell would not draw its background color except via its compile() function
			- new Pad.getCellsForDisplayAction()
				- removes repeated code into its own function
			- amended Pad.clear(), Pad.compile()
			- added Pad.stampBackground()
			- new Cell.stampBackground() function
	- updated documentation
			
130903
	- added Phrase.fixedWord boolean attribute
		- for handling eg Arabic text on path
			- method used by Scrawl to calculate glyph widths doesn't work for Arabic fonts
				- because letters are position-sensitive - different glyphs for the same letter at beginning,middle, end of word
		- tested; works ok.
	- fixed scrawl.makeName()
		- had the potential for a buffer overflow if someone cloned and recloned over and over
		- also had to fix Sprite.clone(), Phrase.clone() to fit in with changes
		- had to update all the scrawl.makeXXX methods
		- tested in Firefox
	- Phrase multiline texts
		- Scrawl will now create and chain Phrase objects to handle multiline texts
			- works both with the factory method and with .clone()
			- new attributes and functions
				Sprite.callMethod()
				Phrase.head, .currentLine, .isHead, .lines, .lineHeight
				Phrase.multiline()
	- tested all demos in Firefox
		- fixed demo081 (space invaders)
			- aliens were not being covered by checkHitUsingImage
				- imageData was being reset to the bomb image each time a new bomb was created
				- solved by giving the alien template sprite a name!
	- updated documentation
	- updated tutorial
		- for text along path and multiline phrases, not load/save
	- tested new demos in other browsers
		- IE10
			- not keen on heavily decorated text - has issues clearing the canvas
				- rewrote demo to keep shadow stuff away from IE
		- Chrome
			- letters jiggle
			- multiline - repeated one line (of centered text)
		- Firefox - all good
		- Opera
			- mangles the Arabic text, but otherwise all seems fine
		- Safari (windows) - all seems fine
	- upgrade to v0.303
	- update website
	- upload to SourceForge
	- update GitHub
			
130902
	- bugfixes: path tracking
		- sprites no longer jump when passing from one sub-path to the next
		- sprite.path attribute can now be set during sprite creation (not after it) for all sprites
	- revisiting the Phrase object
		- text-to-path functionality added
			- major changes to Phrase object and functions
			- added Cell.restoreShadow(), Sprite.restoreShadow()
				- to handle bug where only initial letter of path phrases was getting a shadow (drawFill, fillDraw)
		- demo102 to test; also amended demo061
			- can't work out how to successfully bend Arabic fonts
				- added Phrase.fixedWidth, .fixedPhrase in an attempt to at least make Arabic phrases track paths legibly
		- tested in browsers
			- chrome 
				- has bad shaky letter syndrome
				- apparently a known bug in chrome that nobody's bothered to fix yet
			- all other browsers
				- works perfectly!
	- NEED TO:
		- tackle multi-line text
			- got some ideas on how to implement that easily
			- will be able to add the lineSpacing attribute
		- can also think of adding the letterSpacing attribute?
		- update documentation - Phrase section, paths section
		- upgrade to v0.303
			
130901
	- started GitHub account for Scrawl
	
130831
	- created two files
		- scrawl.js contains all the core functionality for drawing on canvases
		- scrawl+stack.js is the full API, including stacks
		- going to be issues about keeping both files in sync
			- but taking out the stack stuff makes scrawl.js a smaller file (thus more competitive?)
	- updated affected demos
	- moved to version 0.302
	- updated documentation
	- updated tutorial page
	- updated website
	- uploaded to Sourceforge
	
130830
	- complete overhaul of Pattern object
		- now loads images supplied as a .source attribute (rather than being pre-loaded) correctly
			- does lead to a timelag due to the use of an .onload() function
			- timelag is solved if sprites using the pattern are part of an animation loop
		- override the .clone() function to do a basic construction, not using any of the existing element's attributes
			- utter cheating, but cloning leads to big problems for Patterns
			- will eventually get rid of the .clone() altogether, once been through all demos to remove Pattern clones
		-rewrote demo040, for the testing of stuff
	- NEED to look at loading Picture images in similar manner
		- at the moment, all images need to be preloaded before they can be used with Picture sprites
		- not that it causes much of a problem for my demos, but people will be people ...
	- saving and loading of sprites
		- new scrawl functions - scrawl.load(), scrawl.save()
			- saving the sprites puts a JSON string in the scrawl.object part of the library
			- copy that string out to a DOM element and use scrawl.load(getElementById(elementID).innerHTML, function());
			- Scrawl will reconstruct sprites (including Picture and Pattern images) from string and carry on as normal!
		- new Scrawl.timestamp attribute
			- so every object gets a timestamp on creation
			- added because I have some vague ideas about comparing objects so changes can be sent over a network??
				- can always be removed later if nothing comes of the idea
		- new Sprite.getObjectData() function used with the scrawl.save()
			- overridden by Pattern, Scrawl, Shape, Picture - they have special needs
		- new Image.getImageData()
			- returns image data in toDataURL() format (always .png)
		- save/load only deals with sprites and stuff associated with sprites
			- eg Point, Link, both gradients, Pattern, Image, AnimSheet, Group
			- not touching Cells or above!
		- NEED to include a new section in the tutorial to cover all this stuff - but where? 
			- don't want it near the top - not that important ...
	- RENAME: Image object becomes ScrawlImage
		- obvious conflict with JavaScript's "new Image()" command
	- adapted some demos (096-101 - will be renumbered later) to test the new functionality
		- all but one (finally) works as expected in Firefox
		- 098 - colour at mouse cursor - data tables not triggering on initial load, page has to be refreshed
	- updated documentation
	- updated Patterns section of tutorial
	
130829
	- investigating the loading and saving of stuff ...
	
130828
	- fixed new Shape factories
		- render speeds vastly improved
	- fixed bug in Point constructor
		- was stopping demo045 from working
	- coded demo104 - remake of the carousel, using an ellipse and paths as the carousel frame
	- looking at tangents on path
		- current most annoying bugs: 
			- can't set .path attribute for Shape factories which use scrawl.makeCartesianPoints 
				- (.makeLine(), .makeQuadratic(), .makeBezier(), .makeEllipse(), .makeRectangle())
				- temporary fix: set .path attribute on sprite after it is created
			- animating things round an ellipse Shape leads to flickering where the ellipse curves join
				- temporary fix: add a tiny amount to the initial pathPosition eg 0.6000005 instead of 0.6
		- added:
			SubScrawl.pathRoll - path rotation value (degrees)
			SubScrawl.addPathRoll - boolean: true to add the path roll value; false by default
		- updates to:
			Sprite.getAngle(), Sprite.stamp(), Sprite.rotateCell(), Sprite.unrotateCell(), Point.recalculate()
		- done
			- all sprite types will now rotate along their paths
	- rough tests for scaling paths
		- seems to work in demos; not fully investigated
	- updated documentation
	- updated tutorial
	- moved to version 0.301
	- updated website
	- uploaded new version to SourceForge

130827
	- finalised initial work on path animation - the complete list of revisions is:
		- new Shape attributes and functions:
			.pointList - holds array of POINTNAMEs
			.linkList - holds array of LINKNAMEs for line, quadratic and bezier Link.species
			.linkDurations - array of Link lengths
			.perimeterLength - total length of Shape's visible Link objects
			.getPerimeterLength(bool)
				- if necessary (re)calculates, otherwise returns, .perimeterLength
				- if bool set to true, triggers recalculation
			.buildPositions()
				- helper function used to calculate .linkDurations values
			.getPerimeterPosition(number, var1, var2)
				- number between 0 and 1 - distance from first Link's start point to where measurement is to be taken
				- var1: boolean - false, uses midline calculations; true, uses distance travelled calculations
					- setting boolean to true will force sprite animated along path to show a constant speed
				- var2: boolean - true to calculate pathRoll value
				- returns {x:COORDINATE, y:COORDINATE, r:number} - r = pathRoll value
		- amended Link and Point constructors to add references to their Shape's .pointList and .linkList attributes
		- added new .set() functions to Link and Point, to add/delete references to Shape.pointList, .linkList
		- new Link attributes and functions:
			.sprite - SPRITENAME, specifically the Link's .startPoint Point's .sprite value
			.length - Link's current calculated length
				- if set to true in constructor, will calculate initial length
				- NOT to be used for setting a Link's length!
			.precision - number of segments used for calculating length; default: 100
			.positions - array of JavaScript objects describing end points for each generated segment
				- if set to true in constructor, will calculate initial segment lengths/coordinates
				- .positions[0] is the Link's .startPoint coordinates
				- object in the form of {
					x: segment end x coordinate, 
					y: segment end y coordinate, 
					length: segment length,
					cumulativeLength: length of all segments up-to-and-including this segment,
					}
			.pointOnLine(origin coordinate, destination coordinate, number between 0 and 1)
				- helper function
			.getPointCoordinates()
				- another helper function 
					- returns object {
						start: {x: value, y: value}, 
						end: {x: value, y: value},
						control1: {x: value, y: value},
						control2: {x: value, y: value}
						}
			.getPositionOnLink(number)
				- uses midline calculations
				- where number is between 0 and 1 - distance along Link's bezier lines to be used for generating coordinates
					- returns object {x: value, y: value}
			.getSteadyPositionOnLink(number)
				- uses distance travelled calculations
				- where number is between 0 and 1 - distance along Link to be used for generating coordinates
					- returns object {x: value, y: value}
			.getLength()
				- helper function
					- triggers this.setPositions()
					- returns Link's current length
			.setPositions(number)
				- calculates segment details, stored as object in Link.positions array
				- number represents (uses and/or sets) the Link.precision attribute
		- demos 96-100 for testing new routines finalised
		- added new attributes to SubScrawl:
			.path - SPRITENAME
			.pathPosition - number between 0 and 1
			.movePathPosition - (very small) number between 0 and 1
			.pathSpeedConstant - boolean - true for constant speed
			- can now very easily associate a sprite to a Shape sprite's path, for animation
			- amended SubScrawl.moveStart()
				- can now take 'path' value to 'automagically' advance sprite along path
				- no argument - does moveStart for .startX, .startY and .pathPosition
			- amended Scrawl.stamp()
				- will use .path value (if valid) in place of .startXY
					- pivot still has precedence (for drag and drop, etc)
			- various temporary demos to test coding
				- works!
	- added new Shape factories:
		- scrawl.makeEllipse()
			- produces ellipse Shapes
				- makes use of .radiusX, .radiusY attributes (not retained) to build ellipse
		- scrawl.makeRectangle()
			- produces rectangles with rounded corners
				- makes use of .width, .height to determine full width and height of sprite (not retained)
				- for corners (not retained):
					.radiusTopLeftX, .radiusTopLeftY, .radiusTopRightX, .radiusTopRightY
					.radiusBottomRightX, .radiusBottomRightY, .radiusBottomLeftX, .radiusBottomLeftY
					.radiusTopLeft, .radiusTopRight, .radiusBottomRight, .radiusBottomLeft
					.radiusTopX, .radiusTopY, .radiusBottomX, .radiusBottomY
					.radiusLeftX, .radiusLeftY, .radiusRightX, .radiusRightY
					.radiusTop, .radiusBottom
					.radiusRight, .radiusLeft
					.radiusX, .radiusY
					.radius
		- ISSUE - these new factory shapes are animating very slowly

130826
	- continuing work on path animation
		- hopefully will also lead to a new sprite factory - Oval (or Egg)
	
130825
	- started work on implementing functionality to allow a sprite to animate along a Shape path
		- lots of research on understanding maths behind bezier curves
		- began to add attributes and functions to Line object
		
130824
	- tracked down and fixed a serious bug in scrawl.deleteSprite()
		- function wasn't deleting sprite context objects
		
130822
	- minor bug fixes
	
130820
	- tutorial page updates
		- Groups section completed
		- Sprite collision zones section - completed
		- At-coordinate collisions section - completed
		- Field collision section - completed
		- Demos index - completed
		- updated demos: 47, 60, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84
		- removed demos: 30, 61, 62 (blank), 67, 70, 88, 90
	- update Scrawl.js to v0.300
		- remove (beta) tag!
	- test index and tutorial pages, and all remaining demos, in browsers (on fast PC)
		- Safari for Windows (v5.1.7)
			- index page: works to spec; very slow
			- tutorial page: all loads fine
			- demo failures:
				029 - no cat
				085 - broken - no video, no shuffling
				general - animations a bit slow and jerky
		- Internet Explorer (v10)
			- index page: works to spec
			- tutorial page: all loads fine
			- demo failures:
				028 - backface-visibility fail
				087 - cube is flat, only one side shows
				085 - video doesn't display
				034 - clock fine; panel selector not working properly
				general - animations good; fonts a bit weedy at times
		- Firefox (v23.0.1)
			- index page: 
				- works to spec now
					- overflow:hidden issue - directive not respected - adapted index page to hide bug
			- tutorial page: all loads fine
			- demo failures: none
				general - animations good
		- Opera (v12.16)
			- index page: works to spec
			- tutorial page: all loads fine
			- demo failures:
				028, 029, 032, 087 - Opera doesn't do CSS3 3d transforms yet
				054 - damn cow!
				general - animations sluggish
		- Chrome (v28)
			- index page: works to spec
			- tutorial page: all loads fine
			- demo failures:
				089 - rotating text can be a little bit on the shaky side
				general - animations very good
	- update website
	- upload v0.300 to SourceForge
		- spam the heck out of Twitter to promote the upgrade
	- fixed bug in scrawl.getCanvases() 
		- canvases requiring new stacks (ie with class="stack:STACKNAME") not being set to position:absolute
	
------------------------------------------------------------------------------------
130819
	- re-tweaked the website index page - experimenting
	- tutorial page updates
		- AnimSheet section completed
			- reworked both the AnimSprite and Picture functions to simplify stuff
				- got rid of sprite-sheet specific functions
					- handle everything now though Picture.get() and .set()
			- as a by-blow, also gave Sprite an overriding .get() function
				- should now be able to get styling data direct from a sprite
		- Shape section - completed
		- Hand-coded Shapes section - completed
			- fiddled around with Point.fixed
		- Gradients section - completely rewritten
		- Pattern section - completed
		- display cycle - completed
		- clear - no change
		- stamp - no change
		- compile - completed
		- show - no change
		- render - completed
		- animation - no change
		- animating sprites - completed
			- new demo 95 (adapted from 41, now used elsewhere)
		- sprite pivots - completed
		- sprite to mouse - completed
		- drag and drop - completed
		- cell position - completed
		- cell transforms - completed
		- pad transforms - no change
		- updated demos: 
			19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 
			48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 80, 81, 82, 83, 89, 91, 92, 95
		- updated index for new Picture spritesheet animation stuff
		
130816-18
	- new index page bug discovered on Firefox (18 Aug)
		- carousel overflow:hidden style not being respected
		- temporary fix by supplying landscape logo img element with a background-color
	- tutorial page updates
		- Pads and cells section - completed
			- includes walk-through of demo037 - cloned as demo093 - magnifier over image
		- Stacks section - completed
			- includes walk-through of cat running through 3d terrain demo029
		- Scrawl sprites section - completed
		- Blocks section - completed
		- Wheels section - completed
		- Phrases section - completed
		- Pictures section - completed
		- updated demos: 5, 7, 10, 11, 13, 14, 15, 17, 18, 28, 29, 32, 33, 38, 41, 53, 85, 86, 87, 93
		- removed demos: 4, 6, 8, 9, 12, 16 - too basic or repetitive for my needs
		- new demo094 - examples of globalCompositeOperation
		
130815
	- working on tutorial page
		- 'HTML5 page' - completed
		- 'Scrawl library' - deleted
		- new 'Using Scrawl' section added to replace Scrawl library
			- includes a complete walk-through description of implementing the carousel demo038
		- started work on a new 'Scrawl sprites' section
			- will remove the repetition from other sprite sections
		- updated demos: 1, 2, 3
	
130814
	- documentation overhaul completed
		- will need a final proofread ...
	
130813
	- Scrawl website index page completed!
		- new images
		- refined canvas examples
		- responsive to browser capabilities and screen sizes
	- started work on overhauling the documentation
		- reached Cell section
	- will need to rewrite tutorial page, in particular:
		- stacks
		- gradients
	- had an idea to use a YouTube video for the Tour section
		- more embarrassing, but a lot easier to do
		
130812
	- work on the index page continues
		- monor tweaks to various Scrawl.js functions to repair newly discovered bugs
		
130811
	- still working the website index page
		- got the non-canvas version working as designed
			- tested in IE9, FireFox, Chrome (on Windows7 laptop)
			- need better images!
	- started to re-import canvas routines
	
130810
	- developing new responsive website index page ...
		- got the basics in place - it responds to resizing as I want it to ...
		- all that's left to do is the carousel routines, and adding in the code for the various canvases
		- fixed bug in scrawl.getStack() 
		
130809
	- finished updating code base
		- major tinkerings with scrawl.makeLine(), .makeQuadratic(), .makeBezier()
			- all three now set their first point's .fixed attribute to the sprite's name
		- changes to some of the object constructors
		- overhaul of Shape object working, in particular for cloning Shape objects
			- changes to Point and Link object code
		- a shedload of fixes to demo code and scrawl.js code to fix all the stuff broken by the recoding exercise
	- tested all demos in browsers
		- Chrome
			- all demos work
			- animation: fast, smoothest
		- Firefox
			- all demos work
			- animation: fast
		- Safari
			- video issues (085)
			- all other demos work
			- animation: slow
		- IE10
			- video issues (085)
			- selector issues (034)
			- CSS3d issues (028, [029], 032, 087)
			- all other demos work
			- animation: fastest
		- Opera
			- CSS3d not supported (028, 029, 032, 087)
			- cow image issue (054)
			- all other demos work
			- animation: slowest
	- all the changes have definitely broken the website index page!
		
130808
	- review of scrawl.js internal workings
		- decided to rationalise all the various existence tests included in the file
			- new scrawl.xt(item) - returns false if item is undefined; true otherwise
				- scrawl.xto([item,item,etc]) - returns false if all of the items are undefined
				- scrawl.xta([item,item,etc]) - returns false if any of the items are undefined
			- new scrawl.isa(item,string) - returns true if item is defined, and is of the type requested in the string
				- string can be:
					'bool', 'boolean'			- boolean
					'num', 'number'				- number
					'str', 'string'				- string
					'fn', 'func', 'function'	- js function object
					'arr', 'array'				- js array object
					'date'						- js date object
					'obj', 'object'				- user-defined object
		- started going through code base to update all neccessary lines to use these new functions
			- and also fix other inelegant/questionable code (eg get rid of all the try/catch stuff)
				
130807
	- attempted to redesign the website index page - abandoned
	
130806
	- working on Designs - gradients
		- rewrote a lot of the Design object tree
			- because gradients were boring
		- specifically: changed the Design.color attribute
			- now uses arrays of color point objects ... [{color: STRING, stop: NUMBER},{color: STRING, stop: NUMBER}, etc]
		- added gradient animations!!!
			- new Design.roll attribute added to color stop values to animate gradients
			- new Design.handleX, .handleY, .handleStartX, .handleStartY, .handleEndX, .handleEndY
				- for manipulating gradient start and end points
			- new Design.setDelta(), .makeGradient(), .sortStops(), .applyStops() helper functions
			- new Design.update() function to make gradient animations work
			- complete rewrite of Design, Gradient and RadialGradient constructors
			- fixed demos 029, 050
			- new demo091 (concentric, animated circles at mouse) to test gradient animation
			- new demo092 - move a spotlight over image (like in Gardens of Time)
			- unfixed bugs:
				- animations don't seem to work with all sprites
					- but always seem to work on sprites generated by cloning
				- using a color stop value of 1 can cause problems
					- workaround by using 0.9999 instead of 1
	- tested all demos in browsers
		- Firefox, Chrome - all good
		- Opera - all good except for the CSS3d stuff (and that damn cow)
		- Safari 
			- demo085 - won't display/play the video
			- otherwise, all good; even fixed demo029
		- IE10
			028 - backface visibility doesn't work
			029 - safari fix broke IE10; kludged a fix, but doesn't look as good as on other browsers
			032 - not doing the CSS3d stuff
			034 - selectors for clock still not working
			085 - won't display/play the video
			087 - definitely not a cube, but looks kinda pretty
	- NEED TO:
		- fix the index page - changes to Scrawl.js have broken it
		- rewrite the tutorial sections on ...
			- Starting Scrawl.js - automatic import of stacks, canvases, elements
			- Stacks
			- Gradients
		- update the documentation - now a serious job
		- when all that's done, upgrade to v0.209(beta)
		
130804-05
	- working on stacks stuff
		- new Scrawl.initialize() function for automatically populating the library object when starting Scrawl.js
			- Scrawl.getCanvas() replaced by .getCanvases() helper function
			- new Scrawl.getStacks(), .getElements() helper functions
			- scans for any element on page with class='scrawlstack'
				- imports them as stacks
				- sets all children of stack elements to position:absolute
			- scans for canvas elements
				- checks to see if parent element is stack
				- if element has class="stack:STACKNAME", appends canvas to stack element
					- if stack doesn't exist, creates it
			- scans for elements with classes='scrawl stack:STACKNAME'
				- moves found elements into named stack
		- edited Scrawl.addCanvasToPage(), .addStackToPage()
		- developed demo090 for testing initialization changes
	- big overhaul of the Cell object
		- added Cell.usePadDimensions (boolean), Cell.getPadWidth(), Cell.getPadHeight()
		- rewrote Cell constructor, Cell.copyCellToSelf()
		- added Cell.set()
	- overhaul of stack scaling
		- mainly to get the frogger demo (083) working
			- also fixed the kill frog bug in demos082-3
	- CSS3d tinkering
		- fixed all CSS3d demos
			- except for 087 (spinning cube) - not working in IE10, but at least it looks pretty
			- 034 (kaleidoscope clock) - can't get selectors to work in IE10
			- 028 spinning card - backfaceVisibility:hidden not working for IE10
			- 029 cat animation in 3d environment - not positioned correctly in Safari
	
130803
	- MAJOR changes
		- revising CSS3d stuff
		- complete rewrite of Stack, Element, Pad constructors and functions
		- rewriting all the routines for automatically picking up canvases, elements, stacks when starting Scrawl.js
		- all CSS3d stuff now placed into Scrawl3d object
			- parent: SubScrawl; children: Stack, Element, Pad
		- got everything except the stack demos working again
			- broken: 001, 002, 028, 029, 030, 031, 032, 033, 034, 083, 087
				- also: frogger game demos (082, 083) - frog still moves after killed
	- need to redo linking between stacks, pads and elements
	- need to redo functions for
		- creating new stacks
		- creating new canvas elements
		- moving canvases and elements into stacks
		
130802
	- tinkering ... not happy with the whole stack thing
		- need to think more about importing canvases, elements
		- what gets turned into a stack, when, why, how
		- will mean breaking the library, but what the heck ...
		
130801
	- divided the Scrawl function into 2 separate objects, one inheriting from the other
		- purpose: not every child needs all the functionality
		- Scrawl looks after name, title, comment, get(), set(), clone(), toString()
		- SubScrawl looks after everything else
		- inheriting from Scrawl:
			- SubScrawl; Context; Image; AnimSheet; Design (Gradient, RadialGradient, Pattern)
		- inheriting from SubScrawl:
			- Stack (Pad, Element); Cell; Group; Sprite (Block, Phrase, Picture, Wheel, Shape); Point; Link
		- decided there's no need to mention this stuff in the tutorial
	- minor edit to scrawl.getCanvas() to fix variable detritus ending up in the global scope thingy
	- upgrade to version 0.208b
	- updated documentation
			
130731
	- finalised demo087
		- tweaked scrawl.addNewCanvas() - now does a set() on the new Pad object
	- upgrade to version 0.206b
	- updated ducumentation
	- updated tutorial page
		- rewrite of stack section
		- added latest demos
		- added a demo list section
	- uploaded revised website
	- uploaded new version to Sourceforge
	- sprite rolling: Phrase, Picture, Block
		- moved sprite attributes - roll, degree, angleDegrees - into Sprite constructor
			- so Phrase, Picture, Block inherit them
			- angleDegrees is the Shape version of sprite.degree
				- ancient error that needs to be rectified!
		- new sprite helper functions: sprite.rotateCell(canvasContextObject, CELLNAMEstring), .unrotateCell(sameasbefore)
		- recoded all the Phrase, Picture, Block stamping functions to take into account roll values
			- .clear(), .draw(), .fill(), drawFill(), .fillDraw(), .floatOver(), .sinkInto()
		- coded up demos 088, 089 - to test the new functionality
		- recoded demo087 to make use of new functionality
		- checked all other demos to see if anything broke
			- broke the clock and vector demos (034, 059)
				- also broke the clock on the index page
				- fixed by adding new sprite.rollable attribute
					- default = true; false blocks the sprite interfering with cell roll functionality
					- in other words, if a sprite is stamped on a rotated cell, best set rollable to false to save headaches
					- only pertinent for Phrase, Picture, Block
	- upgrade to version 0.207b
	- updated ducumentation
	- updated tutorial page
	- updated website
	- uploaded new version to Sourceforge
	
130730
	- continuing with demo087
		- deleted stack.setPitch(), stack.setYaw(), stack.setRoll()
		- deleted stack.setTranslateX(), stack.setTranslateY(), stack.setTranslateZ()
	- updated demo028, 029 - changes broke them
	- updated website home page
		- fixed site for browsers that don't use window.matchMedia()
			- site wasn't working for IE9
		- fixed stack demo on webpage
		
130729
	- started working on demo 087 - spinning css3d cube
		- added stack.translateX, stack.translateY, stack.setTranslateX(), stack.setTranslateY()
			- cuz startXY does NOT do horizontal/vertical css3d work
		- added stack.setTransform() to handle css3d translations
		- updated stack constructor, stack.set, stack.setDelta
		- animation not working in IE10; does work in chrome, safari, firefox
		
130723
	- coded demo 086 - interactive data graph
		- no changes to library
		
130712
	- finalised demos 084, 085
		- experiments with importing video elements into the library as Images, and using them with Picture sprites
		- minor bug fixes and improvements to scrawl.js
	- updated to version 0.205(beta)
	- updated tutorial to include video
	- updated website
	- uploaded new version to Sourceforge
	
------------------------------------------------------------------------------------
130613
	- finalised demo083 - making demo082 dynamically resizable
		- fixed small bug in Element constructor that was causing elements to double their height values
	
130612
	- coding demo083 - making demo082 dynamically resizable
	
130610
	- debugging frogger pastiche
		- minor bug in Block.checkHit(), Picture.checkHit() fixed
		- final graphics for game completed
	- updating Scrawl.js to 0.204b
	- added demo082 (frogger) to tutorial page
		- updated website
		- updated documentation
		- uploaded new version to SourceForge
	
130609
	- finalising code for frogger pastiche
	
130608
	- initial coding for frogger pastiche completed
	
130607
	- started planning out a frogger pastiche (for demo082)
		- fixed bug in scrawl.getImageDataValue, Picture.getImageDataValue
		
130603
	- finalised demo081 - space invaders pastiche
		- tested demo in all browsers - works
	- upgrading library to v0.203b
	- updated documentation
	- adding demos 80 and 81 to tutorial page
	- updated website
	- uploaded new version to SourceForge
	
130602
	- continuing with demo081
		- recoded all sprite 'clear' stamping functions - to make them work
			- now use context globalCompositeOperation = 'destination-out' - works well
		- recoded scrawl.deleteSprite() function
			- major bug - wasn't clearing sprites from the library
		
130601
	- space invaders clone - demo081
		- initial coding
		- things show up on the screen; things blow other things up
		
130531
	- started coding up a space invaders clone
		- planning out the game mechanics
		- designing graphics
		
130529
	- coding demo080 - spirograph-like simulation
		- seems to work in all browsers
			- added the Maxthon browser to list of browsers for testing
		
130528
	- Stack.scaleStack() function coded and implemented
		- various minor changes to affected functions and classes
		- updated homepage (now index page) to take advantage of stack scaling
			- including importing carousel control buttons into the stack
	- updated documentation with new functionality
	- rewriting tutorial sections to match current functionality of library 
		- largely done - any mistakes left on the page are probably proofing errors
	- update to version 0.202b
	- update website
	- load latest version to SourceForge
	
130527
	- experimenting with moveStartXY for stacks, elements, pads
		- new Stack.shiftPosition(), shiftLeft(), shiftTop()
		- new scaleStack() - not yet coded up
		
130526
	- building an interactive, responsive design home page for the website
		- 04 clock - done
		- 07 3d scene - done
			- after some glitches - perspective needs to be scaled alongside everything else
	- testing new home page in browsers (on fast PC):
		Safari for Windows - slow, but working as expected - except for the 3d demo (as expected: known bug)
		Opera - as slow as Safari, but works entirely as expected
		IE10 - entirely as expected
		Chrome - works as expected, though slows down a bit at smaller(!) sizes
		Firefox - works as per spec
	- upgraded library to v0.201b
	- uploaded new home page to website
	- uploaded library to SourceForge

130525
	- building an interactive, responsive design home page for the website
		- converting static canvases into their (inter)active counterparts
			- 01 bezier curves - done
			- 03 collisions - done
			- 05 magnifier - done
				- added scrawl.setDisplayOffsets(item) - item in ['all','stacks','pads','elements',null]
					- for when things move within the stack
			- 06 carousel - done
			- 02 cloning - done
				- amended Stack.setLeft(), Stack.setTop() 
					- both now have a second argument - boolean - when true, will recalculate display offsets
				- amended Stack.setPosition - automatically recalculates display offsets
				- tracked down a serious bug in Picture.checkHit()

130524
	- building an interactive, responsive design home page for the website
		- static (but responsively designed!) home page completed
		- adapting page for websites that DO support canvas element
			- using Modernizr to identify such websites
		- fixed bugs in Stack.set - wasn't recognising 0 as a valid input.
		
130523
	- building an interactive, responsive design home page for the website
		- building the static site for browsers without canvas support
		- investigating responsive design eg @media in css files
		
130522
	- building an interactive, responsive design home page for the website
		- planning the website: concept; requirements; navigation; etc.
			- must be simple; must sell Scrawl.js rather than explain it
				- explanations and stuff can go in other pages
			- simple navigation - four links: 
				- Tutorial (tutorial page)
				- Tour (whizzy presentation page - to be coded up later)
				- Download (SourceForge page)
				- About - basic stuff like stable and development versions, me, etc
			- include a scalable, flat left-to-right carousel showing example canvases at work
			- absolutely must conform to the responsive design thingy: portrait vs landscape; different screen sizes; browser resizing; etc.
		- creating graphics - logo, button
		
------------------------------------------------------------------------------------
130521
	- documentation rewrite completed
		- minor bug fixes here and there - mainly to return this rather than always true
	- upgraded Scrawl.js to v0.200(b)
		- updated website pages to indicate that this version is 'usable'
			- inasmuch as, function names and object attributes are going to be fixed from this point on
	- uploaded new webpages to website
	- uploaded to SourceForge
	
130520
	- MAJOR CHANGES
		- made Pad and Element objects children to the Stack object
			- because there was too much CSS3 confusion between Stack/Pad/Element objects
		- moved all the Element functions into Stack
		- removed a barrowload of Pad functions - inherits from Stack
		- much debugging to fix broken demos and Examples
			- recoded a number of functions to get things working again
			- but no amendments to the demos/examples themselves
			- all now work as per spec in Firefox and (as far as possible) IE10
	- continuing with the documentation overhaul

130519
	- continuing with the documentation overhaul

130518
	- demos function to load them into tutorial page
	- complete overhaul of the documentation
		- to bring it into line with what's real

130517
	- recoding tutorial page
		- moved all examples into a separate javascript file
		- code now added to tutorial page on window.onload
	- recoding demo pages
		- all pages now have the same format and similar CSS
			- for presentation purposes
	- tutorial collisions sections completed
	- TODO:
		- update documentation, and thoroughly recheck it
		- review tutorial page 
			- there's been a number of significant changes which have taken place after early sections were written.
		- once reviews are finished, upgrade Scrawl to v0.1(b) and release it into the wild
		- start designing a snazzier index page
			- needs to SELL Scrawl.js, not EXPLAIN it
			- make it simple, elegant, responsive - knockout!

130516
	- fixing barrowloads of bugs caused by yesterday's wholesale changes
		- recoding demos and Examples
		- tested everything in browsers until all were working again
	- Group.groupXY renamed to Group.startXY
		- brings groups into line with everything else
	- new Group.addSpritesToGroup(), .removeSpritesFromGroup() functions
	- collision demos seriously rewritten to make sense of changes
	
130515
	- working on tutorial page - still finishing off the collisions sections
		- redesigned the Cell field collision detection system
			- added Sprite.fieldChannel, Sprite.fieldTest attributes
			- demo079 - to test sprites using color channels in field detection stuff
		- added directionality attributes and functions to Scrawl object
			- which should take away a fair amount of extraneous coding in the examples and demos
			- moved .startXY, .handleXY .scale from Sprite to Scrawl
			- added moveStart(), moveHandle(), exchange(), reverse() functions to Scrawl
				- NEED to recode all Examples and demos to make use of new functionality!
				- NEED to revisit Classes that make use of .top and .left - see if startXY can replace them
				- tested in demo079 - seems to be working okay ...
	
130514
	- working on tutorial page - continuing with the collisions sections
		- demos 076-78 - to demonstrate collision points around various sprites
		- finished writing up Sprites collision zones tutorial section

130513
	- bug tracking ...
		- changed:
			- combined Group.getSpriteXRange(), getSpriteYRange() into .getSpriteRange(item)
				- where item = 'X', 'x', 'Y', or 'y'
				- amended Group.setHandles()
			- Phrase.clear(), .draw(), .fill(), drawFill(), fillDraw(), .sinkInto(), .floatOver()
				- all were failing to take .scale attribute into account when calculating font size
		- new: 
			- Group.getBetweenGroupSpriteHits(arg)
				- where argument can be GROUPNAME string, or Group object
				- returns an array of arrays, where arrays are [SPRITENAME, SPRITENAME]
	- coded demos 73-75 to test various collision scenarios
		- group offsets (groupXY)
		- collisions between: Block, Phrase, Picture, Wheel, Shape
		- wheel radius vs wheel inShape
		- shape radius vs shape inshape
		- Pictures using image data tables
	- tested everything in various browsers
		- on a good PC running Windows 7
		- Firefox (20.0.1)
			- all good
		- Opera (12.15)
			- slow on: Ex04(carousel); in fact all animations are slower than in other browsers
			- broken on: demos028-29, 32 (CSS3d stuff), 054 (still hates that cow)
			- otherwise, all works
		- Safari for Windows (5.1.7)
			- demo029 - cat still behind ground
			- demo054 (SVG animation) not working
			- otherwise, all good (slightly better than Firefox?)
		- IE10 (update 10.0.4)
			- demo028 - still need to sort out the CSS3 back image display thingy
			- demo032 - still got the ghosting on rotating CSS3 elements
			- demo034 - return of the dratted 'can't select options from HTML selector thingy' problem ...
			- otherwise very good - possibly too fast?
		- Chrome (26.0.1410.64 m)
			- demo032 - unexplicably slooooow
			- rest are good - still the smoothest animations
	- updated documentation
			
130512
	- experimenting with in-group and between-group collisions
		- changed:
			- Sprite.makeCollisionPoints() changed to Sprite.parseCollisionPoints()
				- convert user-supplied .collisionPoint into Scrawl .collisionPoint
					accept from user	converted to:
					'start'				'start' (default)
					'north'				'N'
					'northeast'			'NE'
					'east'				'E'
					'southeast'			'SE'
					'south'				'S'
					'southwest'			'SW'
					'west'				'W'
					'northwest'			'NW'
					'edges'				'N', S', 'E', 'W'
					'corners'			'NE', SW', 'SE', 'NW'
					'perimeter'			'N', 'NE', 'E', SW', 'W', 'SE', 'S', 'NW'
					'center'
					'all'
					'endpoints'			list of POINTNAMES making up a Shape object's end points
			- updated various .set() and .clone() methods to cover collision points
			- sprite constructors, to take on board the needs of .collisionPoints attribute
			- scrawl.makeLine(), .makeQuadratic(), .makeBezier(), .makeRegularShape()
				- to get .collisionPoint data registered on the Shape object
		- new: 
			- Group.getFieldSpriteHits()
				- returns an array of arrays, where arrays are [SPRITENAME, {x: coordinate, y: coordinate}]
			- Group.getInGroupSpriteHits()
				- returns an array of arrays, where arrays are [SPRITENAME, SPRITENAME]
			- Phrase.getCorners() separated out of Phrase.checkHit()
			- Phrase.getCollisionPoints()
			- Block.getCollisionPoints()
			- Wheel.getCollisionPoints()
			- Shape.getCollisionPoints()
			- Picture.getCollisionPoints()
		- (re)coded demos 61,72 to test new functions
			- not quite working as expected yet
			
130511
	- fixed breaks in Examples and demos caused by yesterdays changes re collision detection and color retrieval
	- new demo061 - balls and stars collisions (from Index page Example)
		- removed collisions demo from Index page
		- WANT TO INTERNALISE some of the sprite vs sprite collisions testing
	- demos 062-071 for testing collisions on sprites
		- fixed bugs in spot coordinate collisions routines
			- more updates to scrawl.getImageDataValue(), Picture.getImageData, Picture.getImageDataValue
				- imageData is now actual size - all tweaks for scale, offset, etc take place in the Picture functions
				- NEED to check equivalent functions in Cell object
	- new:
		- Sprite.collisionPoints - an array of POINTNAMEs to be used as collision points
		- Sprite.makeCollisionPoints(), Sprite.addCollisionPoints(), Sprite.removeCollisionPoints()
	
130510
	- working on tutorial page - collisions
		- wrote the Groups section
	- significant updates to:
		- scrawl.getImageDataValue()
		- Wheel.checkHit()
		- Picture.getImageData()
		- Picture.getImageDataValue()
		- Picture.checkHit()
		- Shape.checkHit()
		- Picture.clone() 
			- function now accepts a 'keepCopyDimensions' flag attribute
			- defaults to false
	- new:
		- Group.setDelta() - handles groupXY, handleXY
		- Wheel.checkHitUsingRadius - boolean, default: true
		- Picture.imageDataChannel - string, default: 'alpha'
		- Picture.checkHitUsingImageData - boolean, default: false
		- Shape.checkHitUsingRadius - boolean, default: false
	- (changes supercede those made 2 days ago)
	- updates move data on how an object is to be checked for spot collisions into object attributes
		- no need to pass these things as part of .checkHit() functions' arguments
		- Shape collision detection can now take into account space - using JavaScript .isPointInPath() function;
		- Wheel collision can now use radius or .isPointInPath
		
130509
	- minor editing to the website tutorial page
	- updated website
	
130508
	- fixed Picture.getImageData()
	- recoded scrawl.getImageDataValue(object)
		- where object includes {table: TABLENAME, x: NUMBER, y: NUMBER, channel: STRING}
			- channel string one from: 'red', 'green', 'blue', 'alpha', 'color'
			- all attributes required - no defaults!
	- recoded Picture.checkHit(object)
		- where object includes
			x: NUMBER (required)
			y: NUMBER (required)
			test: NUMBER (default 200) - minimum threshhold test, values 0-254 (255 will always return false)
			channel: STRING (default 'alpha') - one from: 'red', 'green', 'blue', 'alpha'
		- NEED TO TEST on scaled Picture sprites with image data tables!!
	- experimented with using image data stuff for Shape collisions
		- couldn't figure out an efficient way to do it
		- fixed silly bug in Shape.checkHit(), Picture.checkHit()
	- (re)fixed Cell.rotateCell()
	- scrawl.imageDataWebWorker officially dumped
	- updated documentation
		- upgraded version to v0.021(b)
	- updated website
		- checked all Examples and Demos in firefox
	- uploaded new version to SourceForge
				
130507
	-complete overhaul of collisions
		- no longer using image data tables (for anything!)
		- substantial rewrite of a number of functions dealing with collisions and detection
		- Cell objects now get additional groups - CELLNAME_field, CELLNAME_fence
			- rewrite of Cell constructor and Sprite functions associated with assigning sprites to field/fence
			- retired Cell.field, Cell.fence attributes
		- demo060 now working
			- color picker demos not working
			- drag and drop broken
			
130506
	- recoded Cell.transformCell() to accept absolute (not relative) values
		- fits in with Scrawl's 'absolute, not relative' worldview re cell transforms
	- finished coding Group.getSpriteXYRange() functions
	- experimenting with collisions - sprites as 'fields' and 'fences'
		- added Cell.fence array
		- rewrote scrawl.buildFields(), cell.buildField(), Sprite constructor, Sprite.setSpriteToCellFields(), Sprite.setSpriteToCellFences()
		- the results work for Block, Wheel, Shape
			- had to fix bug in the scrawl.makeXYZ factory methods for lines and curves (.closed always defaulted to 'true')
		- cloned sprites weren't registering as fields or fences
			- rewrote Sprite.clone() to accommodate .field and .fence attributes in the clone argument object
				- can't clone them directly - .field and .fence are attributes of the Cell object, not the Sprite object
		- should work for Picture and Phrase - needs to be tested
		- results take (a lot of) time to calculate
			- maybe make use of the web worker?
				- tried it, breaks code - possibly use a callback function in Cell.getImageData?
			- thinking of using multi-channel fields (red, green, blue) - takes just as long to calculate 3 tables as it does one.
		- coded up demo060 for experimenting with fields/fences
	
130505
	- completed cell positional animation section of tutorial
		- moved Example12 (parallax scrolling) over to demo052
		- updated index page - removed Examples01, 12
	- moved Examples 02 (curves as shapes), 03 (holes in shapes), 04 (basic text), 06 (svg cow) to tutorial 
		- as demo053, 054, 055, 056
		- updated index page to remove Ex02, 03, 04, 06
	- moved (now) Example03 (spinning lines) to tutorial as demo057
		- updated index page to remove Ex03
	- moved (now) Example04 (sprite sheet) to tutorial as demo058
		- updated index page to remove Ex04
	- completed cell transforms animation section of tutorial
		- extended Cell object with new .shearXY attributes
		- rewrote Cell.transformCell() to properly handle javascript transforms
		- fixed bug in Cell.rotateCell()
	- completed the animations section of the tutorial page
	- upgraded Scrawl.js to v0.0203(b)
	- updated documentation
	- updated website
	- uploaded new version to SourceForge
	
130504
	- new scrawl library functions and attributes:
		- getImageDataValue(table, items, varY)
			- where table = nameoftable string
			- items = object containing x and y attribute
			- or items = number = x coordinate, varY = number = y coordinate
			- includes error capture - returns false if:
				- table doesn't (yet) exist
				- arguments not good
				- coordinates out of bounds
		- .imageDataWebWorker
			- path to the imageDataWebWorker.js file; default is null
	- amended Cell.getImageData() to look for scrawl.imageDataWebWorker
		- will use web worker when found; otherwise uses getImageData helper functions
	- updated demo018, Example006 (both color at mouse cursor demos); example015 (cloning sprites)
		- all now make use of web worker
		- demo018 and Ex006 make use of scrawl.getImageDataValue()
	- updated Picture section of tutorial to explain how to use these inovations
	- completed drag-and-drop section of the tutorial
		- Example015 recoded as demo050; removed from index page
	- added Cell.setDelta() function for sourceXYWH, targetXYWH attributes
	- working on cell positional animation section of the tutorial
		- Example01 (cell animation) recoded as Demo051
	
130503
	- fixed Chrome issue of leaving a blank line at the top of canvas
		- amended Sprite.getStartXY functions - were adding 0.5 to positions
	- coding Example07 (drag and drop) over as Example049
		- fixed bugs in Picture.checkHit
			- returns false if xy values are out of bounds for the dataImage array
			- makes calculated xy values integers before test
		- removed Ex07 from index page; renumbered other examples
	- investigating the use of web workers to speed up imageDataTables creation
		- or at least to stop the process stalling the rest of page layout and javascript stuff
		- significant changes to Cell.getImageData() function
			- added Cell.saveDataTables() and Cell.buildDataTables() functions
			- new javascript file - imageDataWebWorker.js
				- need to figure out ways of either internalising this file, or devising ways for coder to tell Scrawl where file lives
		
130502
	- fixed demo047
		- added new Group functions: .setHandles(), .getSpriteXRange(), .getSpriteYRange()
		- amended Group.stamp(), Sprite.stamp()
			- GROUPNAMEs can now be used as a pivot
			- Group handleXY can be set using Group.setHandles({x: value, y: value})
				- where x: 'left', 'center', 'right', or number
				- where y: 'top', 'center', 'bottom', or number
			- Group.groupXY attributes can now be used for collision detection with cell field
	- Example018 broken (probably from yesterday's changes to Picture.clone() function)
		- now fixed; checked against demo047 - still works
	- other broken stuff - pivoted labels: demo007, demo013, demo014,
		- (but not 027, 036, 046)
		- fixed - minor amendments to Group.stamp() and Sprite.stamp()
	- tutorial page
		- finished coding up animating sprites, sprite pivots, sprite-to-mouse sections
			- moved Example003 (blue wheel at mouse) over to demo048
			- removed Example001 (spinning icons around group animation) - not as clear as demo047
			- renumbered Examples on index page
	- thinking about accessibility issues (after reading http://blog.smartbear.com/software-quality/bid/283454/All-About-HTML5?utm_source=html5weekly&utm_medium=email)
		- added new .title and .comment attribute to the Scrawl object
			- allows all Scrawl objects to have text titles and comments attached to them 
				- might be of some help as would allow eg
					- javascript to speak out titles/comments when mouse hovers over a sprite?
					- dynamic 'tooltip' substitutes?
	- updated documentation
		- upgraded Scrawl.js to v0.0202(b)
	- updated website
		- testing live site in browsers:
			- in all browsers
				- Example03 (curves) - not triggering when user first clicks on button; repeated clicks on button breaks up the lines
			- Firefox
				- all working as expected (no surprise)
			- Safari (windows)
				- Example06 (color under mouse) - stalling (though no problems in demo018, which repeats the color under mouse thingy)
				- Example08 (svg cow) - taking its time to load
				- all demos - insist on opening in new browser instance, not new tab (local preferences issue?)
				- demo029 - cat running behind ground - zIndex issue?
			- IE10
				- demos with text - text seems thinner than in other browsers (maybe include more reliable IE friendly font in font attribute?)
				- demo028 (cards on y axis spin) - backface visibility issue not resolved
				- demo032 (HTML elements) - some ghosting on spinning elements
			- Opera
				- Still hates the SVG cow (Ex08)
				- Example012 (carousel) - painfully slow (on fast PC)
				- CSS3d in stacks - not implemented in Opera
				- generally slower on the animations compared to other browsers
			- Chrome
				- demo032 (animating HTML elements in stack) - runs very, very slowly
				- demo017-018, 037 (copies part of image to Picture) - leaving visible white line at top of canvas
	- uploaded new version to SourceForge
	
130501
	- added new functionality to Point.fixed attribute
		- setting attribute to SPRITENAME string will make the sprite act like the point's pivot
		- coded demo046 to demonstrate it - user-defined bezier curve
		- added text and demo to tutorial page
	- working on demo047, Group.setHandles() - not shifting group sprites as expected ...
		- tinkered with a new Picture.clone() function
		
130430
	- cleaned up the main.js file for the website index page
	- NAMECHANGE: 
		- Cell.rotation changed to Cell.roll
		- Cell.rotationDegree changed to Cell.rollDegree
			- to match up with the rest of Scrawl
	- tutorial page 
		- completed display cycle sections
		- started work on animation sections
			- fixed small bug in Sprite.checkField() - was over-compensating for block handles
			- coded up demo041-43 - uses Examples 1 (block anim), 6 (star anim) and 19 (pivot points anim)
			- removed Examples 1, 6 and 19 from Index page.
			- removed Example 11 (sprite order) from index page - too boring for words
			- added demo44
			- moved Example16 (snake) to demo045 - Examples 17-19 renumbered
		- animation cycle and animating sprites sections completed
	
130429
	- completed display cycle sections of the tutorial page
		- used demo034, demo037 in the display cycle section
		- recoded Group.stamp(), Sprite.stamp(), Sprite.forceStamp()
			- so they only take one argument: either a method string, or an override object
			- tested all Examples and demos in Firefox - working fine
		
130428
	- completed colours and gradients section of the tutorial page
		- fixed bug in Gradient.makeDesign()
		- moved Examples01 and 02 over to tutorials page (as demo039, demo040)
			- other Examples renumbered.
		
------------------------------------------------------------------------------------
130427
	- Two Month Anniversary!
	- fixed Example17 - vectors
		- tested in Firefox, IE10, Safari-for-Windows - works
	- fixed demo027 - rotating star
	- fixed demo034 - kaliedoscope clock
	- fixed Example19 - kaliedoscope clock
	- fixed Example20 - parallax scrolling
		- all issues were being caused by poor coding in the Point constructor - fixed!
	- completed making shapes section of tutorial page
	- simplified the Image object
		- much of this stuff now overtaken by Stack/Element
	- upgraded Scrawl.js to version 0.02(b)
		- all the stack and element work deserves such an upgrade
			- need to finish collision stuff before going for v0.1(b)
	- updated documentation
	- updated website
	- uploaded to SourceForge
	- demo037 - magnifier effect
	- demo038 - carousel selector
		- to show off on Twitter ...
		
130426
	- tutorial page
		- finished of stack section
			- moved Example 20 into tutorial as demo34
		- started making shapes section
			- new demos 35, 36
	- somehow managed to break the shape-making factory method while fixing a bug in the Point.setPolar() method
		- Example 17 (vectors), 19 (kclock), 20 (scrolling)
		- Demo 27, 34
			- vectors should be easy to fix ???! - do similar to demo 36 (which works very well)
			- kaleidoscope clock hands too thin and short
			- stars in parallax scrolling, star in drag/drop demo - badly out of shape
		- can't go back to what was there before - bug was testing for 0 rather than null
			- causes big problems when it comes to polar points based around a startXY of 0,0
		
130425
	- tutorial page
		- shifted Example21 into tutorial page (as demo33)
		- added Element.setDimensions() function
	- fixed mouse tracking bug for canvases in stacks
		- added Stack.displayOffsetX, .displayOffsetY, .setDisplayOffsets()
		- amended Pad.setDisplayOffsets() to take into account DOM changes
		- amended scrawl.getCanvas() etc - DOM changes (specific to Scrawl.js) should trigger Pad.displayOffsetXY recalculations
			
130424
	- continuing to write up Tutorial pages
		- stack page
			- added new Pad.setPerspective(), .setPerspectiveOrigin() functions
				- just for IE
	- added functions:
		- Stack.set(), Pad.set(), Pad.setDelta()
			- setDelta covers pitch, yaw, roll, translateZ, top, left
	- importing HTML elements into a scrawl stack
		- decided this needs to be done on specific stacks
			- new Stack functions: addElementById(), addElementsByStackName()
			- for the stackname function to work, elements need to include a class along the lines of 'stack_STACKNAME'
		- added a new Class object: Element
			- wrapper for all elements imported into the stack
			- new library attributes: scrawl.element, scrawl.elm, scrawl.elementnames
			- Element objects do much the same re CSS3d as Pad objects
				- mostly the same attributes; mostly the same functions
		- coded up demo032 to road test the new stuff - seems to work in browsers
			- painfully slow in Chrome (a surprise)
			- animations leave some trails on IE (no surprise)
			- works well in Firefox
			- imports work in Opera, but not CSS3d animations (no change there)
			- works fine in Windows Safari (bound to be some z-index issues, though)
		- need to recode Example021 to take on board these new developments
			- and get rid of the existing Image functions for importing/manipulating images on top of the canvas
				- which were/are no more than an ugly kludge
		- can also reconsider recoding Example020?
			- biggest problem for both is the existing index HTML layout - currently no stack on the index page!!!
			
130423
	- working on an animated cat over a 3D(ish) terrain
		- lots of corrections to functions coded yesterday
		- lots of research re Firefox CSS3d and drawing order (z-index) interactions
		- animation works in IE10, Firefox (finally), Chrome
			- but not Safari, nor Opera (which doesn't do the CSS3d thingy yet)
	- new functions
		- Cell.spliceCell() - for scrolling cells
			- recoded Example22 to take advantage of the new spliceCell function
		- Pad.setTranslateZ() - just seems to be another form of scaling ...
	- upgraded Scrawl.js to version 0.013(b) 
		- still need to complete the fields stuff before going for 0.02 (or even 0.1? There's not a lot more core stuff to be done)
	- updated documentation
	- updated website
	- uploaded latest version to SourceForge
	
130421-22
	- playing with css3d, trying to work out ways of integrating it into Scrawl.js
		- can also change stacking order by altering a (new) Pad.order attribute
			- Pad.order === <canvas> element.style.zIndex value
		- amended scrawl.getCanvas() function
			- if a <canvas> element has a class attribute class="stack:STACKNAME"
				- will create a div element atack with the stackname, if doesn't already exist
				- will setup (new) div so it can handle css3d transformations in its child elements
					- if user specifies existing (non-stack) element, up to them to create the css3d environment
				- will move canvas element to div element, styling it so css3d operartions can be performed/displayed by it
			- amended Pad constructor
				- stacked display canvas elements given id=NAME_display
			- with no stack class, Pad is created in the classical way
		- amended the Array.contains() function - will now also search for items that match a regular expression
			- if it finds a match, will return the first matching item, rather than true
		- amended scrawl.addCanvasToPage() function
			- every canvas added dynamically will automatically be given a css3d envoronment
			- specifying stackName argument for stack div that already exists - canvas will be assigned to that stack
		- added scrawl.addStackToPage() helper function
	- changed Shape.skew to Shape.roll across all files
	- added Wheel.roll attribute
		- amended various Wheel functions to make use of this attribute
		- updated demo011
	- added new Stack object
		- keeps track of perspective, perspective-origin & overflow style attributes on the containing stack div
		- also sniffs for IE so can trigger copying of perspective attributes to canvases (if needed)
		- new Stack functions: setPerspective(), setDimensions(), setOverflow(), setPerspectiveOrigin()
	- added new Pad functions: getBackfaceVisibility(), setBackfaceVisibility()
		- backfaceVisibility playing up in IE
	- more new Pad functions: 
		- getTransformStyle(), setTransformStyle(), getOrder(), setOrder() - for z-index
		- setPitch(), setYaw(), setRoll()
		- getTop(), setTop(), getLeft(), setLeft(), setPosition() - last takes (x, y), or ({x:number, y:number})
	
130420
	- investigating possibilities of including css3d in Scrawl.js
	- experiments prove that canvases can do css3d stuff
	- fixed scrawl.render() bug
		- if passed no arguments, scrawl will iterate through all pads listed in scrawl.padnames and get them to render
		- fixed same bug in scrawl.clear(), scrawl.compile(), scrawl.show()
	- possible roadmap:
		- add perspective attribute to Pad object
			- perspective: true - triggers DOM reconstruction to give Pad ability to do 3d transforms
		- need some sort of stack so that Pads can be displayed over each other
		- aim for the simpler stuff: yaw, pitch, roll
			- where roll=skew=clock rotation (around z axis)
			- yaw = left-right movement = horizontal rotation (movement along x axis)
			- pitch = up-down movement = vertical rotation (movement along y axis)
	
130419
	- new bug? - animations only display their ongoing results when mouse is in motion.
		- can't get bug to repeat itself
	- amended Shape.checkHit() - to take (x, y, test) as well as {x:val, y:val, test:val}
	- amended Shape.setStartTo() - to take (x, y) as well as {x:val, y:val}
	- writing up tutorial pages for the website
		- 'Shape' page completed
		- Demo027 coded
	- upgrade to version 0.0123b
	- updated documentation
	- updated website
	- uploaded latest version to SourceForge

130418
	- IE mouse position issue:
		- think I've solved it - probably a html layout problem
			- web page uses css tables, which expand/contract
			- set a min-width on the navigation cell, which stops unexpected contractions
				- firefox takes table instabilities into account when calculating mouse position; IE doesn't
		- also moved the window.onmousemove event into Scrawl
			- new scrawl.handleMouseMove() function
			- called whenever user calls Pad.getMouse()
	- writing up tutorial pages for the website
		- 'Picture with sprite sheet' page completed
		- 'Shape' page started
		- Demo019-026 coded
		- fixed scrawl.makeQuadratic() bug
	- changed Shape.delta attribute to Shape.skew
	- changed Vector object to Link object
		- lesson learned: choose the right names for things before coding the big javascript library!
	- updated documentation
			
130417
	- writing up tutorial pages for the website
		- fixed Scrawl.set() to return this
		- fixed Sprite.set()
		- 'Phrase' page completed
		- Demo012-015 coded
		- 'Picture' page completed
		- Demo016-018 coded
	- upgrade version to 0.0122(b)
	- update documentation
	- update website
	- upload new version to SourceForge
		
130416
	- writing up tutorial pages for the website
		- added Scrawl.toString() method - returns JSON.stringify(this)
			- can adapt this (later) to include ctx/design objects for cells and sprites, point/vector objects for Shapes, anim objects, etc
			- could be the foundation for save/load operations???
		- 'Scrawl library' page completed
		- 'Block' page completed
		- 'Wheel' page completed
		- Demo004-011 coded
		- amended Sprite.setDelta() to cover startAngle, endAngle attributes
	- updated documentation
	- updated website
	- loaded latest version to sourceforge
	- checked Examples in IE10
		- mouse location bug hasn't gone away
		- for most part, seems only to affect x (horizontal) position, not y
	- fixed wheel emboss bug
		- renamed 'emboss' drawing function to 'sinkInto'
		- introduced new sprite drawing function - 'floatOver'
			- all affected methods updated
			- all new methods added where required
			- local index and tutorial web pages updated
			
130415
	- tackled mouse position problem
		- now using code lifted from quirksmode website to keep track of mouse coordinates
		- seems to have fixed the problem in IE9 (on laptop)
			- not yet tested on other browsers
	- started mapping out a possible tutorial page for the website
		- added scrawl.addCanvasToPage(), Pad.makeCurrent() functions
			- for adding canvas elements dynamically to a webpage, and drawing to them
		- Demo001-003 coded
		- 'HTML5 page' completed
			
130414
	- added new pivot test to Sprite.stamp()
		- if pivot === 'mouse' - set sprite's startXY to the mouse coordinates in relation to pad being stamped to
		- updated Sprite.pickupSprite(), Sprite.dropSprite() functions to use pivot:'mouse'
		- updated those Examples where a sprite is attached to the mouse cursor
	- amended Cell object - changed .pads attribute to .pad
		- big change, as decided against cells contributing to more than one Pad object
			- placing a cellname in a Pad's cells array could achieve the same thing as the old .pads[] thingy?
				- Pad.clear(), Pad.compile() - use Pad.cells to determine which cells to clear/compile
				- Pad.show() - will only use cells listed in Pad.drawOrder (if drawOrder.length > 0)
			- added Pad.addCells(string||[string]) function to add cellnames to Pad.cells and Pad.drawOrder
				- will check that cells exist before adding them to attributes
				- I 'think' Sprite.stamp() should be okay with this arrangement?
					- uses cells listed in Group.cells to determine which cells to stamp on
					- each cell only lists one pad to which it contributes
					- uses that padname to call Pad.getMouse() when Sprite.pivot === 'mouse'
						- which means Sprite will only attach to mouse on the cell's designated Pad object!?
				- NONE OF THIS YET TESTED
	- started coding up new Phrase functions: getMetrics(); checkHit()
		- getMetrics() estimates text height - will no doubt run into problems when users choose to use em, %, etc
			- seems to work okay for pt and px
		- checkHit takes into account textBaseline and textAlign settings for the Phrase
			- NOT TESTED beyond textBaseline:alphabetic && textAlign:left
	- tested all the Examples in various browsers (on fast PC)
		- Safari
			- timed animations: 50-55fps
			- glitch during Ex26? Browser hung when mouse reentered canvas. Couldn't get it to repeat, so discounting it for now
			- Ex27 loaded in 1.1 secs
		- Opera
			- timed animations: 32-36fps
			- Ex15 - not displaying cow properly - problem with SVG file??
			- Ex17 - arrow out by x:-5px - fine on reload, couldn't get it to repeat ... glitch??
			- Ex21 - again image out by x:10px - possibly a Pad.getMouse() problem? Fine when repeated Example
			- Ex27 loaded in 1.4 secs
		IE10
			- mouse is definitely out by varying amounts across various Examples
				- NEED TO REVISIT getting mouse coordinates code
			- timed animations consistent at 64fps
			- Ex27 loaded in 0.8 secs
		- Chrome
			- Glitched once on Ex26 (carousel) - couldn't get problem to replicate - click issue?
			- Ex27 loaded in 1.4 secs
			- some sort order issues on Ex26 sprite display (all originals & clones have order=0 except when atMouse (before being pasted)
				- sort order changes result in some flicker in overlapping sprites
				- easily fixed in Example ...
			- still the smoothest scrolling for all browsers
		- Firefox
			- all as expected (Firefox is my goto browser during development)
			- Ex27 loaded in 1.7 secs
	- upgraded version to 0.012(b)
	- updated documentation
	- uploaded revisions to website
	- uploaded new version to SourceForge
		
130413
	- added Number.prototype.isBetween(val1, val2, boolean)
		- got fed up doing islessThan or isGreaterThan comparisons
		- when boolean set to true, test is minVal <= testVal <= maxVal === true
		- otherwise test is minVal < testVal < maxVal === true
			- also returns true if minVal === testVal === maxVal
		- amended several Examples to make use of this feature
	- added Sprite.pickupSprite(), Sprite.dropSprite() functions
		- allows for sprites to be picked up without initial movement
		- amended Example14 to make use of these functions
	- coded new Example27 to test cloning and collision detection across all Scrawl sprites
		- coded up Shape.clone function - overrides sprite.clone
			- also clones points and vectors, and sets everything up so the cloned sprite is a completely separate entity from its parent
		- amended Picture.getImageData(), Picture.checkHit()
			- so that sprites with animation sheets only register hits on the painted bits, not the surrounding box
			- requires user to call .getImageData() on the sprite before starting the collision detection stuff
	- updated documentation
	
130412
	- fixed bug in Sprite.clone()
	- amended Example03 to demonstrate getter/setter methods
	- updated documentation
	- new version: 0.011(beta) - will move to .02(b) when the collision detection stuff is more complete
	- updated website with revised example codes
		- tested live website against browsers
			- Firefox - everything works as expected at good speed (on high spec PC)
			- Safari(Windows) - still as jittery as ever, but everything works
			- Opera - slightly slower than Firefox, but better than has been - does NOT like Ex15; Ex17 also touch-and-go
			- IE10 - mostly fine (and fast!)
				- still got the issue with Ex15 - arrow does not clear from screen between angles +/- 60-120
				- Ex20 - not able to use selectors with the mouse, only through arrows/tab/return keys
			- Chrome - fast, smooth, works entirely as expected
	- uploaded new version to SourceForge
	- fixed 'bug' in Ex20
		- IE really hates styling added dynamically via style element - all other tested browsers were fine with it
		- solved by moving style stuff into the css file
	- fixed 'bug' in Ex15
		- made the arrow cell 1000x1000 - big enough not to send IE into hissyfits when the cell is rotated
	- updated website
	
------------------------------------------------------------------------------------
130411
	- finished fixing Example17
		- amended Phrase.deconstructFont() to fix font errors
	- updated Examples 16, 18-22, 24-26 for the mouse tracking and webpage animation improvements 
	- developing fields - 2D true/false arrays associated with cells
		- for use as bounding boxes and the like
			- uses sprites to determine which field elements are set to true
		- added field{} to the library - fields will have same name as their associated cells
		- added Cell.field attribute - an array of spritenames used to build the field
			- though single sprites can be entered as a string rather than an array
			- the boolean value 'true' can also be used
				- sets all the elements in the cell's field to true
		- added Cell.buildField() for constructing and populating scrawl.field entities
			- either sets all field elements to true (when it encounters the boolean value 'true')
			- or iterates through sprites in the field array and uses them to determine which field elements to set to true
				- so far only coded for Block sprites (which form squares)
				- Picture sprites will be able to use an alphaTable to set the field
				- Wheel, Phrase and Shape sprites - no decisions yet taken on how to handle these
		- added Sprite.setSpriteToCellFields(cells)
			- where:
				cell = true - add sprite to current pad's current cell's field array
				cell = string - add sprite to the named cell's field array
				cell = [string] - add sprite to all listed cells' field arrays
			- called as part of the sprite constructor, when a 'field' attribute is passed to it
		- added Cell.checkFieldAt() to return values from field at coordinatesXY
			- will accept (x, y), or ({x:n, y:n}), or spritename
				- amended Sprite.getStartXY functions to allow them being called without an override
		- added Sprite.checkField() function
			- uses getStartXY() for the checking point - thus affected by handleXY and scale values
			- will check against all of its group's cells
			- returns an object composed of cellname:boolean pairs
	- testing new fields thingy in Example03
		- added new methods to Block and Picture: getWidth(); getHeight(); getEndX(); getEndY()
	- testing in Example04
		- changed group.deltaXY to group.groupXY
		- added group.getGroupX(), group.getGroupY()
		- added group.checkField() method
	- updated Examples 03-04, 08 for fields and boundary testing

130410
	- decided to internalise MouseXY coordinates
		- new pad function .getMouse() 
			- returns XY coords offset from topleft of display canvas
			- also returns active: true if mouse is over the canvas
			- makes use of moustrack event listener added to scrawl file, but not part of scrawl library (like requestAnimFrame)
		- updated Examples 03-17 that involving mouse tracking 
			- except Example 16
			- currently debugging Example 17
	- spent a lot of time working out an effective method for killing animations when user presses an Example button (on website)
		- solved by making sure every animation routine has an off switch
			- either a counter set for 1000 frames
			- or a doAnimation[] flag
				- Examples set doAnimation[n] to true
				- Animation function only runs while doAnimation[n] remains true
				- in cleanup between Examples, doAnimation reset to []
			
130409
	- revisited Example14 - dragAndDrop
		- added new method to Group object - Group.getSpriteAt({x, y, sheet, test})
			- sheet = 'alpha', 'red', 'green', etc - imageDataTable to be checked
			- test = numerical value 
				- Picture: minimum value of (eg alpha level) check that needs to be passed for true result
				- Wheel: additional distance to be added (subtracted for negative values) to sprite's radius for the check
				- Shape: actual radius from Shape.startXY to use for the check
				- Block: not taken into account (only does box collision detection)
				- Phrase: not yet coded up the checkHit for phrase objects
		- amended Picture.checkHit so it can check imageData tables for hits, if requested by user
	- updated Example25 for the new group checking routines
	- developed Example26 - colliding balls and stars - to test wheel/shape sprite collision detection
		- added Wheel.checkHit() function
	- coded Shape.checkHit()
		- if test value supplied, use that as radius for circle collision test
		- otherwise, use longest start/end point distance value as the radius
	- coded Shape.getRadius()
		- returns the effective radius of a shape sprite
			- ie: the longest distance between a start/end point and the Shape.startXY values
		- Shape.getRadius(true) returns the scaled effective radius
	- upgraded Scrawl.js to version 0.0105(beta)
	- updated documentation
	- updated website
	- uploaded new version to SourceForge
	- NEW IE-related bug uncovered - Example20 - browser makes it difficult to use select dropdowns ...
		
130408
	- decided to remove property error checking stuff
		- Scrawl.checkValues() method removed
		- Scrawl.set() method amended
		- all objects inheriting from scrawl modified to remove the error check
	- moved scale property into Sprite object
		- removed scale from Phrase and Shape objects - now inherited from Sprite
		- amended Context.getChanges for scaling
			- 'lineWidth', 'shadowOffsetX', 'shadowOffsetY', 'shadowBlur' all now scale
				- unexpected, but tolerable, consequences for updated Example06
	- updating Examples
		- adapted Example06 to use scale, Pad.displayOffsetXY
		- adapted Example07 to use Pad.displayOffsetXY
		- adapted Example12 to use Pad.displayOffsetXY
		- adapted Example14 to use Pad.displayOffsetXY
		- adapted Example15 to use scale, Pad.displayOffsetXY
		- adapted Example16 to use Pad.displayOffsetXY
		- adapted Example17 to use Pad.displayOffsetXY
		- adapted Example18 to use Pad.displayOffsetXY
	- added Sprite.checkHit(x, y) method - returns false
		- for collision detection
		- coded Block.checkHit(), Picture.checkHit()
			- use simple (xy) in-box collision detection
			- takes into account handle offsets and scaling
	- completed Example25 - carousel selector
		- checked in websites:
			- fine in Firefox and IE10
			- works well in Chrome, except for delays on the click events
			- a bit slow in Safari
			- barely works in Opera
	- upgraded Scrawl to version 0.0104(beta)
	- updated documentation
	- updated website
	- uploaded to SourceForge

130407
	- developing Example25 - a carousel selector
		- experimented with stretching shapes into ovals 
			- abandoned - wasn't achieving the effect I wanted
		- experimented with sprite handles
	- no changes made to Scrawl.js
	
130406
	- added pivot attribute to Sprite object
		- pivot is the name of a point object
		- when present, sprite will set its startXY attributes to point currentXY values
		- added new method - 'none' to Sprite object
		- added override method 'none' to Shape object
			- doesn't draw shape, but will update currentXY values of its constituent points
	- developed Example23 to demonstrate the use of pivots and invisible sprites
		- rehash of example08
	- adapted new pivot feature to also accept a sprite name (for sprite.startXY) as a legitimate value
		- developed Example24 to demonstrate the feature
	- added a forceStamp() method to the Sprite object
		- allows sprites with visibility = false to be stamped into the scene
	- checked browsers
		- IE (10 - updated itself automatically yesterday) doesn't like Example17!
	- upgraded to version 0.0103(beta)
	- updated documentation
	- updated website
	- uploaded to SourceForge
	
130405
	- fixed bugs
		- IE was clipping Ex21 svg image rather than resizing it
			- fixed by editing svg file to include viewBox attribute in the <svg> element
		- all browsers were failing to position elements over the canvas browser correctly
			- only occurred when viewing Ex20 & Ex21 on the live website
			- fixed by changing the index.html <section> tag to a regular <div> tag
		- no amendments to Scrawl.js required to fix bugs
		- restored Examples 20-21 to the website
	- coded a parallax scrolling example (as Example22)
		- added backgroundColor attribute to Cell objects
		- amended Cell.compile() to draw the background color, if defined
		- tested new example in browsers - all okay
	- updated documentation
	- moved to version 0.0102(beta)
	- updated website
	- uploaded to SourceForge
			
130404
	- experimented with Example15 (as Example21)
		- get image to display directly over canvas element
	- extended the Pad object to handle experimental outfall
		- now includes: displayOffsetX; displayOffsetY; displayWidth; displayHeight
			- collects this data from the display cell during construction
		- setDisplayOffsets() - for setting/recalculating new attributes
	- extended the Image object to handle experiments
		- added attributes: startX; startY, handleX, handleY, offsetX, offsetY
			- offsetXY taken directly from image's Pad object
			- startXY can be used for directly positioning Image over (not in) canvas
			- handleXY - values between 0-1 for offsetting Image relative to startXY
				- this is DIFFERENT to how sprites and cells use their handleXY attributes
		- added functions: getHandle(); changeDimensions(); update(); addOverPad()
			- all for handling image over canvas operations
	- updated documentation
	- tested in browsers
		- Example21 currently not working correctly in IE9
	- moved to version 0.0101(beta)
	- uploaded to SourceForge
	- updated website
		- examples 20 & 21 not working as expected on live website - hidden from view for now
			- something's wrong with the absolute positioning of elements over the canvas
		
130403
	- adapted Example19 (as Example20) to add HTML form controls
	- no changes made to Scrawl.js

130402
	- investigated ways of turning Kaleidoscope Clock into an app
		- website version works on Kindle Fire
		- scrawl.js (mostly) working after appification via Android SDK/Eclipse
			- initial frame not cleared when testing on virtual phone emulations
			- initial setup skips a fair number of frames
	- no changes to scrawl.js made to facilitate, or as a result of, the experiments

130401
	- developing standalone version of the Kaleidoscope Clock
		- added click-to-change kaleidoscope feature
		- made it resizable
		- fixed bugs 
			- can't work out how to stop segments 'wandering' over time
	- added feature to Wheel object to create slices
	- updated documentation
	
130331
	- developed and deployed Example19 - the Kaleidoscope Clock
		- involves cell rotation, translation, scaling
			- for the flipping of sprites
		- tested in browsers
		- updated documentation
		- uploaded to website
		
------------------------------------------------------------------------------------
130330
	- AnimSheet object completed
		- anim{}, animnames[] added to scrawl library
			- scrawl.reset() amended
			- Scrawl.checkValues updated
		- Picture object substantially amended to handle sprite sheets
			- new functions: getImage(); changeAnimSheet(); setAnimSheetAction(); getRunningState()
			- new property: animSheet
	- added an 'avoid checking' flag to all constructor argument lists
		- new objects can be built/cloned without excessively checking variables
	- developed Example018 to test spritesheet animation
	- tested all Examples across browsers
		- everything renders as expected
		- Chrome gives the smoothest animations
		- Chrome, Firefox, IE9 are all around the 60fps mark (on high-spec PC)
		- Safari (windows) is slower - 45-50fps
		- Opera is very, very slow - 30fps on even the most basic animation
		- things are slower on the laptop - Firefox runs at ~ 50fps
	- updated documentation
	- think I've covered enough of the basics to move to v0.01(beta) ...

130329
	- working on sprite sheets
		- lots of coding; lots of abandoned ideas
		
130328
	- fixed bug in Cell constructor
		- was causing problems with cell-to-cell drawImage operations
			- in every browser except firefox/IE9
	- revisited Example09
		- added scrawl.makeBezier(), scrawl.makeQuadratic()
			- to simplify the creation of these sprites
		- added scrawl.deleteSprite()
			- can take a string name, or an array of string names
	- revisited Example08
		- added scrawl.makeRegularShape()
			- can take the arguments 'sides', or 'angle'
		- updated Example10 to make use of the new function
	- tested in browsers
	- advanced to v0.0051a
	- updated website
	- updated sourceForge
	- started mapping out ideas on how to handle sprite sheets
		- new object - AnimSheet - to handle frame data
		- adapted Picture object to handle sprite sheets and the AnimSheet object
		- Scrawl.clone, Scrawl.checkValues updated
	- updated documentation
		
130327
	- worked on moving the startXY points of Shape objects
		- can't use handleXY for this - that's just a displacement factor
		- Shapes use polar coordinates focussed on sprite's startXY values
		- finalised Example16 - drawing lines on the canvas and rotating them
	- worked on cell translation and rotation
		- fixed Cell.translateCell and Cell.rotateCell
		- built Example17 to demonstrate cell transformations
			- TODO - font object not working as expected
	- added scrawl.makeLine - for the sake of sanity
		- line start or end points can be made static (fixed=true)
			- now a feature of Shape, but flag held in the Point object
	- updated the Wheel object
		- now includes flags for direction, and whether circle is open or closed
	- updated documentation
	
130326
	- researched the use of svg images on the canvas
		- revisited the idea of importing svg files into Scrawl as Shape objects
			- experimented with getting data from the svg file
			- abandoned the idea - too complex, and the results would (almost certainly) be poor
		- looked at using svg files embedded directly in the web page
			- managed to get this working, but only in Opera
				- resizing such images was very problematical
		- looked at using svg files imported via an <img> element on the web page
			- seems to work well in all browsers tested
			- results (in Picture objects) probably not as crisp as svg originals, eg when changing size
	- added Example15 - using svg image via the <img> tag
		- TODO - consider adding a scale attribute to all sprites
			- currently only Shape has this built in
			- a number of the examples (06, 10, 11, 15) resize their sprites as they run
			- would save the user having to code up scaling operations
	- updated documentation
			
130325
	- all user input checking centralised into Scrawl.checkValues() method
		- fixed Scrawl clone and set methods to use checkValues
			- no longer needs to change the names of cloned objects in the library and elsewhere
		- developed checks for colour input 
			- probably overkill, but a good exercise
			- can be removed later if impacts too much on animation speeds
		- simplified all Scrawl objects' constructors to use checkValues
			- setting of default values still handled by object constructors, not checkValues
	- finished changes to the Context object
		- now includes methods .getContextFromEngine(), .getChanges(), .swapStyles()
			- Sprite.swap() now makes use of Context.swapStyles()
		- Cell and Sprite objects now store the Context object name, not the context itself
			- fixed Cell constructor to get Context to generate/register a new instance for the Cell
			- fixed scrawl.getCanvas, scrawl.addNewCell, scrawl.deleteCells
			- fixed Pad constructor, Pad.addNewCell
			- Cell/Pad constructors no longer need flags, but do need a canvas element handle to act on it
		- Context objects referenced through the scrawl library - scrawl.ctx, scrawl.ctxnames
		- fixed Cell.setEngine
		- added/amended Sprite.clone and Sprite.set methods
		- fixed Sprite.stamp
	- updated Examples
		- stricter colour input testing now means 'red' is rejected - has to be 'Red', etc
	- tested Scrawl in various browsers - works for all Examples
	- moved version to 0.005a
	- updated documentation
		
130324
	- decided to rejig Scrawl's internal structure:
		- making Cell and Sprite contexts fully independent objects
			- new ctx object and ctxnames array in scrawl library
		- centralising all the paramater checking into one Scrawl method
		- mainly done as a learning experience ... and to make maintenance a little easier
			- will probably impact on animation speeds
				- currently doesn't work at all ...
		
------------------------------------------------------------------------------------
130323
	- coded up scrawl.compile(), Pad.compile(), Cell.compile()
		- recoded Group to do sorting of sprites by their order parameter
		- recoded Pad to do sorting of groups by their order parameter
		- fixed scrawl.clone to ensure sprite renaming is registered with relevant groups
	- added Example13 - sprite reordering, adding user function to group, scrawl.render()
	- updated documentation
	- started considering drag-and-drop
		- not yet convinced it needs to be an intrinsic part of Scrawl
		- coded up Example14 
			- sprite selection handled by a user function added to the group
			- drag'n'drop handled by jQuery event listeners
	- updated website (v0.00441a)

130322
	- investigated the possibilities of importing SVG images into scrawl
		- it's a big job
		- worth investigating other js libraries that already have this function??
			- flag up as a possible coding exercise for sometime in the future ...
	- coded up getImageData function for the Cell object
		- will grab the whole Cell display, or just a part of it
		- takes parameters in an object: x, y, width, height, name, tables
			- tables argument can be a string of 'all', 'red', 'blue', 'green' or 'color'
			- or an array containing some of the above entries (except all, which gets ignored)
		- dumps the javascript imageData object into scrawl.imageData
		- optionally creates imageData tables (2 dimensional array) from the js imageData object
			_red, _green, _blue, _alpha - extracted data (0-255) for each of the rgba channels
			_color - table made up of rgba() values
		- access imageData tables - scrawl.imageDataTables[tableName][rowPosition][columnPosition]
			- where rowPosition === y coordinate
			- columnPosition === x coordinate
		- takes a long time to generate the tables: 1.5 - 2.5 secs for 750x375 image
		- returns the general name used for the tables
			- will generate specific tables with the names:
				generalName_red, generalName_blue, generalName_green, generalName_alpha, generalName_color
	- added Example12 - colour data under current mouse position
	- adapted getImageData function to work with Picture objects
		- captures the whole image
			- no arguments for capturing just part of it
			- only accepts a tables string or array
		- returns the Picture object
	- tested Example12a - getting imageData for Picture objects
	- updated documentation
	- upgraded library to v0.0044a
	- updated SourceForge page
	- updated website with latest version
	- updated github
			
130321
	- fixed Scrawl.set() and Scrawl.clone()
		- both now climb the hierarchy
		- objects that need to reset their own values after receiving new data ... do it
			- changes are triggered by object set() methods
			- changing data directly will often fail to be taken on board
				- myText.set({size: 30,}); will change the Phrase object's font size 
				- myText.size = 30; fails - object won't know to update its context.font value
		- got rid of the Util object
		- got rid of various flags - to simplify things for users
		- updated Pattern object to cope with new way of cloning things
	- tinkered with Shape and Phrase objects
		- Shape no longer needs arrays of its vectors and points, just the name of the initial point
		- Phrase now accepts metrics beyond 'px'
	- Shape objects no longer responsible for drawing their paths
		- instead, they just initiate the path drawing process
			- process works its way down the vector chain
		- Points are now responsible for checking their positions and reporting them back to vector objects
			- changing Point attributes must be done via set(), not directly
	- tested changes in various browsers
	- Point objects now require the name of their Shape in order to work
		- does mean that Shape objects should be set up before their associated Point and Vector objects
	- updated documentation
	- upgraded library to v0.0043a
	- updated SourceForge page
	- updated website with latest version
	- started github repository for key files
		
130320
	- developed the Phrase object for handling canvas text
		- font data can be entered either as separate items ...
				scrawl.newPhrase({
						text: "Hello!",
						weight: 'bold',
						style: 'italic',
						size: 40,
						family: 'Garamond, "Times New Roman", Georgia, serif',
						});		
		... or as a font string:
				scrawl.newPhrase({
						text: "Hello!",
						font: 'bold italic 40px Garamond, "Times New Roman", Georgia, serif',
						});		
		- added Example11 - animated text
		-checked performance in the usual browsers - appears okay (but not spectacular)
	- thought about text along path, Shape-like fonts (converted from SVG fonts), etc
		- something for later consideration
	- updated documentation
	- upgraded library to v0.0042a
	- updated SourceForge page
	- updated website with latest version

130319
	- recoded some of the Shape/Point/Vector code
	- added in scrawl methods to allow for a more shorthand method of creating point sets of point objects
		- scrawl.makeCartesianPoints()
		- scrawl.makePolarPoints()
	- tested Shape object further
		- see if a shape can hold more than one path (separated by moveTo() statements)
		- see if a shape can be created with holes in it 
			- yes, by following vector graphics conventions and doing the clockwise/anticlockwise thing
		- added Example10 - shapes with holes in them
	- updated documentation
	- started thinking about Text objects

130318
	- coded up Shapes object
		- shape's points defined by polar coordinates relative to the shape's startXY
		- point details held in separate Point objects
		- vector details held in separate Vector objects
			- Point() and Vector() inherit from Scrawl(), thus have .set() and .clone() methods
		- points and vectors are chained together
			- shape object asks vectors to draw themselves before performing stamp() operations
		- vectors coded: lineTo(); quadraticCurveTo(); bezierCurveTo()
		- Shape stamp routines: clear(); clip(); draw(); fill(); drawFill(); fillDraw(); emboss()
			- most of these not tested
			- non-draw operations limited to 'closed' shapes - can't fill an open shape
		- added Example08 - closed shape
		- added Example09 - open shape
	- checked to make sure shape objects work in other browsers - looks okay
	- updated documentation
	
130317
	- fixed Example07
		- used bigger image to help cells avoid the edge issue evident in the browser tests
		- used a globalCompositeOperation to build a stencil - a round magnifier in place of a square one
		- introduced Cell.handleX, Cell.handleY for copy ofsetting
	- coded some of the context formation events - scale, translate, rotate
		- NOT YET TESTED, just coded
		- decided against adding in transform()
			- Cell.transform() just calls up the scale, rotate and translate methods
	- added code to sprite objects to perform a clip()
		- initial testing - not good - clip performance vs globalCompositeOperation was dire
	- added in code to perform context save() and restore()
		- NOT YET TESTED, just coded
	- updated documentation
	- drafted spec for Scrawl Shapes object
	
------------------------------------------------------------------------------------
130316
	- working on the issues surrounding multiple cells (beyond the default cells)
	- added routines to clean Scrawl library after each website example runs
	- replaced cloning system with one which works properly
	- implementing website examples
		- Example07 working
	- testing Example07 in browsers
		- all problems suggest more work needed on better use of canvas drawImage routines
		- Firefox - works (mostly) as desired - magnifier image distorts on bottom/right borders of display cell
		- Internet Explorer - works, but magnifier border out by one pixel
		- Safari - works to a point - magnifier stops working when going beyond right/bottom borders of display cell
		- Opera - works in same manner as Firefox
		- Chrome - works (mostly) as expected
			- magnifier leaves red border at top of display when moving back onto the canvas from the top
			- magnifier image (but not border) disappears when it touches the bottom/right edges of the display cell
	- started complete rewrite of documentation
	- uploaded v0.004 to SourceForge
	- updated website to v0.004

130315
	- continued working on groups
	- implementing website examples
		- Example04 working
	- tested Scrawl in various browsers; fixed (where possible) bugs exposed by the exercise
		- Firefox 19.0.2 (windows 7)
		- Internet Explorer 9.0.8112.16421  (windows 7)
		- Safari 5.1.7 (windows 7)
		- Opera 12.14 (windows 7)
		- Chrome 25.0.1364.172 m (windows 7) ... Scrawl looks best on Chrome
	- further work on animation
	- implementing website examples
		- Example06 working
		
130314
	- fixed patterns object
	- implementing website examples
		- Example02 working
		- Example03 working
		- Example05 working
	- started working on Scrawl groups

130313
	- ported reusable code from v0.0031 to v0.004
	- worked on a cloning system for Scrawl objects
	- started work on implementing website examples
		- Example01 - working

130312
	- encapsulated library
	- coded up bones of the various classes
	- worked on object inheritance

130311
	- sketched out schematic of new version

------------------------------------------------------------------------------------
130310
	- v0.0031(alpha) abandoned - code was becoming too complex

130309
	- updated documentation
	- fixed Scrawl.displayWipedPads() glitch
		- coded Scrawl.wipeDisplayPads(), Scrawl.wipeCurrentPads(), Cell.wipeDisplay(), Cell.wipeCurrent()
	- code for adding (new) cells to a pad
		- coded Cell.set(), Cell.clone()
		- coded Pad.add()
		- coded Scrawl.addCell(), Scrawl.newCell()
		- added Cell.user{} attribute
		- tested for all six possible Pad.add() arguments
			- ('existingCellName') 
				- returns the named cell object
			- ('newCellName') 
				- returns NEW cell with name = 'newCellName'
			- (existingCellObject)
				- returns the named cell object
			- (objectWithNameAttributeWhichIsNotAnExistingCellName)
				- returns NEW cell with name = objectWithNameAttributeWhichIsNotAnExistingCellName.name
			- (objectWith-NO-NameAttribute)
				- returns NEW cell with name along the lines of currentCellName_xxxxxx
				- returns NEW cell with name based around CELL_xxxxxx
			- new cells take on board any attribute changes the user may have included in the object
				- existing cells ignore any such changes
		- coded Cell.resetToContext() - in case browsers differ from the Scrawl Cell/Sprite context defaults
			- added this in to Scrawl.getCanvas() to ensure consistency from the start
		- moved as much cell construction and registration stuff as possible into the Cell object
			- major reconstruction to Scrawl.getCanvas()
		- added Pad.addCells (different to Pad.add() - this one is private)
	- added Group.user{}; coded Group.clone() - for consistency & completeness
	- added Pad.user{}; coded Pad.set(), Pad.clone() - for consistency & completeness
	- implemented sprite.visibility and group.visibility directives in Cell.compileSprite() and Group.render()
	- updated documentation
	
130308
	- finished coding the wheel object
	- experimented with adding jQuery event listeners to control animations
		- fixed: Scrawl.getCanvas() was renaming original 'canvas' to 'canvas_display'
			- needed to be changed, as not obvious to casual users setting up jQuery listeners!
		- removed Block.animation, Block.lineCap attributes
	- move sprite rendering code into sprite.prototype - to keep things easier
		- sprite.method changed from ARRAY[STRING] to STRING - to simplify stuff
		- all the sprite-related switch material in Cell.compileSprite moved to the sprite.prototype objects
		- added Block.stamp(), Wheel.stamp() to handle the work
		- added doShadow attribute to Block and Wheel
			- handles fillDraw and drawFill glitch where the shadow was being drawn twice
	- added Block.clear(), Wheel.clear()
		- added doFill attribute to Block and Wheel
			- triggers a Cell.fillStyle change to transparent without changing the sprite's innate fillStyle property
	- added Scrawl.flag{} object 
		- was an abandoned attempt to fix the shadow problem, but may come in useful later
			- any context attribute can now be forced by setting the appropriate Scrawl.flag to true
				- does mirror the PadCommand force array - two systems to do the same job may be overkill
	- added Scrawl.radian constant - eases calculation of arcs and stuff
	- added Block.user{} and Wheel.user{} attributes
		- a place where users can add in their own variables, which can then be cloned to new objects
			- example004 now makes use of this feature
				- previously just added user variables to the Sprite object - couldn't be cloned
	- coded Cell methods fn_beginPath(), fn_arc(), fn_closePath(), fn_fill(), fn_stroke()
	
------------------------------------------------------------------------------------
130307
	- finished coding Group.render()
		- added Group.cleanup() to clean up the mess made by Group.render() and Group.renderSpriteUp()
		- TODO: probably better to prevent virtual Sprite/Group object registering with Scrawl
			- no need to cleanup if no mess made in the first place
	- developed the demonstration/testing website - currently on localhost
	- started working on animation
		- currently have user code animation functions outside of Scrawl
		- added Scrawl.setCellDimensions(), Cell.setDimensions()
			- for resizing Cells and setting their sX/sY/sW/sH/dX/dY/dW/dH attributes
		- added Scrawl.displayWipedPads(), Pad.wipeShow()
			- to assist user with Cell animation
		- added requestAnimFrame (shim by Paul Irish - http://paulirish.com/2011/requestanimationframe-for-smart-animating/
		- TODO: displaying an example after an animation - sprites sometimes lose their borders!
	- updated documentation
	- version 0.003(a) - to celebrate getting things moving on the screen!
	- started building a Wheel (circle) sprite object
	
130306
	- fixed CellCommand object; changed its name to PadCommand
		- fixed Block.draw/fill/drawFill/fillDraw() to work with PadCommand
		- removed Block.checkRender()- no longer needed
	- moved Cell.renderSpriteUp() to Group.renderSpriteUp() - to cleanup the purpose of Cell
		- fixed Block.draw/fill/drawFill/fillDraw() to work with Group.renderSpriteUp()
		- changed Pad.renderSpriteUp() to Pad.render()
		- fixed Group.renderSpriteUp(); fixed Pad.renderSpriteUp()
	- fixed Scrawl.displayPad() so it delegates the work to Pad objects; changed method name to displayPads()
		- changed Pad.display() to Pad.show(); method coded
	- added Scrawl.clearPads(); method coded
	- added Pad.clear(); method coded
	- added in a shedload of error checking stuff
	- added in Scrawl.clean() - to tidy up Scrawl attributes between scene renderings
	- added in Scrawl.cellActionRequired 
		- used to ensure cells don't get drawn more than once in a Sprite/Group renderUp chain
		- re-fixed Group.renderSpriteUp() and Pad.renderSpriteUp()
	- coded Group.render()
		- took code from Group.renderSpriteUp to make two new methods which can also be used by Group.render()
			- Group.getPadsForRender(); Group.prepareCellActionRequired()
	- updated documentation
	
130305
	- started writing documentation before taking development forward; working on Group object
	- uploaded work to date to SourceForge as a new project
	
130304
	- MILESTONE: got boxes to show up on the canvas; 
	
130303
	- started coding CellCommander and Group objects
	
130302
	- import of reusable bits of v0.001 into v0.002 largely completed
	
130301
	- started coding Scrawl, Pad, Cell, Block, Gradient, RadialGradient, Pattern objects
	
130228
	- map out initial ideas about how to get multiple canvases to interact
	
130227
	- v0.001(alpha) abandoned - was drawing boxes on canvases, but needed much more thought on structures
